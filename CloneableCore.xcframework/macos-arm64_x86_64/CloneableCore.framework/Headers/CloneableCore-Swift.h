#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef CLONEABLECORE_SWIFT_H
#define CLONEABLECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CloneableCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC13CloneableCore13BoxSnapPoints")
@interface BoxSnapPoints : NSObject <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSString;
@class NSNumber;

SWIFT_CLASS("_TtC13CloneableCore20CloneableBoundingBox")
@interface CloneableBoundingBox : NSObject <NSCopying>
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic) CGRect boundingBox;
@property (nonatomic, copy) NSString * _Nonnull label;
@property (nonatomic) double confidence;
@property (nonatomic) double trackID;
@property (nonatomic) BOOL createdByPerson;
@property (nonatomic) BOOL modifiedByPerson;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id boundingBox:(CGRect)boundingBox label:(NSString * _Nonnull)label confidence:(double)confidence trackID:(double)trackID measuredWidth:(NSNumber * _Nullable)measuredWidth measuredHeight:(NSNumber * _Nullable)measuredHeight state:(NSInteger)state createdByPerson:(BOOL)createdByPerson modifiedByPerson:(BOOL)modifiedByPerson referenceImageWidth:(NSInteger)referenceImageWidth referenceImageHeight:(NSInteger)referenceImageHeight measurementSnapped:(BOOL)measurementSnapped boxSnapPoints:(BoxSnapPoints * _Nullable)boxSnapPoints OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




























template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {

























































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
































































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqyxSgxcfc");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {

























































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




















































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {


















































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(some_), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  return _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  return _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  return _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  return _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  return _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  return _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  return _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  return _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CFloat16'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'getVaList(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("CloneableCore", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {
extern "C" {
#endif

SWIFT_EXTERN void $s13CloneableCore3qlloiyySayxGz_xSgtlF(void * _Nonnull lhs, const void * _Nonnull rhs, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // ?<<(_:_:)
SWIFT_EXTERN void $s13CloneableCore2qeoiyyxz_xSgtlF(void * _Nonnull lhs, const void * _Nonnull rhs, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // ?=(_:_:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore7APICallV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore7APICallV9relatedIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore7APICallV11modelToSyncAA05ModeleF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore7APICallV6statusAA0C6StatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore7APICallV6statusAA0C6StatusOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore13APICallStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore13APICallStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore8APIErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV9isComplexSbyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // isComplex()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore03AnyA4DataV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV7isEqual2toSbAC_tF(const void * _Nonnull to, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // isEqual(to:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV4fromACSg5JXKit7JXValueC_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull jxValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(from:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore03AnyA4DataV14getStringValueSSSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringValue()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint8_t_0_1(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 value) {
  memcpy(result + 0, &value._1, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 $s13CloneableCore03AnyA4DataV12getBoolValueSbSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getBoolValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore03AnyA4DataV13getArrayValueSayACGSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getArrayValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore03AnyA4DataV19getBoundingBoxValueAA0afG0CSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getBoundingBoxValue()
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV11getDepthMapAA0afG0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDepthMap()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore03AnyA4DataV14getNumberValueSdSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getNumberValue()
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV16getDepthMapValueAA0afG0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDepthMapValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore03AnyA4DataV16getFileExtensionSSSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getFileExtension()
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV19getObjectFieldValue9fieldNameACSgSS_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fieldName, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getObjectFieldValue(fieldName:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6numberyACSdFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, double value) SWIFT_NOEXCEPT SWIFT_CALL; // number(_:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_void_ptr_0_8 swift_interop_passDirect_CloneableCore_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV5arrayyACSayACGFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value) SWIFT_NOEXCEPT SWIFT_CALL; // array(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6statusyACSSFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // status(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6stringyACSSFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // string(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV7booleanyACSbFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, bool value) SWIFT_NOEXCEPT SWIFT_CALL; // boolean(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV11boundingboxyAcA0A11BoundingBoxCFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull value) SWIFT_NOEXCEPT SWIFT_CALL; // boundingbox(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6objectyACSSFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // object(_:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV18bindingStringValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV18bindingStringValueSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13CloneableCore03AnyA4DataV18bindingNumberValueSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV18bindingNumberValueSdvs(double newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvs(bool newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV18bindingStatusValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV18bindingStatusValueSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV7isArraySbyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // isArray()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore03AnyA4DataV20getArrayTypeAsStringSSSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getArrayTypeAsString()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore19AuthenticationErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ArrayV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN void $s13CloneableCore0A5ArrayV4dataACSayAA03AnyA4DataVG_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_void_ptr_0_8 data) SWIFT_NOEXCEPT SWIFT_CALL; // init(data:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ArrayV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ArrayV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A5ArrayV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A10AuthStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A7BooleanV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A7BooleanV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A7BooleanVyACSbcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, bool value) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A7BooleanV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A7BooleanV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ColorV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1rSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1rSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1gSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1gSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1bSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1bSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1aSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1aSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ColorV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ColorV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A5ColorV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A15ConnectionStateO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCoreAAC5appIDSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCoreAAC5appIDSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC5appIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC5appIDSSvsTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvgTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvsTj(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvgTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvsTj(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvgTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvsTj(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC7signOutyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // signOut()
SWIFT_EXTERN void $s13CloneableCoreAAC7signOutyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for signOut()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC12getDataCacheAA0D7ManagerCyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDataCache()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC12getDataCacheAA0D7ManagerCyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getDataCache()
SWIFT_EXTERN void $s13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getConnectionStatus()
SWIFT_EXTERN void $s13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getConnectionStatus()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC5cacheAA17LocalCacheManagerCyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cache()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC5cacheAA17LocalCacheManagerCyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for cache()
SWIFT_EXTERN void $s13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getRuntimeEnvironment()
SWIFT_EXTERN void $s13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getRuntimeEnvironment()
SWIFT_EXTERN void $s13CloneableCoreAAC13startWorkflow10workflowIdySS_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 workflowId, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // startWorkflow(workflowId:)
SWIFT_EXTERN void $s13CloneableCoreAAC13startWorkflow10workflowIdySS_tFTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 workflowId, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for startWorkflow(workflowId:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A9DataErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A10DataObjectV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN void $s13CloneableCore0A10DataObjectV4dataACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 data) SWIFT_NOEXCEPT SWIFT_CALL; // init(data:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A10DataObjectV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A10DataObjectV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A10DataObjectV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4DateV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4DateV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4DateV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A4DateV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8DepthMapV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN bool $s13CloneableCore0A8DepthMapV11complexTypeSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV11complexTypeSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8 swift_interop_passDirect_CloneableCore_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8DepthMapV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8DepthMapV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A8DepthMapV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN OS_dispatch_queue *_Nonnull $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN OS_dispatch_queue *_Nonnull $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvs(OS_dispatch_queue *_Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvsTj(OS_dispatch_queue *_Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC10totalFilesSivg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC10totalFilesSivgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC10totalFilesSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC10totalFilesSivsTj(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivsTj(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // processAndSyncObjectsNonCompleteRequests()
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for processAndSyncObjectsNonCompleteRequests()
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StF(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileType, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 displayName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getCloneableDataFromFile(fileName:fileType:displayName:)
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileType, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 displayName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getCloneableDataFromFile(fileName:fileType:displayName:)
SWIFT_EXTERN bool $s13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // fileExistsLocally(fileName:)
SWIFT_EXTERN bool $s13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tFTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for fileExistsLocally(fileName:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getNumberOfDownloadedFiles()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getNumberOfDownloadedFiles()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8FileTypeO010getContentD013fileExtensionS2SSg_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileExtension, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getContentType(fileExtension:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8FileTypeO03getC9Extension07contentD0S2SSg_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 contentType, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getFileExtension(contentType:)
SWIFT_EXTERN void $s13CloneableCore0A8FileTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8FileTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV18convertKMLToStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // convertKMLToString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A3KMLV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV2idSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13CloneableCore0A8LocationV8latitudeSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV8latitudeSdvs(double value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13CloneableCore0A8LocationV9longitudeSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV9longitudeSdvs(double value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore0A8LocationV8altitudeSdSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 1);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore0A8LocationV8altitudeSdSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore0A8LocationV11complexTypeSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV11complexTypeSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV17simpleDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // simpleDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A8LocationV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3LogV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV2idSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8logLevelAA0cE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8logLevelAA0cE0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3LogV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV7messageSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore0A6LoggerC7getLogsSayAA0A3LogVGyFZ(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getLogs()
SWIFT_EXTERN void $s13CloneableCore0A6LoggerC9clearLogsyyFZ(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // clearLogs()
SWIFT_EXTERN void $s13CloneableCore0A6LoggerC15notifyObservers3logyAA0A3LogV_tFZ(const void * _Nonnull log, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // notifyObservers(log:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6NumberV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A6NumberV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A6NumberVyACSdcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, double value) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6NumberV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6NumberV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StatusV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A6StatusV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A6StatusV4jsonACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 json) SWIFT_NOEXCEPT SWIFT_CALL; // init(json:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StatusV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StatusV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StringV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A6StringV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A6StringV4jsonACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 json) SWIFT_NOEXCEPT SWIFT_CALL; // init(json:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StringV09getTypeAsC0SSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StringV03getC11DescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A9SyncErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A10SyncStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4UUIDV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4UUIDV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4UUIDV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A4UUIDV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore25CompletedWorkflowCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore25CompletedWorkflowCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9ComponentV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV2idSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV4typeAA0C4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV4typeAA0C4TypeOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16ComponentRuntimeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16ComponentRuntimeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore13ComponentTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore13ComponentTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10ComponentsC12addComponent9componentyAA0E0V_tFZ(const void * _Nonnull component, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // addComponent(component:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9DataInputV18componentDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV18componentDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9DataInputV14inputDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV14inputDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9DataInputV13inputStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV13inputStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV4dataAA03AnyaC0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV4dataAA03AnyaC0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore9DataInputV5batchSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV5batchSiSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore9DataInputV12currentBatchSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV12currentBatchSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void * _Nonnull $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void * _Nonnull $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvs(void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvsTj(void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore11DataManagerC14clearFileCacheyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // clearFileCache()
SWIFT_EXTERN void $s13CloneableCore11DataManagerC14clearFileCacheyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for clearFileCache()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC9getUserIdSSSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getUserId()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC9getUserIdSSSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getUserId()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 auth0_jwt, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // canProceed(auth0_jwt:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tFTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 auth0_jwt, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for canProceed(auth0_jwt:)
SWIFT_EXTERN void $s13CloneableCore18DataObjectCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore18DataObjectCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore10DataOutputV11outputCountSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV11outputCountSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV07dynamicD2IDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV07dynamicD2IDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV17staticComponentIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV17staticComponentIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV18dynamicComponentIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV18dynamicComponentIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV15typeDescriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV15typeDescriptionSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore10DataOutputV5batchSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV5batchSiSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV4data17staticComponentID07dynamicgH00idH006outputG4Type11targetInputAcA03AnyaC0V_S3SAA0gK0OAA06TargetM0VSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull data, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 staticComponentID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 dynamicComponentID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 dynamicOutputID, const void * _Nonnull outputComponentType, const void * _Nonnull targetInput) SWIFT_NOEXCEPT SWIFT_CALL; // init(data:staticComponentID:dynamicComponentID:dynamicOutputID:outputComponentType:targetInput:)
SWIFT_EXTERN void $s13CloneableCore10DataOutputV09convertToC5Input9firstCallAA0cG0VSb_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, bool firstCall, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // convertToDataInput(firstCall:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvsTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore11DisplayModeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV8fileNameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV8fileNameSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore20FieldFileInformationV8fileSizeSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV8fileSizeSiSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV8fileTypeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV8fileTypeSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV7fileUrlSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV7fileUrlSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV15storageProviderSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV15storageProviderSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 $s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint8_t_0_1 swift_interop_passDirect_CloneableCore_uint8_t_0_1(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint8_t_0_1 result;
  memcpy(&result._1, value + 0, 1);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvs(struct swift_interop_passStub_CloneableCore_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV13fileExtension0F4Name0F4Size0F4Type0F3Url019storageAuthProviderH00lmN5RefID0lN012one_way_syncACSSSg_AMSiSgA5MSbSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileExtension, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 fileSize, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileType, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileUrl, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 storageAuthProviderName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 storageAuthProviderRefID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 storageProvider, struct swift_interop_passStub_CloneableCore_uint8_t_0_1 one_way_sync) SWIFT_NOEXCEPT SWIFT_CALL; // init(fileExtension:fileName:fileSize:fileType:fileUrl:storageAuthProviderName:storageAuthProviderRefID:storageProvider:one_way_sync:)
SWIFT_EXTERN void $s13CloneableCore23FileInformationCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore23FileInformationCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore17FileObserverTokenC6cancelyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cancel()
SWIFT_EXTERN void $s13CloneableCore17FileObserverTokenC6cancelyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for cancel()
SWIFT_EXTERN void $s13CloneableCore16FileSyncRelationO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16FileSyncRelationO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore15FileSyncRequestV8fileNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV4dataAA03AnyA4DataVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV12fileRelationAA0cdG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV8fileTypeAA0acG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore15FileSyncRequestV12one_way_syncSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore15FileSyncRequestV4userSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore15FileSyncRequestV7companySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore15FileSyncRequestV9typeRefIDSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore15FileSyncRequestV26relatedDeployedWorkflowIDsSaySSGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore15FileSyncRequestV8downloadSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV05fieldC11InformationAA05FieldcG0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore8LogLevelO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore8LogLevelO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN void $s13CloneableCore11ModelToSyncO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11ModelToSyncO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore27NotificationRequestCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore27NotificationRequestCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore17ObjectIdGeneratorV8generateSSyFZ(void) SWIFT_NOEXCEPT SWIFT_CALL; // generate()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV15targetDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV15targetDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV11targetInputSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV11targetInputSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV14targetStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV14targetStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV10targetTypeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV10targetTypeSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV19targetInputStaticID0e7DynamicH00eF00egH00E4TypeACSS_S4StcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetInputStaticID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetDynamicID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetInput, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetStaticID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetType) SWIFT_NOEXCEPT SWIFT_CALL; // init(targetInputStaticID:targetDynamicID:targetInput:targetStaticID:targetType:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore12ParsingErrorV4lineSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore12ParsingErrorV6columnSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore12ParsingErrorV16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12ParsingErrorV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore19RUNTIME_ENVIRONMENTO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15SyncStatusTokenC11unsubscribeyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // unsubscribe()
SWIFT_EXTERN void $s13CloneableCore15SyncStatusTokenC11unsubscribeyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for unsubscribe()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore15SyncStatusTokenC9hashValueSivg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore15SyncStatusTokenC9hashValueSivgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getUnsyncedFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getUnsyncedFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTotalFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getTotalFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getSyncedFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getSyncedFileCount()
SWIFT_EXTERN void $s13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cancel()
SWIFT_EXTERN void $s13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for cancel()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 $s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvs(struct swift_interop_passStub_CloneableCore_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore23SyncedFileInformationV2V8fileNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V8fileNameSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV06targetD8StaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV06targetD8StaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV06targetD9DynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV06targetD9DynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV23targetComponentStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV23targetComponentStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TextElementC4textSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10TrackStateO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore10TrackStateO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvsTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12XMLAttributeV4nameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12XMLAttributeV4textSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12XMLAttributeV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC4nameSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore10XMLElementC15caseInsensitiveSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore10XMLElementC15caseInsensitiveSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 name, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // attribute(by:)
SWIFT_EXTERN void $s13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 name, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for attribute(by:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC4textSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC4textSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC13recursiveTextSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC13recursiveTextSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC8innerXMLSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC8innerXMLSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _

#ifdef __cplusplus
}
}
}
namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// push value to array if rhs is not optonal. When rhs is optional, nothing to do.
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void ?<<(swift::Array<T_0_0>& lhs, const swift::Optional<T_0_0>& rhs) noexcept SWIFT_SYMBOL("s:13CloneableCore3qlloiyySayxGz_xSgtlF") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s13CloneableCore3qlloiyySayxGz_xSgtlF(swift::_impl::_impl_Array<T_0_0>::getOpaquePointer(lhs), swift::_impl::_impl_Optional<T_0_0>::getOpaquePointer(rhs), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
}


/// assign value if rhs is not optonal. When rhs is optional, nothing to do.
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void ?=(T_0_0& lhs, const swift::Optional<T_0_0>& rhs) noexcept SWIFT_SYMBOL("s:13CloneableCore2qeoiyyxz_xSgtlF") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s13CloneableCore2qeoiyyxz_xSgtlF(swift::_impl::getOpaquePointer(lhs), swift::_impl::_impl_Optional<T_0_0>::getOpaquePointer(rhs), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
}

class SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO") ModelToSync;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ModelToSync> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO") APICallStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::APICallStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore7APICallV") APICall;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::APICall> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_APICall;

// Type metadata accessor for APICall
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore7APICallVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore7APICallV") APICall final {
public:
  SWIFT_INLINE_THUNK ~APICall() noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APICall(const APICall &other) noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APICall &operator =(const APICall &other) noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APICall &operator =(APICall &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APICall(APICall &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore7APICallV2idSSvp");
  SWIFT_INLINE_THUNK swift::String getRelatedID() const SWIFT_SYMBOL("s:13CloneableCore7APICallV9relatedIDSSvp");
  SWIFT_INLINE_THUNK ModelToSync getModelToSync() const SWIFT_SYMBOL("s:13CloneableCore7APICallV11modelToSyncAA05ModeleF0Ovp");
  SWIFT_INLINE_THUNK APICallStatus getStatus() const SWIFT_SYMBOL("s:13CloneableCore7APICallV6statusAA0C6StatusOvp");
  SWIFT_INLINE_THUNK void setStatus(const APICallStatus& value) SWIFT_SYMBOL("s:13CloneableCore7APICallV6statusAA0C6StatusOvp");
private:
  SWIFT_INLINE_THUNK APICall(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK APICall _make() noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return APICall(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_APICall;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore7APICallVD;
  static inline constexpr $s13CloneableCore7APICallVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APICall {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APICall &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APICall &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APICall returnNewValue(T callable) {
    auto result = APICall::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::APICall> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore7APICallVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::APICall> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::APICall> = true;
template<>
struct implClassFor<CloneableCore::APICall> { using type = CloneableCore::_impl::_impl_APICall; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_APICallStatus;

// Type metadata accessor for APICallStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore13APICallStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum APICallStatus
extern "C" {
extern unsigned $s13CloneableCore13APICallStatusO7PendingyA2CmFWC;
extern unsigned $s13CloneableCore13APICallStatusO7SyncingyA2CmFWC;
extern unsigned $s13CloneableCore13APICallStatusO6SyncedyA2CmFWC;
extern unsigned $s13CloneableCore13APICallStatusO5ErroryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO") APICallStatus final {
public:
  SWIFT_INLINE_THUNK ~APICallStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APICallStatus(const APICallStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APICallStatus &operator =(const APICallStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APICallStatus &operator =(APICallStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APICallStatus(APICallStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    Pending SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7PendingyA2CmF"),
    Syncing SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7SyncingyA2CmF"),
    Synced SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO6SyncedyA2CmF"),
    Error SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO5ErroryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_Pending {  // impl struct for case Pending
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Pending;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Pending SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7PendingyA2CmF");
  SWIFT_INLINE_THUNK bool isPending() const;

  inline const static struct _impl_Syncing {  // impl struct for case Syncing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Syncing;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Syncing SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7SyncingyA2CmF");
  SWIFT_INLINE_THUNK bool isSyncing() const;

  inline const static struct _impl_Synced {  // impl struct for case Synced
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Synced;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Synced SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO6SyncedyA2CmF");
  SWIFT_INLINE_THUNK bool isSynced() const;

  inline const static struct _impl_Error {  // impl struct for case Error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Error;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Error SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO5ErroryA2CmF");
  SWIFT_INLINE_THUNK bool isError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore13APICallStatusO7PendingyA2CmFWC) return cases::Pending;
    if (tag == _impl::$s13CloneableCore13APICallStatusO7SyncingyA2CmFWC) return cases::Syncing;
    if (tag == _impl::$s13CloneableCore13APICallStatusO6SyncedyA2CmFWC) return cases::Synced;
    if (tag == _impl::$s13CloneableCore13APICallStatusO5ErroryA2CmFWC) return cases::Error;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<APICallStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK APICallStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK APICallStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return APICallStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_APICallStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore13APICallStatusOD;
  static inline constexpr $s13CloneableCore13APICallStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APICallStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APICallStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APICallStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APICallStatus returnNewValue(T callable) {
    auto result = APICallStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::APICallStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore13APICallStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::APICallStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::APICallStatus> = true;
template<>
struct implClassFor<CloneableCore::APICallStatus> { using type = CloneableCore::_impl::_impl_APICallStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore8APIErrorO") APIError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::APIError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_APIError;

// Type metadata accessor for APIError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8APIErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum APIError
extern "C" {
extern unsigned $s13CloneableCore8APIErrorO17invalidReturnTypeyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO16apiManagerNotSetyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO17serverUnreachableyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO15invalidResponseyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8APIErrorO") APIError final {
public:
  SWIFT_INLINE_THUNK ~APIError() noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APIError(const APIError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APIError &operator =(const APIError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APIError &operator =(APIError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APIError(APIError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    invalidReturnType SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17invalidReturnTypeyA2CmF"),
    couldntAuthenticateRequest SWIFT_SYMBOL("s:13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmF"),
    apiManagerNotSet SWIFT_SYMBOL("s:13CloneableCore8APIErrorO16apiManagerNotSetyA2CmF"),
    serverUnreachable SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17serverUnreachableyA2CmF"),
    invalidResponse SWIFT_SYMBOL("s:13CloneableCore8APIErrorO15invalidResponseyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_invalidReturnType {  // impl struct for case invalidReturnType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidReturnType;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } invalidReturnType SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17invalidReturnTypeyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidReturnType() const;

  inline const static struct _impl_couldntAuthenticateRequest {  // impl struct for case couldntAuthenticateRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::couldntAuthenticateRequest;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } couldntAuthenticateRequest SWIFT_SYMBOL("s:13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isCouldntAuthenticateRequest() const;

  inline const static struct _impl_apiManagerNotSet {  // impl struct for case apiManagerNotSet
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::apiManagerNotSet;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } apiManagerNotSet SWIFT_SYMBOL("s:13CloneableCore8APIErrorO16apiManagerNotSetyA2CmF");
  SWIFT_INLINE_THUNK bool isApiManagerNotSet() const;

  inline const static struct _impl_serverUnreachable {  // impl struct for case serverUnreachable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serverUnreachable;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } serverUnreachable SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17serverUnreachableyA2CmF");
  SWIFT_INLINE_THUNK bool isServerUnreachable() const;

  inline const static struct _impl_invalidResponse {  // impl struct for case invalidResponse
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidResponse;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } invalidResponse SWIFT_SYMBOL("s:13CloneableCore8APIErrorO15invalidResponseyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidResponse() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore8APIErrorO17invalidReturnTypeyA2CmFWC) return cases::invalidReturnType;
    if (tag == _impl::$s13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmFWC) return cases::couldntAuthenticateRequest;
    if (tag == _impl::$s13CloneableCore8APIErrorO16apiManagerNotSetyA2CmFWC) return cases::apiManagerNotSet;
    if (tag == _impl::$s13CloneableCore8APIErrorO17serverUnreachableyA2CmFWC) return cases::serverUnreachable;
    if (tag == _impl::$s13CloneableCore8APIErrorO15invalidResponseyA2CmFWC) return cases::invalidResponse;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore8APIErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK APIError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK APIError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return APIError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_APIError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8APIErrorOD;
  static inline constexpr $s13CloneableCore8APIErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APIError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APIError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APIError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APIError returnNewValue(T callable) {
    auto result = APIError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::APIError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8APIErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::APIError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::APIError> = true;
template<>
struct implClassFor<CloneableCore::APIError> { using type = CloneableCore::_impl::_impl_APIError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {





class SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV") CloneableDepthMap;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDepthMap> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV") AnyCloneableData;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::AnyCloneableData> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_AnyCloneableData;

// Type metadata accessor for AnyCloneableData
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore03AnyA4DataVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV") AnyCloneableData final {
public:
  SWIFT_INLINE_THUNK ~AnyCloneableData() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableData(const AnyCloneableData &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableData &operator =(const AnyCloneableData &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AnyCloneableData &operator =(AnyCloneableData &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AnyCloneableData(AnyCloneableData &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Function to get the JSON string value from
///
/// returns:
/// The JSON string value
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK bool isComplex() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV9isComplexSbyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF");
  SWIFT_INLINE_THUNK bool isEqual(const AnyCloneableData& to) const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV7isEqual2toSbAC_tF");
/// Initializes a new instance of the <code>CloneableDataType</code> with a given <code>jxValue</code> object.
/// \param from The <code>jxValue</code> object to be used to create a new instance of <code>CloneableDataType</code>.
///
///
/// returns:
/// An instance of <code>CloneableDataType</code> if <code>jxValue</code> is a valid JSON object or array, <code>nil</code> otherwise.
  static SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> init(const JXValue& jxValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV4fromACSg5JXKit7JXValueC_tcfc");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStringValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV14getStringValueSSSgyF");
  SWIFT_INLINE_THUNK swift::Optional<bool> getBoolValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV12getBoolValueSbSgyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<AnyCloneableData>> getArrayValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV13getArrayValueSayACGSgyF");
  SWIFT_INLINE_THUNK swift::Optional<CloneableBoundingBox> getBoundingBoxValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19getBoundingBoxValueAA0afG0CSgyF");
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> getDepthMap() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV11getDepthMapAA0afG0VSgyF");
  SWIFT_INLINE_THUNK swift::Optional<double> getNumberValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV14getNumberValueSdSgyF");
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> getDepthMapValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV16getDepthMapValueAA0afG0VSgyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileExtension() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV16getFileExtensionSSSgyF");
/// Function to get the broken out values if the data type is a custom object type
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> getObjectFieldValue(const swift::String& fieldName) const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19getObjectFieldValue9fieldNameACSgSS_tF");
  static SWIFT_INLINE_THUNK AnyCloneableData number(double value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6numberyACSdFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData array(const swift::Array<AnyCloneableData>& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV5arrayyACSayACGFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData status(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6statusyACSSFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData string(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6stringyACSSFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData boolean(bool value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV7booleanyACSbFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData boundingbox(const CloneableBoundingBox& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV11boundingboxyAcA0A11BoundingBoxCFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData object(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6objectyACSSFZ");
  SWIFT_INLINE_THUNK swift::String getBindingStringValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStringValueSSvp");
  SWIFT_INLINE_THUNK void setBindingStringValue(const swift::String& newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStringValueSSvp");
  SWIFT_INLINE_THUNK double getBindingNumberValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingNumberValueSdvp");
  SWIFT_INLINE_THUNK void setBindingNumberValue(double newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingNumberValueSdvp");
  SWIFT_INLINE_THUNK bool getBindingBooleanValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19bindingBooleanValueSbvp");
  SWIFT_INLINE_THUNK void setBindingBooleanValue(bool newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19bindingBooleanValueSbvp");
  SWIFT_INLINE_THUNK swift::String getBindingStatusValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStatusValueSSvp");
  SWIFT_INLINE_THUNK void setBindingStatusValue(const swift::String& newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStatusValueSSvp");
  SWIFT_INLINE_THUNK bool isArray() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV7isArraySbyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getArrayTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV20getArrayTypeAsStringSSSgyF");
private:
  SWIFT_INLINE_THUNK AnyCloneableData(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AnyCloneableData _make() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AnyCloneableData(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AnyCloneableData;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore03AnyA4DataVD;
  static inline constexpr $s13CloneableCore03AnyA4DataVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AnyCloneableData {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AnyCloneableData &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AnyCloneableData &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AnyCloneableData returnNewValue(T callable) {
    auto result = AnyCloneableData::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::AnyCloneableData> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore03AnyA4DataVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::AnyCloneableData> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::AnyCloneableData> = true;
template<>
struct implClassFor<CloneableCore::AnyCloneableData> { using type = CloneableCore::_impl::_impl_AnyCloneableData; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {







class SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO") AnyCloneableDataError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::AnyCloneableDataError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_AnyCloneableDataError;

// Type metadata accessor for AnyCloneableDataError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore03AnyA9DataErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AnyCloneableDataError
extern "C" {
extern unsigned $s13CloneableCore03AnyA9DataErrorO10failedInityA2CmFWC;
extern unsigned $s13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO") AnyCloneableDataError final {
public:
  SWIFT_INLINE_THUNK ~AnyCloneableDataError() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError(const AnyCloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError &operator =(const AnyCloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError &operator =(AnyCloneableDataError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AnyCloneableDataError(AnyCloneableDataError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    typeNotRegistered SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmF"),
    failedInit SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO10failedInityA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_typeNotRegistered {  // impl struct for case typeNotRegistered
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::typeNotRegistered;
    }
    SWIFT_INLINE_THUNK AnyCloneableDataError operator()(const swift::String& val) const;
  } typeNotRegistered SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmF");
  SWIFT_INLINE_THUNK bool isTypeNotRegistered() const;
  SWIFT_INLINE_THUNK swift::String getTypeNotRegistered() const;

  inline const static struct _impl_failedInit {  // impl struct for case failedInit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::failedInit;
    }
    SWIFT_INLINE_THUNK AnyCloneableDataError operator()() const;
  } failedInit SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO10failedInityA2CmF");
  SWIFT_INLINE_THUNK bool isFailedInit() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmFWC) return cases::typeNotRegistered;
    if (tag == _impl::$s13CloneableCore03AnyA9DataErrorO10failedInityA2CmFWC) return cases::failedInit;
    return cases::unknownDefault;
  }

private:
  SWIFT_INLINE_THUNK AnyCloneableDataError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AnyCloneableDataError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AnyCloneableDataError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AnyCloneableDataError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore03AnyA9DataErrorOD;
  static inline constexpr $s13CloneableCore03AnyA9DataErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AnyCloneableDataError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AnyCloneableDataError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AnyCloneableDataError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AnyCloneableDataError returnNewValue(T callable) {
    auto result = AnyCloneableDataError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::AnyCloneableDataError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore03AnyA9DataErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::AnyCloneableDataError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::AnyCloneableDataError> = true;
template<>
struct implClassFor<CloneableCore::AnyCloneableDataError> { using type = CloneableCore::_impl::_impl_AnyCloneableDataError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO") AuthenticationError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::AuthenticationError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_AuthenticationError;

// Type metadata accessor for AuthenticationError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore19AuthenticationErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AuthenticationError
extern "C" {
extern unsigned $s13CloneableCore19AuthenticationErrorO05loginD0yA2CmFWC;
extern unsigned $s13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmFWC;
extern unsigned $s13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO") AuthenticationError final {
public:
  SWIFT_INLINE_THUNK ~AuthenticationError() noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AuthenticationError(const AuthenticationError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AuthenticationError &operator =(const AuthenticationError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AuthenticationError &operator =(AuthenticationError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AuthenticationError(AuthenticationError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    loginError SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO05loginD0yA2CmF"),
    notLoggedIn SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmF"),
    cannotRefreshUserData SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_loginError {  // impl struct for case loginError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::loginError;
    }
    SWIFT_INLINE_THUNK AuthenticationError operator()() const;
  } loginError SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO05loginD0yA2CmF");
  SWIFT_INLINE_THUNK bool isLoginError() const;

  inline const static struct _impl_notLoggedIn {  // impl struct for case notLoggedIn
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notLoggedIn;
    }
    SWIFT_INLINE_THUNK AuthenticationError operator()() const;
  } notLoggedIn SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmF");
  SWIFT_INLINE_THUNK bool isNotLoggedIn() const;

  inline const static struct _impl_cannotRefreshUserData {  // impl struct for case cannotRefreshUserData
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cannotRefreshUserData;
    }
    SWIFT_INLINE_THUNK AuthenticationError operator()() const;
  } cannotRefreshUserData SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmF");
  SWIFT_INLINE_THUNK bool isCannotRefreshUserData() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore19AuthenticationErrorO05loginD0yA2CmFWC) return cases::loginError;
    if (tag == _impl::$s13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmFWC) return cases::notLoggedIn;
    if (tag == _impl::$s13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmFWC) return cases::cannotRefreshUserData;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK AuthenticationError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AuthenticationError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AuthenticationError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AuthenticationError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore19AuthenticationErrorOD;
  static inline constexpr $s13CloneableCore19AuthenticationErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AuthenticationError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AuthenticationError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AuthenticationError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AuthenticationError returnNewValue(T callable) {
    auto result = AuthenticationError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::AuthenticationError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore19AuthenticationErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::AuthenticationError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::AuthenticationError> = true;
template<>
struct implClassFor<CloneableCore::AuthenticationError> { using type = CloneableCore::_impl::_impl_AuthenticationError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV") CloneableArray;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableArray> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableArray;

// Type metadata accessor for CloneableArray
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A5ArrayVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV") CloneableArray final {
public:
  SWIFT_INLINE_THUNK ~CloneableArray() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableArray(const CloneableArray &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableArray &operator =(const CloneableArray &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableArray &operator =(CloneableArray &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableArray(CloneableArray &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV12getJSONValueSSyF");
  static SWIFT_INLINE_THUNK CloneableArray init(const swift::Array<AnyCloneableData>& data) SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV4dataACSayAA03AnyA4DataVG_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableArray(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableArray _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableArray(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableArray;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A5ArrayVD;
  static inline constexpr $s13CloneableCore0A5ArrayVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableArray {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableArray &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableArray &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableArray returnNewValue(T callable) {
    auto result = CloneableArray::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableArray> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A5ArrayVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableArray> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableArray> = true;
template<>
struct implClassFor<CloneableCore::CloneableArray> { using type = CloneableCore::_impl::_impl_CloneableArray; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO") CloneableAuthStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableAuthStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableAuthStatus;

// Type metadata accessor for CloneableAuthStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A10AuthStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableAuthStatus
extern "C" {
extern unsigned $s13CloneableCore0A10AuthStatusO7offlineyA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO10auth_erroryA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO14authenticatingyA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO13authenticatedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO") CloneableAuthStatus final {
public:
  SWIFT_INLINE_THUNK ~CloneableAuthStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus(const CloneableAuthStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus &operator =(const CloneableAuthStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus &operator =(CloneableAuthStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableAuthStatus(CloneableAuthStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    offline SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO7offlineyA2CmF"),
    not_authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmF"),
    auth_error SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO10auth_erroryA2CmF"),
    authenticating SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO14authenticatingyA2CmF"),
    authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO13authenticatedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_offline {  // impl struct for case offline
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::offline;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } offline SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO7offlineyA2CmF");
  SWIFT_INLINE_THUNK bool isOffline() const;

  inline const static struct _impl_not_authenticated {  // impl struct for case not_authenticated
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::not_authenticated;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } not_authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmF");
  SWIFT_INLINE_THUNK bool isNot_authenticated() const;

  inline const static struct _impl_auth_error {  // impl struct for case auth_error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::auth_error;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } auth_error SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO10auth_erroryA2CmF");
  SWIFT_INLINE_THUNK bool isAuth_error() const;

  inline const static struct _impl_authenticating {  // impl struct for case authenticating
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::authenticating;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } authenticating SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO14authenticatingyA2CmF");
  SWIFT_INLINE_THUNK bool isAuthenticating() const;

  inline const static struct _impl_authenticated {  // impl struct for case authenticated
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::authenticated;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO13authenticatedyA2CmF");
  SWIFT_INLINE_THUNK bool isAuthenticated() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO7offlineyA2CmFWC) return cases::offline;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmFWC) return cases::not_authenticated;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO10auth_erroryA2CmFWC) return cases::auth_error;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO14authenticatingyA2CmFWC) return cases::authenticating;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO13authenticatedyA2CmFWC) return cases::authenticated;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableAuthStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableAuthStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableAuthStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableAuthStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A10AuthStatusOD;
  static inline constexpr $s13CloneableCore0A10AuthStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableAuthStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableAuthStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableAuthStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableAuthStatus returnNewValue(T callable) {
    auto result = CloneableAuthStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableAuthStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A10AuthStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableAuthStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableAuthStatus> = true;
template<>
struct implClassFor<CloneableCore::CloneableAuthStatus> { using type = CloneableCore::_impl::_impl_CloneableAuthStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV") CloneableBoolean;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableBoolean> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableBoolean;

// Type metadata accessor for CloneableBoolean
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A7BooleanVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV") CloneableBoolean final {
public:
  SWIFT_INLINE_THUNK ~CloneableBoolean() noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableBoolean(const CloneableBoolean &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableBoolean &operator =(const CloneableBoolean &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableBoolean &operator =(CloneableBoolean &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableBoolean(CloneableBoolean &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableBoolean init(bool value) SWIFT_SYMBOL("s:13CloneableCore0A7BooleanVyACSbcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV20getStringDescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableBoolean(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableBoolean _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableBoolean(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableBoolean;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A7BooleanVD;
  static inline constexpr $s13CloneableCore0A7BooleanVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableBoolean {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableBoolean &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableBoolean &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableBoolean returnNewValue(T callable) {
    auto result = CloneableBoolean::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableBoolean> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A7BooleanVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableBoolean> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableBoolean> = true;
template<>
struct implClassFor<CloneableCore::CloneableBoolean> { using type = CloneableCore::_impl::_impl_CloneableBoolean; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore0A5ColorV") CloneableColor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableColor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableColor;

// Type metadata accessor for CloneableColor
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A5ColorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A5ColorV") CloneableColor final {
public:
  SWIFT_INLINE_THUNK ~CloneableColor() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableColor(const CloneableColor &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableColor &operator =(const CloneableColor &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableColor &operator =(CloneableColor &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableColor(CloneableColor &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK float getR() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1rSfvp");
  SWIFT_INLINE_THUNK void setR(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1rSfvp");
  SWIFT_INLINE_THUNK float getG() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1gSfvp");
  SWIFT_INLINE_THUNK void setG(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1gSfvp");
  SWIFT_INLINE_THUNK float getB() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1bSfvp");
  SWIFT_INLINE_THUNK void setB(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1bSfvp");
  SWIFT_INLINE_THUNK float getA() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1aSfvp");
  SWIFT_INLINE_THUNK void setA(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1aSfvp");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableColor(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableColor _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableColor(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableColor;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A5ColorVD;
  static inline constexpr $s13CloneableCore0A5ColorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableColor {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableColor &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableColor &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableColor returnNewValue(T callable) {
    auto result = CloneableColor::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableColor> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A5ColorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableColor> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableColor> = true;
template<>
struct implClassFor<CloneableCore::CloneableColor> { using type = CloneableCore::_impl::_impl_CloneableColor; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO") CloneableConnectionState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableConnectionState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableConnectionState;

// Type metadata accessor for CloneableConnectionState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A15ConnectionStateOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableConnectionState
extern "C" {
extern unsigned $s13CloneableCore0A15ConnectionStateO10connectingyA2CmFWC;
extern unsigned $s13CloneableCore0A15ConnectionStateO9connectedyA2CmFWC;
extern unsigned $s13CloneableCore0A15ConnectionStateO12disconnectedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO") CloneableConnectionState final {
public:
  SWIFT_INLINE_THUNK ~CloneableConnectionState() noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableConnectionState(const CloneableConnectionState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableConnectionState &operator =(const CloneableConnectionState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableConnectionState &operator =(CloneableConnectionState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableConnectionState(CloneableConnectionState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    connecting SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO10connectingyA2CmF"),
    connected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO9connectedyA2CmF"),
    disconnected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO12disconnectedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_connecting {  // impl struct for case connecting
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::connecting;
    }
    SWIFT_INLINE_THUNK CloneableConnectionState operator()() const;
  } connecting SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO10connectingyA2CmF");
  SWIFT_INLINE_THUNK bool isConnecting() const;

  inline const static struct _impl_connected {  // impl struct for case connected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::connected;
    }
    SWIFT_INLINE_THUNK CloneableConnectionState operator()() const;
  } connected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO9connectedyA2CmF");
  SWIFT_INLINE_THUNK bool isConnected() const;

  inline const static struct _impl_disconnected {  // impl struct for case disconnected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::disconnected;
    }
    SWIFT_INLINE_THUNK CloneableConnectionState operator()() const;
  } disconnected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO12disconnectedyA2CmF");
  SWIFT_INLINE_THUNK bool isDisconnected() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A15ConnectionStateO10connectingyA2CmFWC) return cases::connecting;
    if (tag == _impl::$s13CloneableCore0A15ConnectionStateO9connectedyA2CmFWC) return cases::connected;
    if (tag == _impl::$s13CloneableCore0A15ConnectionStateO12disconnectedyA2CmFWC) return cases::disconnected;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableConnectionState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableConnectionState _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableConnectionState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableConnectionState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A15ConnectionStateOD;
  static inline constexpr $s13CloneableCore0A15ConnectionStateOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableConnectionState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableConnectionState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableConnectionState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableConnectionState returnNewValue(T callable) {
    auto result = CloneableConnectionState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableConnectionState> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A15ConnectionStateOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableConnectionState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableConnectionState> = true;
template<>
struct implClassFor<CloneableCore::CloneableConnectionState> { using type = CloneableCore::_impl::_impl_CloneableConnectionState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO") CloneableSyncStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableSyncStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore37SyncManagerDeployedWorkflowChangeTypeO") SyncManagerDeployedWorkflowChangeType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncManagerDeployedWorkflowChangeType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO") RUNTIME_ENVIRONMENT;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::RUNTIME_ENVIRONMENT> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// CloneableCore is a class that provides core functionality for the Cloneable platform.
class SWIFT_SYMBOL("s:13CloneableCoreAAC") CloneableCore;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableCore> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableCore;
// Type metadata accessor for CloneableCore
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCoreAACMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCoreAAC") CloneableCore : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::String getAppID() SWIFT_SYMBOL("s:13CloneableCoreAAC5appIDSSvp");
  SWIFT_INLINE_THUNK void setAppID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCoreAAC5appIDSSvp");
  SWIFT_INLINE_THUNK CloneableConnectionState getConnection_state() SWIFT_SYMBOL("s:13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvp");
  SWIFT_INLINE_THUNK void setConnection_state(const CloneableConnectionState& value) SWIFT_SYMBOL("s:13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvp");
  SWIFT_INLINE_THUNK CloneableAuthStatus getAuth_status() SWIFT_SYMBOL("s:13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvp");
  SWIFT_INLINE_THUNK void setAuth_status(const CloneableAuthStatus& value) SWIFT_SYMBOL("s:13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvp");
  SWIFT_INLINE_THUNK CloneableSyncStatus getSync_status() SWIFT_SYMBOL("s:13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvp");
  SWIFT_INLINE_THUNK void setSync_status(const CloneableSyncStatus& value) SWIFT_SYMBOL("s:13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvp");
  SWIFT_INLINE_THUNK void signOut() SWIFT_SYMBOL("s:13CloneableCoreAAC7signOutyyF");
  SWIFT_INLINE_THUNK DataManager getDataCache() SWIFT_SYMBOL("s:13CloneableCoreAAC12getDataCacheAA0D7ManagerCyF");
  SWIFT_INLINE_THUNK CloneableConnectionState getConnectionStatus() SWIFT_SYMBOL("s:13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyF");
  SWIFT_INLINE_THUNK LocalCacheManager cache() SWIFT_SYMBOL("s:13CloneableCoreAAC5cacheAA17LocalCacheManagerCyF");
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT getRuntimeEnvironment() SWIFT_SYMBOL("s:13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyF");
  SWIFT_INLINE_THUNK void startWorkflow(const swift::String& workflowId) SWIFT_SYMBOL("s:13CloneableCoreAAC13startWorkflow10workflowIdySS_tF");
protected:
  SWIFT_INLINE_THUNK CloneableCore(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_CloneableCore;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCoreAACD;
  static inline constexpr $s13CloneableCoreAACD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableCore {
public:
static SWIFT_INLINE_THUNK CloneableCore makeRetained(void * _Nonnull ptr) noexcept { return CloneableCore(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableCore> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCoreAACMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::CloneableCore> { using type = CloneableCore::_impl::_impl_CloneableCore; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO") CloneableCredentials;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableCredentials> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableCredentials;

// Type metadata accessor for CloneableCredentials
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A11CredentialsOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableCredentials
extern "C" {
extern unsigned $s13CloneableCore0A11CredentialsO5auth0yACSS_tcACmFWC;
extern unsigned $s13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO") CloneableCredentials final {
public:
  SWIFT_INLINE_THUNK ~CloneableCredentials() noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableCredentials(const CloneableCredentials &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableCredentials &operator =(const CloneableCredentials &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableCredentials &operator =(CloneableCredentials &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableCredentials(CloneableCredentials &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    auth0 SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO5auth0yACSS_tcACmF"),
    apiKey SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_auth0 {  // impl struct for case auth0
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::auth0;
    }
    SWIFT_INLINE_THUNK CloneableCredentials operator()(const swift::String& val) const;
  } auth0 SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO5auth0yACSS_tcACmF");
  SWIFT_INLINE_THUNK bool isAuth0() const;
  SWIFT_INLINE_THUNK swift::String getAuth0() const;

  inline const static struct _impl_apiKey {  // impl struct for case apiKey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::apiKey;
    }
    SWIFT_INLINE_THUNK CloneableCredentials operator()(const swift::String& val) const;
  } apiKey SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmF");
  SWIFT_INLINE_THUNK bool isApiKey() const;
  SWIFT_INLINE_THUNK swift::String getApiKey() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A11CredentialsO5auth0yACSS_tcACmFWC) return cases::auth0;
    if (tag == _impl::$s13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmFWC) return cases::apiKey;
    return cases::unknownDefault;
  }

private:
  SWIFT_INLINE_THUNK CloneableCredentials(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableCredentials _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableCredentials(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableCredentials;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A11CredentialsOD;
  static inline constexpr $s13CloneableCore0A11CredentialsOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableCredentials {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableCredentials &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableCredentials &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableCredentials returnNewValue(T callable) {
    auto result = CloneableCredentials::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableCredentials> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A11CredentialsOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableCredentials> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableCredentials> = true;
template<>
struct implClassFor<CloneableCore::CloneableCredentials> { using type = CloneableCore::_impl::_impl_CloneableCredentials; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO") CloneableDataError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDataError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableDataError;

// Type metadata accessor for CloneableDataError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A9DataErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableDataError
extern "C" {
extern unsigned $s13CloneableCore0A9DataErrorO12invalidValueyA2CmFWC;
extern unsigned $s13CloneableCore0A9DataErrorO21implementationMissingyA2CmFWC;
extern unsigned $s13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmFWC;
extern unsigned $s13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO") CloneableDataError final {
public:
  SWIFT_INLINE_THUNK ~CloneableDataError() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataError(const CloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataError &operator =(const CloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDataError &operator =(CloneableDataError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDataError(CloneableDataError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    invalidValue SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO12invalidValueyA2CmF"),
    implementationMissing SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO21implementationMissingyA2CmF"),
    errorLoadingFromFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmF"),
    errorSavingToFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_invalidValue {  // impl struct for case invalidValue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidValue;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } invalidValue SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO12invalidValueyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidValue() const;

  inline const static struct _impl_implementationMissing {  // impl struct for case implementationMissing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::implementationMissing;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } implementationMissing SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO21implementationMissingyA2CmF");
  SWIFT_INLINE_THUNK bool isImplementationMissing() const;

  inline const static struct _impl_errorLoadingFromFile {  // impl struct for case errorLoadingFromFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::errorLoadingFromFile;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } errorLoadingFromFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmF");
  SWIFT_INLINE_THUNK bool isErrorLoadingFromFile() const;

  inline const static struct _impl_errorSavingToFile {  // impl struct for case errorSavingToFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::errorSavingToFile;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } errorSavingToFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmF");
  SWIFT_INLINE_THUNK bool isErrorSavingToFile() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A9DataErrorO12invalidValueyA2CmFWC) return cases::invalidValue;
    if (tag == _impl::$s13CloneableCore0A9DataErrorO21implementationMissingyA2CmFWC) return cases::implementationMissing;
    if (tag == _impl::$s13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmFWC) return cases::errorLoadingFromFile;
    if (tag == _impl::$s13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmFWC) return cases::errorSavingToFile;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableDataError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDataError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDataError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDataError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A9DataErrorOD;
  static inline constexpr $s13CloneableCore0A9DataErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDataError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDataError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDataError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDataError returnNewValue(T callable) {
    auto result = CloneableDataError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDataError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A9DataErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDataError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDataError> = true;
template<>
struct implClassFor<CloneableCore::CloneableDataError> { using type = CloneableCore::_impl::_impl_CloneableDataError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV") CloneableDataObject;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDataObject> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableDataObject;

// Type metadata accessor for CloneableDataObject
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A10DataObjectVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV") CloneableDataObject final {
public:
  SWIFT_INLINE_THUNK ~CloneableDataObject() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataObject(const CloneableDataObject &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataObject &operator =(const CloneableDataObject &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDataObject &operator =(CloneableDataObject &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDataObject(CloneableDataObject &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV12getJSONValueSSyF");
  static SWIFT_INLINE_THUNK CloneableDataObject init(const swift::String& data) SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV4dataACSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableDataObject(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDataObject _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDataObject(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDataObject;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A10DataObjectVD;
  static inline constexpr $s13CloneableCore0A10DataObjectVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDataObject {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDataObject &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDataObject &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDataObject returnNewValue(T callable) {
    auto result = CloneableDataObject::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDataObject> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A10DataObjectVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDataObject> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDataObject> = true;
template<>
struct implClassFor<CloneableCore::CloneableDataObject> { using type = CloneableCore::_impl::_impl_CloneableDataObject; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore0A4DateV") CloneableDate;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDate> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableDate;

// Type metadata accessor for CloneableDate
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A4DateVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A4DateV") CloneableDate final {
public:
  SWIFT_INLINE_THUNK ~CloneableDate() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDate(const CloneableDate &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDate &operator =(const CloneableDate &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDate &operator =(CloneableDate &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDate(CloneableDate &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A4DateV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A4DateV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A4DateV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A4DateV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableDate(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDate _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDate(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDate;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A4DateVD;
  static inline constexpr $s13CloneableCore0A4DateVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDate {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDate &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDate &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDate returnNewValue(T callable) {
    auto result = CloneableDate::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDate> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A4DateVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDate> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDate> = true;
template<>
struct implClassFor<CloneableCore::CloneableDate> { using type = CloneableCore::_impl::_impl_CloneableDate; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_CloneableDepthMap;

// Type metadata accessor for CloneableDepthMap
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A8DepthMapVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV") CloneableDepthMap final {
public:
  SWIFT_INLINE_THUNK ~CloneableDepthMap() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDepthMap(const CloneableDepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDepthMap &operator =(const CloneableDepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDepthMap &operator =(CloneableDepthMap &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDepthMap(CloneableDepthMap &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK bool getComplexType() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV11complexTypeSbvp");
  SWIFT_INLINE_THUNK void setComplexType(bool value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV11complexTypeSbvp");
  SWIFT_INLINE_THUNK swift::Array<swift::Array<float>> getDepthMap() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvp");
  SWIFT_INLINE_THUNK void setDepthMap(const swift::Array<swift::Array<float>>& value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvp");
  SWIFT_INLINE_THUNK swift::Array<swift::Array<swift::Array<float>>> getUnprojectedDepth() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvp");
  SWIFT_INLINE_THUNK void setUnprojectedDepth(const swift::Array<swift::Array<swift::Array<float>>>& value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::Array<swift::Int>>> getConfidenceMap() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvp");
  SWIFT_INLINE_THUNK void setConfidenceMap(const swift::Optional<swift::Array<swift::Array<swift::Int>>>& value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvp");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableDepthMap(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDepthMap _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDepthMap(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDepthMap;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A8DepthMapVD;
  static inline constexpr $s13CloneableCore0A8DepthMapVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDepthMap {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDepthMap &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDepthMap &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDepthMap returnNewValue(T callable) {
    auto result = CloneableDepthMap::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDepthMap> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A8DepthMapVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDepthMap> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDepthMap> = true;
template<>
struct implClassFor<CloneableCore::CloneableDepthMap> { using type = CloneableCore::_impl::_impl_CloneableDepthMap; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V") SyncedFileInformationV2;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncedFileInformationV2> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC") CloneableFileSyncEngine;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableFileSyncEngine> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableFileSyncEngine;
// Type metadata accessor for CloneableFileSyncEngine
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A14FileSyncEngineCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC") CloneableFileSyncEngine : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK OS_dispatch_queue *_Nonnull getSyncedFileQueue() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvp");
  SWIFT_INLINE_THUNK void setSyncedFileQueue(OS_dispatch_queue *_Nonnull value) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvp");
  SWIFT_INLINE_THUNK swift::Int getTotalFiles() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC10totalFilesSivp");
  SWIFT_INLINE_THUNK void setTotalFiles(swift::Int value) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC10totalFilesSivp");
  SWIFT_INLINE_THUNK swift::Int getFilesSynced() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC11filesSyncedSivp");
  SWIFT_INLINE_THUNK void setFilesSynced(swift::Int value) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC11filesSyncedSivp");
  SWIFT_INLINE_THUNK void processAndSyncObjectsNonCompleteRequests() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyF");
/// Get the file from the AnyCloneableData file options
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> getCloneableDataFromFile(const swift::String& fileName, const swift::String& fileType, const swift::String& displayName) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StF");
/// Function to see if a file already exists
  SWIFT_INLINE_THUNK bool fileExistsLocally(const swift::String& fileName) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tF");
  SWIFT_INLINE_THUNK swift::Int getNumberOfDownloadedFiles() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyF");
protected:
  SWIFT_INLINE_THUNK CloneableFileSyncEngine(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_CloneableFileSyncEngine;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A14FileSyncEngineCD;
  static inline constexpr $s13CloneableCore0A14FileSyncEngineCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableFileSyncEngine {
public:
static SWIFT_INLINE_THUNK CloneableFileSyncEngine makeRetained(void * _Nonnull ptr) noexcept { return CloneableFileSyncEngine(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableFileSyncEngine> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A14FileSyncEngineCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::CloneableFileSyncEngine> { using type = CloneableCore::_impl::_impl_CloneableFileSyncEngine; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




class SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO") CloneableFileType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableFileType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableFileType;

// Type metadata accessor for CloneableFileType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A8FileTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableFileType
extern "C" {
extern unsigned $s13CloneableCore0A8FileTypeO3allyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO5imageyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO3pdfyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO10iosAIModelyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO9shapefileyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO3kmlyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO3kmzyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO7geotiffyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO6rasteryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO") CloneableFileType final {
public:
  SWIFT_INLINE_THUNK ~CloneableFileType() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableFileType(const CloneableFileType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableFileType &operator =(const CloneableFileType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableFileType &operator =(CloneableFileType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableFileType(CloneableFileType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    all SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3allyA2CmF"),
    image SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO5imageyA2CmF"),
    pdf SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3pdfyA2CmF"),
    iosAIModel SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO10iosAIModelyA2CmF"),
    shapefile SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO9shapefileyA2CmF"),
    kml SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmlyA2CmF"),
    kmz SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmzyA2CmF"),
    geotiff SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO7geotiffyA2CmF"),
    raster SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO6rasteryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_all {  // impl struct for case all
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::all;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } all SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3allyA2CmF");
  SWIFT_INLINE_THUNK bool isAll() const;

  inline const static struct _impl_image {  // impl struct for case image
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::image;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } image SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO5imageyA2CmF");
  SWIFT_INLINE_THUNK bool isImage() const;

  inline const static struct _impl_pdf {  // impl struct for case pdf
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pdf;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } pdf SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3pdfyA2CmF");
  SWIFT_INLINE_THUNK bool isPdf() const;

  inline const static struct _impl_iosAIModel {  // impl struct for case iosAIModel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iosAIModel;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } iosAIModel SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO10iosAIModelyA2CmF");
  SWIFT_INLINE_THUNK bool isIosAIModel() const;

  inline const static struct _impl_shapefile {  // impl struct for case shapefile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::shapefile;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } shapefile SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO9shapefileyA2CmF");
  SWIFT_INLINE_THUNK bool isShapefile() const;

  inline const static struct _impl_kml {  // impl struct for case kml
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kml;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } kml SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmlyA2CmF");
  SWIFT_INLINE_THUNK bool isKml() const;

  inline const static struct _impl_kmz {  // impl struct for case kmz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kmz;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } kmz SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmzyA2CmF");
  SWIFT_INLINE_THUNK bool isKmz() const;

  inline const static struct _impl_geotiff {  // impl struct for case geotiff
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::geotiff;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } geotiff SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO7geotiffyA2CmF");
  SWIFT_INLINE_THUNK bool isGeotiff() const;

  inline const static struct _impl_raster {  // impl struct for case raster
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::raster;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } raster SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO6rasteryA2CmF");
  SWIFT_INLINE_THUNK bool isRaster() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3allyA2CmFWC) return cases::all;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO5imageyA2CmFWC) return cases::image;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3pdfyA2CmFWC) return cases::pdf;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO10iosAIModelyA2CmFWC) return cases::iosAIModel;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO9shapefileyA2CmFWC) return cases::shapefile;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3kmlyA2CmFWC) return cases::kml;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3kmzyA2CmFWC) return cases::kmz;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO7geotiffyA2CmFWC) return cases::geotiff;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO6rasteryA2CmFWC) return cases::raster;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getContentType(const swift::Optional<swift::String>& fileExtension) const SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO010getContentD013fileExtensionS2SSg_tF");
  SWIFT_INLINE_THUNK swift::String getFileExtension(const swift::Optional<swift::String>& contentType) const SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO03getC9Extension07contentD0S2SSg_tF");
  static SWIFT_INLINE_THUNK swift::Optional<CloneableFileType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK CloneableFileType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableFileType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableFileType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableFileType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A8FileTypeOD;
  static inline constexpr $s13CloneableCore0A8FileTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableFileType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableFileType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableFileType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableFileType returnNewValue(T callable) {
    auto result = CloneableFileType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableFileType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A8FileTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableFileType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableFileType> = true;
template<>
struct implClassFor<CloneableCore::CloneableFileType> { using type = CloneableCore::_impl::_impl_CloneableFileType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A3KMLV") CloneableKML;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableKML> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableKML;

// Type metadata accessor for CloneableKML
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A3KMLVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A3KMLV") CloneableKML final {
public:
  SWIFT_INLINE_THUNK ~CloneableKML() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableKML(const CloneableKML &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableKML &operator =(const CloneableKML &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableKML &operator =(CloneableKML &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableKML(CloneableKML &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::String convertKMLToString() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV18convertKMLToStringSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableKML(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableKML _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableKML(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableKML;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A3KMLVD;
  static inline constexpr $s13CloneableCore0A3KMLVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableKML {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableKML &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableKML &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableKML returnNewValue(T callable) {
    auto result = CloneableKML::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableKML> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A3KMLVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableKML> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableKML> = true;
template<>
struct implClassFor<CloneableCore::CloneableKML> { using type = CloneableCore::_impl::_impl_CloneableKML; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A6StringV") CloneableString;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableString> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore0A8LocationV") CloneableLocation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableLocation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableLocation;

// Type metadata accessor for CloneableLocation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A8LocationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A8LocationV") CloneableLocation final {
public:
  SWIFT_INLINE_THUNK ~CloneableLocation() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLocation(const CloneableLocation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLocation &operator =(const CloneableLocation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableLocation &operator =(CloneableLocation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableLocation(CloneableLocation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV2idSSvp");
  SWIFT_INLINE_THUNK void setId(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV2idSSvp");
  SWIFT_INLINE_THUNK double getLatitude() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8latitudeSdvp");
  SWIFT_INLINE_THUNK void setLatitude(double value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8latitudeSdvp");
  SWIFT_INLINE_THUNK double getLongitude() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV9longitudeSdvp");
  SWIFT_INLINE_THUNK void setLongitude(double value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV9longitudeSdvp");
  SWIFT_INLINE_THUNK swift::Optional<double> getAltitude() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8altitudeSdSgvp");
  SWIFT_INLINE_THUNK void setAltitude(const swift::Optional<double>& value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8altitudeSdSgvp");
  SWIFT_INLINE_THUNK bool getComplexType() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV11complexTypeSbvp");
  SWIFT_INLINE_THUNK void setComplexType(bool value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV11complexTypeSbvp");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::String simpleDescription() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV17simpleDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableLocation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableLocation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableLocation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableLocation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A8LocationVD;
  static inline constexpr $s13CloneableCore0A8LocationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableLocation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableLocation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableLocation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableLocation returnNewValue(T callable) {
    auto result = CloneableLocation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableLocation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A8LocationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableLocation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableLocation> = true;
template<>
struct implClassFor<CloneableCore::CloneableLocation> { using type = CloneableCore::_impl::_impl_CloneableLocation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore8LogLevelO") LogLevel;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LogLevel> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore25LoggerWorkflowInformationV") LoggerWorkflowInformation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LoggerWorkflowInformation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore26LoggerComponentInformationV") LoggerComponentInformation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LoggerComponentInformation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO") DisplayMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DisplayMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore0A3LogV") CloneableLog;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableLog> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableLog;

// Type metadata accessor for CloneableLog
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A3LogVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A3LogV") CloneableLog final {
public:
  SWIFT_INLINE_THUNK ~CloneableLog() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLog(const CloneableLog &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLog &operator =(const CloneableLog &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableLog &operator =(CloneableLog &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableLog(CloneableLog &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV2idSSvp");
  SWIFT_INLINE_THUNK void setId(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV2idSSvp");
  SWIFT_INLINE_THUNK LogLevel getLogLevel() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV8logLevelAA0cE0Ovp");
  SWIFT_INLINE_THUNK void setLogLevel(const LogLevel& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV8logLevelAA0cE0Ovp");
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV7messageSSvp");
  SWIFT_INLINE_THUNK void setMessage(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV7messageSSvp");
  SWIFT_INLINE_THUNK swift::Optional<LoggerWorkflowInformation> getWorkflow() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvp");
  SWIFT_INLINE_THUNK void setWorkflow(const swift::Optional<LoggerWorkflowInformation>& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<LoggerComponentInformation> getComponent() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvp");
  SWIFT_INLINE_THUNK void setComponent(const swift::Optional<LoggerComponentInformation>& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DisplayMode> getDisplayMode() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvp");
  SWIFT_INLINE_THUNK void setDisplayMode(const swift::Optional<DisplayMode>& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvp");
private:
  SWIFT_INLINE_THUNK CloneableLog(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableLog _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableLog(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableLog;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A3LogVD;
  static inline constexpr $s13CloneableCore0A3LogVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableLog {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableLog &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableLog &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableLog returnNewValue(T callable) {
    auto result = CloneableLog::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableLog> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A3LogVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableLog> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableLog> = true;
template<>
struct implClassFor<CloneableCore::CloneableLog> { using type = CloneableCore::_impl::_impl_CloneableLog; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC") CloneableLogger;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableLogger> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableLogger;
// Type metadata accessor for CloneableLogger
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6LoggerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC") CloneableLogger : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  static SWIFT_INLINE_THUNK swift::Array<CloneableLog> getLogs() SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC7getLogsSayAA0A3LogVGyFZ");
  static SWIFT_INLINE_THUNK void clearLogs() SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC9clearLogsyyFZ");
  static SWIFT_INLINE_THUNK void notifyObservers(const CloneableLog& log) SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC15notifyObservers3logyAA0A3LogV_tFZ");
protected:
  SWIFT_INLINE_THUNK CloneableLogger(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_CloneableLogger;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6LoggerCD;
  static inline constexpr $s13CloneableCore0A6LoggerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableLogger {
public:
static SWIFT_INLINE_THUNK CloneableLogger makeRetained(void * _Nonnull ptr) noexcept { return CloneableLogger(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableLogger> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6LoggerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::CloneableLogger> { using type = CloneableCore::_impl::_impl_CloneableLogger; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A6NumberV") CloneableNumber;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableNumber> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableNumber;

// Type metadata accessor for CloneableNumber
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6NumberVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6NumberV") CloneableNumber final {
public:
  SWIFT_INLINE_THUNK ~CloneableNumber() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableNumber(const CloneableNumber &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableNumber &operator =(const CloneableNumber &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableNumber &operator =(CloneableNumber &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableNumber(CloneableNumber &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableNumber init(double value) SWIFT_SYMBOL("s:13CloneableCore0A6NumberVyACSdcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV20getStringDescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableNumber(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableNumber _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableNumber(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableNumber;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6NumberVD;
  static inline constexpr $s13CloneableCore0A6NumberVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableNumber {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableNumber &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableNumber &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableNumber returnNewValue(T callable) {
    auto result = CloneableNumber::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableNumber> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6NumberVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableNumber> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableNumber> = true;
template<>
struct implClassFor<CloneableCore::CloneableNumber> { using type = CloneableCore::_impl::_impl_CloneableNumber; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore0A6StatusV") CloneableStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableStatus;

// Type metadata accessor for CloneableStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6StatusVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6StatusV") CloneableStatus final {
public:
  SWIFT_INLINE_THUNK ~CloneableStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableStatus(const CloneableStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableStatus &operator =(const CloneableStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableStatus &operator =(CloneableStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableStatus(CloneableStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableStatus init(const swift::String& json) SWIFT_SYMBOL("s:13CloneableCore0A6StatusV4jsonACSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV20getStringDescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6StatusVD;
  static inline constexpr $s13CloneableCore0A6StatusVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableStatus returnNewValue(T callable) {
    auto result = CloneableStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6StatusVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableStatus> = true;
template<>
struct implClassFor<CloneableCore::CloneableStatus> { using type = CloneableCore::_impl::_impl_CloneableStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_CloneableString;

// Type metadata accessor for CloneableString
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6StringVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6StringV") CloneableString final {
public:
  SWIFT_INLINE_THUNK ~CloneableString() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableString(const CloneableString &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableString &operator =(const CloneableString &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableString &operator =(CloneableString &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableString(CloneableString &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A6StringV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A6StringV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableString init(const swift::String& json) SWIFT_SYMBOL("s:13CloneableCore0A6StringV4jsonACSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A6StringV09getTypeAsC0SSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A6StringV03getC11DescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableString(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableString _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableString(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableString;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6StringVD;
  static inline constexpr $s13CloneableCore0A6StringVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableString {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableString &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableString &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableString returnNewValue(T callable) {
    auto result = CloneableString::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableString> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6StringVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableString> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableString> = true;
template<>
struct implClassFor<CloneableCore::CloneableString> { using type = CloneableCore::_impl::_impl_CloneableString; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO") CloneableSyncError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableSyncError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableSyncError;

// Type metadata accessor for CloneableSyncError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A9SyncErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableSyncError
extern "C" {
extern unsigned $s13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO04filecD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO06objectcD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO08workflowcD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO") CloneableSyncError final {
public:
  SWIFT_INLINE_THUNK ~CloneableSyncError() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncError(const CloneableSyncError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncError &operator =(const CloneableSyncError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableSyncError &operator =(CloneableSyncError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableSyncError(CloneableSyncError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAuthenticated SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmF"),
    fileSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO04filecD0yA2CmF"),
    objectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO06objectcD0yA2CmF"),
    workflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO08workflowcD0yA2CmF"),
    completedWorkflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmF"),
    notificationSyncSerror SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmF"),
    dataObjectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAuthenticated {  // impl struct for case notAuthenticated
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAuthenticated;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } notAuthenticated SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAuthenticated() const;

  inline const static struct _impl_fileSyncError {  // impl struct for case fileSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fileSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } fileSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO04filecD0yA2CmF");
  SWIFT_INLINE_THUNK bool isFileSyncError() const;

  inline const static struct _impl_objectSyncError {  // impl struct for case objectSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::objectSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } objectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO06objectcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isObjectSyncError() const;

  inline const static struct _impl_workflowSyncError {  // impl struct for case workflowSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::workflowSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } workflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO08workflowcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isWorkflowSyncError() const;

  inline const static struct _impl_completedWorkflowSyncError {  // impl struct for case completedWorkflowSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::completedWorkflowSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } completedWorkflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isCompletedWorkflowSyncError() const;

  inline const static struct _impl_notificationSyncSerror {  // impl struct for case notificationSyncSerror
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notificationSyncSerror;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } notificationSyncSerror SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmF");
  SWIFT_INLINE_THUNK bool isNotificationSyncSerror() const;

  inline const static struct _impl_dataObjectSyncError {  // impl struct for case dataObjectSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dataObjectSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } dataObjectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isDataObjectSyncError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmFWC) return cases::notAuthenticated;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO04filecD0yA2CmFWC) return cases::fileSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO06objectcD0yA2CmFWC) return cases::objectSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO08workflowcD0yA2CmFWC) return cases::workflowSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmFWC) return cases::completedWorkflowSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmFWC) return cases::notificationSyncSerror;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmFWC) return cases::dataObjectSyncError;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableSyncError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableSyncError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableSyncError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableSyncError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A9SyncErrorOD;
  static inline constexpr $s13CloneableCore0A9SyncErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableSyncError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableSyncError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableSyncError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableSyncError returnNewValue(T callable) {
    auto result = CloneableSyncError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableSyncError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A9SyncErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableSyncError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableSyncError> = true;
template<>
struct implClassFor<CloneableCore::CloneableSyncError> { using type = CloneableCore::_impl::_impl_CloneableSyncError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_CloneableSyncStatus;

// Type metadata accessor for CloneableSyncStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A10SyncStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableSyncStatus
extern "C" {
extern unsigned $s13CloneableCore0A10SyncStatusO10not_syncedyA2CmFWC;
extern unsigned $s13CloneableCore0A10SyncStatusO7syncingyA2CmFWC;
extern unsigned $s13CloneableCore0A10SyncStatusO6syncedyA2CmFWC;
extern unsigned $s13CloneableCore0A10SyncStatusO10sync_erroryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO") CloneableSyncStatus final {
public:
  SWIFT_INLINE_THUNK ~CloneableSyncStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus(const CloneableSyncStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus &operator =(const CloneableSyncStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus &operator =(CloneableSyncStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableSyncStatus(CloneableSyncStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    not_synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10not_syncedyA2CmF"),
    syncing SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO7syncingyA2CmF"),
    synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO6syncedyA2CmF"),
    sync_error SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10sync_erroryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_not_synced {  // impl struct for case not_synced
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::not_synced;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } not_synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10not_syncedyA2CmF");
  SWIFT_INLINE_THUNK bool isNot_synced() const;

  inline const static struct _impl_syncing {  // impl struct for case syncing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::syncing;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } syncing SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO7syncingyA2CmF");
  SWIFT_INLINE_THUNK bool isSyncing() const;

  inline const static struct _impl_synced {  // impl struct for case synced
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::synced;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO6syncedyA2CmF");
  SWIFT_INLINE_THUNK bool isSynced() const;

  inline const static struct _impl_sync_error {  // impl struct for case sync_error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sync_error;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } sync_error SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10sync_erroryA2CmF");
  SWIFT_INLINE_THUNK bool isSync_error() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO10not_syncedyA2CmFWC) return cases::not_synced;
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO7syncingyA2CmFWC) return cases::syncing;
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO6syncedyA2CmFWC) return cases::synced;
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO10sync_erroryA2CmFWC) return cases::sync_error;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableSyncStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableSyncStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableSyncStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableSyncStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A10SyncStatusOD;
  static inline constexpr $s13CloneableCore0A10SyncStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableSyncStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableSyncStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableSyncStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableSyncStatus returnNewValue(T callable) {
    auto result = CloneableSyncStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableSyncStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A10SyncStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableSyncStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableSyncStatus> = true;
template<>
struct implClassFor<CloneableCore::CloneableSyncStatus> { using type = CloneableCore::_impl::_impl_CloneableSyncStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV") CloneableUUID;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableUUID> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableUUID;

// Type metadata accessor for CloneableUUID
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A4UUIDVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV") CloneableUUID final {
public:
  SWIFT_INLINE_THUNK ~CloneableUUID() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableUUID(const CloneableUUID &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableUUID &operator =(const CloneableUUID &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableUUID &operator =(CloneableUUID &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableUUID(CloneableUUID &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableUUID(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableUUID _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableUUID(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableUUID;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A4UUIDVD;
  static inline constexpr $s13CloneableCore0A4UUIDVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableUUID {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableUUID &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableUUID &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableUUID returnNewValue(T callable) {
    auto result = CloneableUUID::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableUUID> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A4UUIDVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableUUID> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableUUID> = true;
template<>
struct implClassFor<CloneableCore::CloneableUUID> { using type = CloneableCore::_impl::_impl_CloneableUUID; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




class SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO") CompletedWorkflowCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CompletedWorkflowCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CompletedWorkflowCallType;

// Type metadata accessor for CompletedWorkflowCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore25CompletedWorkflowCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CompletedWorkflowCallType
extern "C" {
extern unsigned $s13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmFWC;
extern unsigned $s13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO") CompletedWorkflowCallType final {
public:
  SWIFT_INLINE_THUNK ~CompletedWorkflowCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType(const CompletedWorkflowCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType &operator =(const CompletedWorkflowCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType &operator =(CompletedWorkflowCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CompletedWorkflowCallType(CompletedWorkflowCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    startWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmF"),
    updateWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_startWorkflow {  // impl struct for case startWorkflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::startWorkflow;
    }
    SWIFT_INLINE_THUNK CompletedWorkflowCallType operator()() const;
  } startWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmF");
  SWIFT_INLINE_THUNK bool isStartWorkflow() const;

  inline const static struct _impl_updateWorkflow {  // impl struct for case updateWorkflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::updateWorkflow;
    }
    SWIFT_INLINE_THUNK CompletedWorkflowCallType operator()() const;
  } updateWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmF");
  SWIFT_INLINE_THUNK bool isUpdateWorkflow() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmFWC) return cases::startWorkflow;
    if (tag == _impl::$s13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmFWC) return cases::updateWorkflow;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<CompletedWorkflowCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK CompletedWorkflowCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CompletedWorkflowCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CompletedWorkflowCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CompletedWorkflowCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore25CompletedWorkflowCallTypeOD;
  static inline constexpr $s13CloneableCore25CompletedWorkflowCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CompletedWorkflowCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CompletedWorkflowCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CompletedWorkflowCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CompletedWorkflowCallType returnNewValue(T callable) {
    auto result = CompletedWorkflowCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CompletedWorkflowCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CompletedWorkflowCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CompletedWorkflowCallType> = true;
template<>
struct implClassFor<CloneableCore::CompletedWorkflowCallType> { using type = CloneableCore::_impl::_impl_CompletedWorkflowCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO") ComponentType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ComponentType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO") ComponentRuntime;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ComponentRuntime> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore9ComponentV") Component;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::Component> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_Component;

// Type metadata accessor for Component
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore9ComponentVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore9ComponentV") Component final {
public:
  SWIFT_INLINE_THUNK ~Component() noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Component(const Component &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Component &operator =(const Component &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Component &operator =(Component &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Component(Component &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore9ComponentV2idSSvp");
  SWIFT_INLINE_THUNK void setId(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9ComponentV2idSSvp");
  SWIFT_INLINE_THUNK ComponentType getType() const SWIFT_SYMBOL("s:13CloneableCore9ComponentV4typeAA0C4TypeOvp");
  SWIFT_INLINE_THUNK void setType(const ComponentType& value) SWIFT_SYMBOL("s:13CloneableCore9ComponentV4typeAA0C4TypeOvp");
  SWIFT_INLINE_THUNK swift::Array<ComponentRuntime> getRuntimes() const SWIFT_SYMBOL("s:13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvp");
  SWIFT_INLINE_THUNK void setRuntimes(const swift::Array<ComponentRuntime>& value) SWIFT_SYMBOL("s:13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvp");
private:
  SWIFT_INLINE_THUNK Component(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Component _make() noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Component(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Component;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore9ComponentVD;
  static inline constexpr $s13CloneableCore9ComponentVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Component {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Component &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Component &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Component returnNewValue(T callable) {
    auto result = Component::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::Component> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore9ComponentVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::Component> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::Component> = true;
template<>
struct implClassFor<CloneableCore::Component> { using type = CloneableCore::_impl::_impl_Component; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_ComponentRuntime;

// Type metadata accessor for ComponentRuntime
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore16ComponentRuntimeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ComponentRuntime
extern "C" {
extern unsigned $s13CloneableCore16ComponentRuntimeO3iosyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO5cloudyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO3webyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO7androidyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO") ComponentRuntime final {
public:
  SWIFT_INLINE_THUNK ~ComponentRuntime() noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentRuntime(const ComponentRuntime &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentRuntime &operator =(const ComponentRuntime &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ComponentRuntime &operator =(ComponentRuntime &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ComponentRuntime(ComponentRuntime &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    ios SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3iosyA2CmF"),
    cloud SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO5cloudyA2CmF"),
    web SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3webyA2CmF"),
    android SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO7androidyA2CmF"),
    edge_linux SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_ios {  // impl struct for case ios
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ios;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } ios SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3iosyA2CmF");
  SWIFT_INLINE_THUNK bool isIos() const;

  inline const static struct _impl_cloud {  // impl struct for case cloud
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } cloud SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO5cloudyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud() const;

  inline const static struct _impl_web {  // impl struct for case web
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::web;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } web SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3webyA2CmF");
  SWIFT_INLINE_THUNK bool isWeb() const;

  inline const static struct _impl_android {  // impl struct for case android
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::android;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } android SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO7androidyA2CmF");
  SWIFT_INLINE_THUNK bool isAndroid() const;

  inline const static struct _impl_edge_linux {  // impl struct for case edge_linux
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::edge_linux;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } edge_linux SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmF");
  SWIFT_INLINE_THUNK bool isEdge_linux() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO3iosyA2CmFWC) return cases::ios;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO5cloudyA2CmFWC) return cases::cloud;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO3webyA2CmFWC) return cases::web;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO7androidyA2CmFWC) return cases::android;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmFWC) return cases::edge_linux;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ComponentRuntime> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ComponentRuntime(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ComponentRuntime _make() noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ComponentRuntime(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ComponentRuntime;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore16ComponentRuntimeOD;
  static inline constexpr $s13CloneableCore16ComponentRuntimeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ComponentRuntime {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ComponentRuntime &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ComponentRuntime &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ComponentRuntime returnNewValue(T callable) {
    auto result = ComponentRuntime::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ComponentRuntime> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore16ComponentRuntimeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ComponentRuntime> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ComponentRuntime> = true;
template<>
struct implClassFor<CloneableCore::ComponentRuntime> { using type = CloneableCore::_impl::_impl_ComponentRuntime; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_ComponentType;

// Type metadata accessor for ComponentType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore13ComponentTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ComponentType
extern "C" {
extern unsigned $s13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO2uiyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO10processingyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO6objectyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO7logicalyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO9file_datayA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO") ComponentType final {
public:
  SWIFT_INLINE_THUNK ~ComponentType() noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentType(const ComponentType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentType &operator =(const ComponentType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ComponentType &operator =(ComponentType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ComponentType(ComponentType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    ios_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmF"),
    ios_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmF"),
    cloud_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmF"),
    cloud_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmF"),
    ui SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO2uiyA2CmF"),
    processing SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO10processingyA2CmF"),
    object SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO6objectyA2CmF"),
    logical SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO7logicalyA2CmF"),
    file_data SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO9file_datayA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_ios_workflow_start {  // impl struct for case ios_workflow_start
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ios_workflow_start;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } ios_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmF");
  SWIFT_INLINE_THUNK bool isIos_workflow_start() const;

  inline const static struct _impl_ios_workflow_end {  // impl struct for case ios_workflow_end
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ios_workflow_end;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } ios_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmF");
  SWIFT_INLINE_THUNK bool isIos_workflow_end() const;

  inline const static struct _impl_cloud_workflow_start {  // impl struct for case cloud_workflow_start
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud_workflow_start;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } cloud_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud_workflow_start() const;

  inline const static struct _impl_cloud_workflow_end {  // impl struct for case cloud_workflow_end
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud_workflow_end;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } cloud_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud_workflow_end() const;

  inline const static struct _impl_ui {  // impl struct for case ui
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ui;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } ui SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO2uiyA2CmF");
  SWIFT_INLINE_THUNK bool isUi() const;

  inline const static struct _impl_processing {  // impl struct for case processing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::processing;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } processing SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO10processingyA2CmF");
  SWIFT_INLINE_THUNK bool isProcessing() const;

  inline const static struct _impl_object {  // impl struct for case object
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::object;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } object SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO6objectyA2CmF");
  SWIFT_INLINE_THUNK bool isObject() const;

  inline const static struct _impl_logical {  // impl struct for case logical
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::logical;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } logical SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO7logicalyA2CmF");
  SWIFT_INLINE_THUNK bool isLogical() const;

  inline const static struct _impl_file_data {  // impl struct for case file_data
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::file_data;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } file_data SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO9file_datayA2CmF");
  SWIFT_INLINE_THUNK bool isFile_data() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmFWC) return cases::ios_workflow_start;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmFWC) return cases::ios_workflow_end;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmFWC) return cases::cloud_workflow_start;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmFWC) return cases::cloud_workflow_end;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO2uiyA2CmFWC) return cases::ui;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO10processingyA2CmFWC) return cases::processing;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO6objectyA2CmFWC) return cases::object;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO7logicalyA2CmFWC) return cases::logical;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO9file_datayA2CmFWC) return cases::file_data;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ComponentType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ComponentType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ComponentType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ComponentType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ComponentType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore13ComponentTypeOD;
  static inline constexpr $s13CloneableCore13ComponentTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ComponentType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ComponentType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ComponentType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ComponentType returnNewValue(T callable) {
    auto result = ComponentType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ComponentType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore13ComponentTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ComponentType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ComponentType> = true;
template<>
struct implClassFor<CloneableCore::ComponentType> { using type = CloneableCore::_impl::_impl_ComponentType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Class with static components that the framework can access and the view builder can use
class SWIFT_SYMBOL("s:13CloneableCore10ComponentsC") Components;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::Components> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_Components;
// Type metadata accessor for Components
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10ComponentsCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10ComponentsC") Components : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// add components to the static variable
  static SWIFT_INLINE_THUNK void addComponent(const Component& component) SWIFT_SYMBOL("s:13CloneableCore10ComponentsC12addComponent9componentyAA0E0V_tFZ");
protected:
  SWIFT_INLINE_THUNK Components(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_Components;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10ComponentsCD;
  static inline constexpr $s13CloneableCore10ComponentsCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Components {
public:
static SWIFT_INLINE_THUNK Components makeRetained(void * _Nonnull ptr) noexcept { return Components(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::Components> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10ComponentsCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::Components> { using type = CloneableCore::_impl::_impl_Components; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




/// Class that will act as a data cache to hold output data from components
class SWIFT_SYMBOL("s:13CloneableCore9DataCacheC") DataCache;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataCache> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataCache;
// Type metadata accessor for DataCache
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore9DataCacheCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore9DataCacheC") DataCache : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK DataCache(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DataCache;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore9DataCacheCD;
  static inline constexpr $s13CloneableCore9DataCacheCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataCache {
public:
static SWIFT_INLINE_THUNK DataCache makeRetained(void * _Nonnull ptr) noexcept { return DataCache(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataCache> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore9DataCacheCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DataCache> { using type = CloneableCore::_impl::_impl_DataCache; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore9DataInputV") DataInput;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataInput> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataInput;

// Type metadata accessor for DataInput
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore9DataInputVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore9DataInputV") DataInput final {
public:
  SWIFT_INLINE_THUNK ~DataInput() noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataInput(const DataInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataInput &operator =(const DataInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataInput &operator =(DataInput &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataInput(DataInput &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getComponentDynamicID() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV18componentDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setComponentDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV18componentDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getInputDynamicID() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV14inputDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setInputDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV14inputDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getInputStaticID() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV13inputStaticIDSSvp");
  SWIFT_INLINE_THUNK void setInputStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV13inputStaticIDSSvp");
  SWIFT_INLINE_THUNK AnyCloneableData getData() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK void setData(const AnyCloneableData& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getBatch() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV5batchSiSgvp");
  SWIFT_INLINE_THUNK void setBatch(const swift::Optional<swift::Int>& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV5batchSiSgvp");
  SWIFT_INLINE_THUNK bool getCurrentBatch() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV12currentBatchSbvp");
  SWIFT_INLINE_THUNK void setCurrentBatch(bool value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV12currentBatchSbvp");
private:
  SWIFT_INLINE_THUNK DataInput(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataInput _make() noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataInput(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataInput;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore9DataInputVD;
  static inline constexpr $s13CloneableCore9DataInputVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataInput {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataInput &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataInput &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataInput returnNewValue(T callable) {
    auto result = DataInput::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataInput> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore9DataInputVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DataInput> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DataInput> = true;
template<>
struct implClassFor<CloneableCore::DataInput> { using type = CloneableCore::_impl::_impl_DataInput; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore11DataManagerC") DataManager;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataManager> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataManager;
// Type metadata accessor for DataManager
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11DataManagerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11DataManagerC") DataManager : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK CloneableFileSyncEngine getFile_sync_engine() SWIFT_SYMBOL("s:13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvp");
  SWIFT_INLINE_THUNK void setFile_sync_engine(const CloneableFileSyncEngine& value) SWIFT_SYMBOL("s:13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvp");
  SWIFT_INLINE_THUNK void clearFileCache() SWIFT_SYMBOL("s:13CloneableCore11DataManagerC14clearFileCacheyyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getUserId() SWIFT_SYMBOL("s:13CloneableCore11DataManagerC9getUserIdSSSgyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> canProceed(const swift::String& auth0_jwt) SWIFT_SYMBOL("s:13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tF");
protected:
  SWIFT_INLINE_THUNK DataManager(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DataManager;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11DataManagerCD;
  static inline constexpr $s13CloneableCore11DataManagerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataManager {
public:
static SWIFT_INLINE_THUNK DataManager makeRetained(void * _Nonnull ptr) noexcept { return DataManager(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataManager> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11DataManagerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DataManager> { using type = CloneableCore::_impl::_impl_DataManager; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

























class SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO") DataObjectCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataObjectCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataObjectCallType;

// Type metadata accessor for DataObjectCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore18DataObjectCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DataObjectCallType
extern "C" {
extern unsigned $s13CloneableCore18DataObjectCallTypeO13createRequestyA2CmFWC;
extern unsigned $s13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO") DataObjectCallType final {
public:
  SWIFT_INLINE_THUNK ~DataObjectCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataObjectCallType(const DataObjectCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataObjectCallType &operator =(const DataObjectCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataObjectCallType &operator =(DataObjectCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataObjectCallType(DataObjectCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    createRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13createRequestyA2CmF"),
    updateRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_createRequest {  // impl struct for case createRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::createRequest;
    }
    SWIFT_INLINE_THUNK DataObjectCallType operator()() const;
  } createRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13createRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isCreateRequest() const;

  inline const static struct _impl_updateRequest {  // impl struct for case updateRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::updateRequest;
    }
    SWIFT_INLINE_THUNK DataObjectCallType operator()() const;
  } updateRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isUpdateRequest() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore18DataObjectCallTypeO13createRequestyA2CmFWC) return cases::createRequest;
    if (tag == _impl::$s13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmFWC) return cases::updateRequest;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DataObjectCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DataObjectCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataObjectCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataObjectCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataObjectCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore18DataObjectCallTypeOD;
  static inline constexpr $s13CloneableCore18DataObjectCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataObjectCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataObjectCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataObjectCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataObjectCallType returnNewValue(T callable) {
    auto result = DataObjectCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataObjectCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore18DataObjectCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DataObjectCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DataObjectCallType> = true;
template<>
struct implClassFor<CloneableCore::DataObjectCallType> { using type = CloneableCore::_impl::_impl_DataObjectCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {







class SWIFT_SYMBOL("s:13CloneableCore11TargetInputV") TargetInput;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::TargetInput> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore10DataOutputV") DataOutput;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataOutput> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataOutput;

// Type metadata accessor for DataOutput
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10DataOutputVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10DataOutputV") DataOutput final {
public:
  SWIFT_INLINE_THUNK ~DataOutput() noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataOutput(const DataOutput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataOutput &operator =(const DataOutput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataOutput &operator =(DataOutput &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataOutput(DataOutput &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getOutputCount() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11outputCountSivp");
  SWIFT_INLINE_THUNK void setOutputCount(swift::Int value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11outputCountSivp");
  SWIFT_INLINE_THUNK swift::String getDynamicOutputID() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV07dynamicD2IDSSvp");
  SWIFT_INLINE_THUNK void setDynamicOutputID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV07dynamicD2IDSSvp");
  SWIFT_INLINE_THUNK AnyCloneableData getData() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK void setData(const AnyCloneableData& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK swift::String getStaticComponentID() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV17staticComponentIDSSvp");
  SWIFT_INLINE_THUNK void setStaticComponentID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV17staticComponentIDSSvp");
  SWIFT_INLINE_THUNK swift::String getDynamicComponentID() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV18dynamicComponentIDSSvp");
  SWIFT_INLINE_THUNK void setDynamicComponentID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV18dynamicComponentIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTypeDescription() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV15typeDescriptionSSvp");
  SWIFT_INLINE_THUNK void setTypeDescription(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV15typeDescriptionSSvp");
  SWIFT_INLINE_THUNK ComponentType getOutputComponentType() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setOutputComponentType(const ComponentType& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<TargetInput> getTargetInput() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvp");
  SWIFT_INLINE_THUNK void setTargetInput(const swift::Optional<TargetInput>& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getBatch() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV5batchSiSgvp");
  SWIFT_INLINE_THUNK void setBatch(const swift::Optional<swift::Int>& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV5batchSiSgvp");
  static SWIFT_INLINE_THUNK DataOutput init(const AnyCloneableData& data, const swift::String& staticComponentID, const swift::String& dynamicComponentID, const swift::String& dynamicOutputID, const ComponentType& outputComponentType, const swift::Optional<TargetInput>& targetInput) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV4data17staticComponentID07dynamicgH00idH006outputG4Type11targetInputAcA03AnyaC0V_S3SAA0gK0OAA06TargetM0VSgtcfc");
  SWIFT_INLINE_THUNK DataInput convertToDataInput(bool firstCall) const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV09convertToC5Input9firstCallAA0cG0VSb_tF");
private:
  SWIFT_INLINE_THUNK DataOutput(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataOutput _make() noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataOutput(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataOutput;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10DataOutputVD;
  static inline constexpr $s13CloneableCore10DataOutputVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataOutput {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataOutput &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataOutput &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataOutput returnNewValue(T callable) {
    auto result = DataOutput::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataOutput> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10DataOutputVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DataOutput> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DataOutput> = true;
template<>
struct implClassFor<CloneableCore::DataOutput> { using type = CloneableCore::_impl::_impl_DataOutput; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Database manager handles all of the connections and the local cache
class SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC") DatabaseManager;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DatabaseManager> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DatabaseManager;
// Type metadata accessor for DatabaseManager
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore15DatabaseManagerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC") DatabaseManager : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::Optional<Connection> getConnection() SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvp");
  SWIFT_INLINE_THUNK void setConnection(const swift::Optional<Connection>& value) SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvp");
protected:
  SWIFT_INLINE_THUNK DatabaseManager(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DatabaseManager;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore15DatabaseManagerCD;
  static inline constexpr $s13CloneableCore15DatabaseManagerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DatabaseManager {
public:
static SWIFT_INLINE_THUNK DatabaseManager makeRetained(void * _Nonnull ptr) noexcept { return DatabaseManager(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DatabaseManager> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore15DatabaseManagerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DatabaseManager> { using type = CloneableCore::_impl::_impl_DatabaseManager; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore8DepthMapV") DepthMap;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DepthMap> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DepthMap;

// Type metadata accessor for DepthMap
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8DepthMapVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8DepthMapV") DepthMap final {
public:
  SWIFT_INLINE_THUNK ~DepthMap() noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DepthMap(const DepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DepthMap &operator =(const DepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DepthMap &operator =(DepthMap &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DepthMap(DepthMap &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK DepthMap(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DepthMap _make() noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DepthMap(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DepthMap;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8DepthMapVD;
  static inline constexpr $s13CloneableCore8DepthMapVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DepthMap {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DepthMap &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DepthMap &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DepthMap returnNewValue(T callable) {
    auto result = DepthMap::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DepthMap> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8DepthMapVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DepthMap> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DepthMap> = true;
template<>
struct implClassFor<CloneableCore::DepthMap> { using type = CloneableCore::_impl::_impl_DepthMap; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore14DeviceServicesC") DeviceServices;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DeviceServices> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DeviceServices;
// Type metadata accessor for DeviceServices
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore14DeviceServicesCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore14DeviceServicesC") DeviceServices : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK DeviceServices(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DeviceServices;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore14DeviceServicesCD;
  static inline constexpr $s13CloneableCore14DeviceServicesCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DeviceServices {
public:
static SWIFT_INLINE_THUNK DeviceServices makeRetained(void * _Nonnull ptr) noexcept { return DeviceServices(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DeviceServices> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore14DeviceServicesCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DeviceServices> { using type = CloneableCore::_impl::_impl_DeviceServices; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_DisplayMode;

// Type metadata accessor for DisplayMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11DisplayModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DisplayMode
extern "C" {
extern unsigned $s13CloneableCore11DisplayModeO3topyA2CmFWC;
extern unsigned $s13CloneableCore11DisplayModeO6middleyA2CmFWC;
extern unsigned $s13CloneableCore11DisplayModeO6draweryA2CmFWC;
extern unsigned $s13CloneableCore11DisplayModeO5sheetyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO") DisplayMode final {
public:
  SWIFT_INLINE_THUNK ~DisplayMode() noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DisplayMode(const DisplayMode &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DisplayMode &operator =(const DisplayMode &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DisplayMode &operator =(DisplayMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DisplayMode(DisplayMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    top SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO3topyA2CmF"),
    middle SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6middleyA2CmF"),
    drawer SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6draweryA2CmF"),
    sheet SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO5sheetyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_top {  // impl struct for case top
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::top;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } top SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO3topyA2CmF");
  SWIFT_INLINE_THUNK bool isTop() const;

  inline const static struct _impl_middle {  // impl struct for case middle
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::middle;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } middle SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6middleyA2CmF");
  SWIFT_INLINE_THUNK bool isMiddle() const;

  inline const static struct _impl_drawer {  // impl struct for case drawer
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::drawer;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } drawer SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6draweryA2CmF");
  SWIFT_INLINE_THUNK bool isDrawer() const;

  inline const static struct _impl_sheet {  // impl struct for case sheet
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sheet;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } sheet SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO5sheetyA2CmF");
  SWIFT_INLINE_THUNK bool isSheet() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore11DisplayModeO3topyA2CmFWC) return cases::top;
    if (tag == _impl::$s13CloneableCore11DisplayModeO6middleyA2CmFWC) return cases::middle;
    if (tag == _impl::$s13CloneableCore11DisplayModeO6draweryA2CmFWC) return cases::drawer;
    if (tag == _impl::$s13CloneableCore11DisplayModeO5sheetyA2CmFWC) return cases::sheet;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DisplayMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DisplayMode _make() noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DisplayMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DisplayMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11DisplayModeOD;
  static inline constexpr $s13CloneableCore11DisplayModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DisplayMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DisplayMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DisplayMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DisplayMode returnNewValue(T callable) {
    auto result = DisplayMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DisplayMode> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11DisplayModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DisplayMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DisplayMode> = true;
template<>
struct implClassFor<CloneableCore::DisplayMode> { using type = CloneableCore::_impl::_impl_DisplayMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV") FieldFileInformation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FieldFileInformation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FieldFileInformation;

// Type metadata accessor for FieldFileInformation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore20FieldFileInformationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV") FieldFileInformation final {
public:
  SWIFT_INLINE_THUNK ~FieldFileInformation() noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldFileInformation(const FieldFileInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldFileInformation &operator =(const FieldFileInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldFileInformation &operator =(FieldFileInformation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldFileInformation(FieldFileInformation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileExtension() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV13fileExtensionSSSgvp");
  SWIFT_INLINE_THUNK void setFileExtension(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV13fileExtensionSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileName() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileNameSSSgvp");
  SWIFT_INLINE_THUNK void setFileName(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileNameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getFileSize() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileSizeSiSgvp");
  SWIFT_INLINE_THUNK void setFileSize(const swift::Optional<swift::Int>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileSizeSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileType() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileTypeSSSgvp");
  SWIFT_INLINE_THUNK void setFileType(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileTypeSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileUrl() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV7fileUrlSSSgvp");
  SWIFT_INLINE_THUNK void setFileUrl(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV7fileUrlSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStorageAuthProviderName() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvp");
  SWIFT_INLINE_THUNK void setStorageAuthProviderName(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStorageAuthProviderRefID() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvp");
  SWIFT_INLINE_THUNK void setStorageAuthProviderRefID(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStorageProvider() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV15storageProviderSSSgvp");
  SWIFT_INLINE_THUNK void setStorageProvider(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV15storageProviderSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getOne_way_sync() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV12one_way_syncSbSgvp");
  SWIFT_INLINE_THUNK void setOne_way_sync(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV12one_way_syncSbSgvp");
  static SWIFT_INLINE_THUNK FieldFileInformation init(const swift::Optional<swift::String>& fileExtension, const swift::Optional<swift::String>& fileName, const swift::Optional<swift::Int>& fileSize, const swift::Optional<swift::String>& fileType, const swift::Optional<swift::String>& fileUrl, const swift::Optional<swift::String>& storageAuthProviderName, const swift::Optional<swift::String>& storageAuthProviderRefID, const swift::Optional<swift::String>& storageProvider, const swift::Optional<bool>& one_way_sync) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV13fileExtension0F4Name0F4Size0F4Type0F3Url019storageAuthProviderH00lmN5RefID0lN012one_way_syncACSSSg_AMSiSgA5MSbSgtcfc");
private:
  SWIFT_INLINE_THUNK FieldFileInformation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldFileInformation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldFileInformation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldFileInformation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore20FieldFileInformationVD;
  static inline constexpr $s13CloneableCore20FieldFileInformationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldFileInformation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldFileInformation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldFileInformation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldFileInformation returnNewValue(T callable) {
    auto result = FieldFileInformation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FieldFileInformation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore20FieldFileInformationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FieldFileInformation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FieldFileInformation> = true;
template<>
struct implClassFor<CloneableCore::FieldFileInformation> { using type = CloneableCore::_impl::_impl_FieldFileInformation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO") FileInformationCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileInformationCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileInformationCallType;

// Type metadata accessor for FileInformationCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore23FileInformationCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum FileInformationCallType
extern "C" {
extern unsigned $s13CloneableCore23FileInformationCallTypeO06createC0yA2CmFWC;
extern unsigned $s13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO") FileInformationCallType final {
public:
  SWIFT_INLINE_THUNK ~FileInformationCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FileInformationCallType(const FileInformationCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FileInformationCallType &operator =(const FileInformationCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FileInformationCallType &operator =(FileInformationCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FileInformationCallType(FileInformationCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    createFile SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO06createC0yA2CmF"),
    updateUploadStatus SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_createFile {  // impl struct for case createFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::createFile;
    }
    SWIFT_INLINE_THUNK FileInformationCallType operator()() const;
  } createFile SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO06createC0yA2CmF");
  SWIFT_INLINE_THUNK bool isCreateFile() const;

  inline const static struct _impl_updateUploadStatus {  // impl struct for case updateUploadStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::updateUploadStatus;
    }
    SWIFT_INLINE_THUNK FileInformationCallType operator()() const;
  } updateUploadStatus SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isUpdateUploadStatus() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore23FileInformationCallTypeO06createC0yA2CmFWC) return cases::createFile;
    if (tag == _impl::$s13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmFWC) return cases::updateUploadStatus;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<FileInformationCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK FileInformationCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FileInformationCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FileInformationCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FileInformationCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore23FileInformationCallTypeOD;
  static inline constexpr $s13CloneableCore23FileInformationCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileInformationCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FileInformationCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FileInformationCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FileInformationCallType returnNewValue(T callable) {
    auto result = FileInformationCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileInformationCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore23FileInformationCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FileInformationCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FileInformationCallType> = true;
template<>
struct implClassFor<CloneableCore::FileInformationCallType> { using type = CloneableCore::_impl::_impl_FileInformationCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore17FileObserverTokenC") FileObserverToken;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileObserverToken> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileObserverToken;
// Type metadata accessor for FileObserverToken
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17FileObserverTokenCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17FileObserverTokenC") FileObserverToken : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK void cancel() SWIFT_SYMBOL("s:13CloneableCore17FileObserverTokenC6cancelyyF");
protected:
  SWIFT_INLINE_THUNK FileObserverToken(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_FileObserverToken;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17FileObserverTokenCD;
  static inline constexpr $s13CloneableCore17FileObserverTokenCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileObserverToken {
public:
static SWIFT_INLINE_THUNK FileObserverToken makeRetained(void * _Nonnull ptr) noexcept { return FileObserverToken(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileObserverToken> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17FileObserverTokenCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::FileObserverToken> { using type = CloneableCore::_impl::_impl_FileObserverToken; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO") FileSyncRelation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileSyncRelation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileSyncRelation;

// Type metadata accessor for FileSyncRelation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore16FileSyncRelationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum FileSyncRelation
extern "C" {
extern unsigned $s13CloneableCore16FileSyncRelationO6objectyA2CmFWC;
extern unsigned $s13CloneableCore16FileSyncRelationO8workflowyA2CmFWC;
extern unsigned $s13CloneableCore16FileSyncRelationO9componentyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO") FileSyncRelation final {
public:
  SWIFT_INLINE_THUNK ~FileSyncRelation() noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRelation(const FileSyncRelation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRelation &operator =(const FileSyncRelation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FileSyncRelation &operator =(FileSyncRelation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FileSyncRelation(FileSyncRelation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    object SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO6objectyA2CmF"),
    workflow SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8workflowyA2CmF"),
    component SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO9componentyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_object {  // impl struct for case object
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::object;
    }
    SWIFT_INLINE_THUNK FileSyncRelation operator()() const;
  } object SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO6objectyA2CmF");
  SWIFT_INLINE_THUNK bool isObject() const;

  inline const static struct _impl_workflow {  // impl struct for case workflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::workflow;
    }
    SWIFT_INLINE_THUNK FileSyncRelation operator()() const;
  } workflow SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8workflowyA2CmF");
  SWIFT_INLINE_THUNK bool isWorkflow() const;

  inline const static struct _impl_component {  // impl struct for case component
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::component;
    }
    SWIFT_INLINE_THUNK FileSyncRelation operator()() const;
  } component SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO9componentyA2CmF");
  SWIFT_INLINE_THUNK bool isComponent() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore16FileSyncRelationO6objectyA2CmFWC) return cases::object;
    if (tag == _impl::$s13CloneableCore16FileSyncRelationO8workflowyA2CmFWC) return cases::workflow;
    if (tag == _impl::$s13CloneableCore16FileSyncRelationO9componentyA2CmFWC) return cases::component;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<FileSyncRelation> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK FileSyncRelation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FileSyncRelation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FileSyncRelation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FileSyncRelation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore16FileSyncRelationOD;
  static inline constexpr $s13CloneableCore16FileSyncRelationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileSyncRelation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FileSyncRelation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FileSyncRelation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FileSyncRelation returnNewValue(T callable) {
    auto result = FileSyncRelation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileSyncRelation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore16FileSyncRelationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FileSyncRelation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FileSyncRelation> = true;
template<>
struct implClassFor<CloneableCore::FileSyncRelation> { using type = CloneableCore::_impl::_impl_FileSyncRelation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV") FileSyncRequest;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileSyncRequest> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileSyncRequest;

// Type metadata accessor for FileSyncRequest
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore15FileSyncRequestVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV") FileSyncRequest final {
public:
  SWIFT_INLINE_THUNK ~FileSyncRequest() noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRequest(const FileSyncRequest &other) noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRequest &operator =(const FileSyncRequest &other) noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FileSyncRequest &operator =(FileSyncRequest &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FileSyncRequest(FileSyncRequest &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getFileName() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV8fileNameSSvp");
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> getData() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV4dataAA03AnyA4DataVSgvp");
  SWIFT_INLINE_THUNK FileSyncRelation getFileRelation() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV12fileRelationAA0cdG0Ovp");
  SWIFT_INLINE_THUNK CloneableFileType getFileType() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV8fileTypeAA0acG0Ovp");
  SWIFT_INLINE_THUNK bool getOne_way_sync() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV12one_way_syncSbvp");
  SWIFT_INLINE_THUNK swift::String getUser() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV4userSSvp");
  SWIFT_INLINE_THUNK swift::String getCompany() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV7companySSvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getTypeRefID() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV9typeRefIDSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::String>> getRelatedDeployedWorkflowIDs() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV26relatedDeployedWorkflowIDsSaySSGSgvp");
  SWIFT_INLINE_THUNK bool getDownload() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV8downloadSbvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldFileInformation> getFieldFileInformation() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV05fieldC11InformationAA05FieldcG0VSgvp");
private:
  SWIFT_INLINE_THUNK FileSyncRequest(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FileSyncRequest _make() noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FileSyncRequest(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FileSyncRequest;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore15FileSyncRequestVD;
  static inline constexpr $s13CloneableCore15FileSyncRequestVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileSyncRequest {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FileSyncRequest &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FileSyncRequest &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FileSyncRequest returnNewValue(T callable) {
    auto result = FileSyncRequest::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileSyncRequest> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore15FileSyncRequestVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FileSyncRequest> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FileSyncRequest> = true;
template<>
struct implClassFor<CloneableCore::FileSyncRequest> { using type = CloneableCore::_impl::_impl_FileSyncRequest; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




/// Represents an indexed operation against a lazily parsed <code>XMLIndexer</code>
class SWIFT_SYMBOL("s:13CloneableCore7IndexOpC") IndexOp;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::IndexOp> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_IndexOp;
// Type metadata accessor for IndexOp
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore7IndexOpCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore7IndexOpC") IndexOp : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK IndexOp(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_IndexOp;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore7IndexOpCD;
  static inline constexpr $s13CloneableCore7IndexOpCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_IndexOp {
public:
static SWIFT_INLINE_THUNK IndexOp makeRetained(void * _Nonnull ptr) noexcept { return IndexOp(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::IndexOp> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore7IndexOpCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::IndexOp> { using type = CloneableCore::_impl::_impl_IndexOp; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Represents a collection of <code>IndexOp</code> instances. Provides a means of iterating them
/// to find a match in a lazily parsed <code>XMLIndexer</code> instance.
class SWIFT_SYMBOL("s:13CloneableCore8IndexOpsC") IndexOps;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::IndexOps> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_IndexOps;
// Type metadata accessor for IndexOps
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8IndexOpsCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8IndexOpsC") IndexOps : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK IndexOps(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_IndexOps;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8IndexOpsCD;
  static inline constexpr $s13CloneableCore8IndexOpsCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_IndexOps {
public:
static SWIFT_INLINE_THUNK IndexOps makeRetained(void * _Nonnull ptr) noexcept { return IndexOps(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::IndexOps> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8IndexOpsCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::IndexOps> { using type = CloneableCore::_impl::_impl_IndexOps; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore17LocalCacheManagerC") LocalCacheManager;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LocalCacheManager> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_LocalCacheManager;
// Type metadata accessor for LocalCacheManager
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17LocalCacheManagerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17LocalCacheManagerC") LocalCacheManager : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK LocalCacheManager(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_LocalCacheManager;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17LocalCacheManagerCD;
  static inline constexpr $s13CloneableCore17LocalCacheManagerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LocalCacheManager {
public:
static SWIFT_INLINE_THUNK LocalCacheManager makeRetained(void * _Nonnull ptr) noexcept { return LocalCacheManager(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LocalCacheManager> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17LocalCacheManagerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::LocalCacheManager> { using type = CloneableCore::_impl::_impl_LocalCacheManager; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_LogLevel;

// Type metadata accessor for LogLevel
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8LogLevelOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum LogLevel
extern "C" {
extern unsigned $s13CloneableCore8LogLevelO5fatalyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO7successyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO5debugyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO4infoyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO7warningyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO5erroryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8LogLevelO") LogLevel final {
public:
  SWIFT_INLINE_THUNK ~LogLevel() noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LogLevel(const LogLevel &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LogLevel &operator =(const LogLevel &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LogLevel &operator =(LogLevel &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LogLevel(LogLevel &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    fatal SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5fatalyA2CmF"),
    success SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7successyA2CmF"),
    debug SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5debugyA2CmF"),
    info SWIFT_SYMBOL("s:13CloneableCore8LogLevelO4infoyA2CmF"),
    warning SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7warningyA2CmF"),
    error SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5erroryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_fatal {  // impl struct for case fatal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fatal;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } fatal SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5fatalyA2CmF");
  SWIFT_INLINE_THUNK bool isFatal() const;

  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } success SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_debug {  // impl struct for case debug
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::debug;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } debug SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5debugyA2CmF");
  SWIFT_INLINE_THUNK bool isDebug() const;

  inline const static struct _impl_info {  // impl struct for case info
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::info;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } info SWIFT_SYMBOL("s:13CloneableCore8LogLevelO4infoyA2CmF");
  SWIFT_INLINE_THUNK bool isInfo() const;

  inline const static struct _impl_warning {  // impl struct for case warning
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::warning;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } warning SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7warningyA2CmF");
  SWIFT_INLINE_THUNK bool isWarning() const;

  inline const static struct _impl_error {  // impl struct for case error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::error;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } error SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5erroryA2CmF");
  SWIFT_INLINE_THUNK bool isError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore8LogLevelO5fatalyA2CmFWC) return cases::fatal;
    if (tag == _impl::$s13CloneableCore8LogLevelO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s13CloneableCore8LogLevelO5debugyA2CmFWC) return cases::debug;
    if (tag == _impl::$s13CloneableCore8LogLevelO4infoyA2CmFWC) return cases::info;
    if (tag == _impl::$s13CloneableCore8LogLevelO7warningyA2CmFWC) return cases::warning;
    if (tag == _impl::$s13CloneableCore8LogLevelO5erroryA2CmFWC) return cases::error;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore8LogLevelO8rawValueSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<LogLevel> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore8LogLevelO8rawValueACSgSS_tcfc");
private:
  SWIFT_INLINE_THUNK LogLevel(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LogLevel _make() noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LogLevel(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LogLevel;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8LogLevelOD;
  static inline constexpr $s13CloneableCore8LogLevelOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LogLevel {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LogLevel &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LogLevel &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LogLevel returnNewValue(T callable) {
    auto result = LogLevel::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LogLevel> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8LogLevelOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::LogLevel> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::LogLevel> = true;
template<>
struct implClassFor<CloneableCore::LogLevel> { using type = CloneableCore::_impl::_impl_LogLevel; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_LoggerComponentInformation;

// Type metadata accessor for LoggerComponentInformation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore26LoggerComponentInformationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore26LoggerComponentInformationV") LoggerComponentInformation final {
public:
  SWIFT_INLINE_THUNK ~LoggerComponentInformation() noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerComponentInformation(const LoggerComponentInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerComponentInformation &operator =(const LoggerComponentInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LoggerComponentInformation &operator =(LoggerComponentInformation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LoggerComponentInformation(LoggerComponentInformation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK LoggerComponentInformation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LoggerComponentInformation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LoggerComponentInformation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LoggerComponentInformation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore26LoggerComponentInformationVD;
  static inline constexpr $s13CloneableCore26LoggerComponentInformationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LoggerComponentInformation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LoggerComponentInformation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LoggerComponentInformation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LoggerComponentInformation returnNewValue(T callable) {
    auto result = LoggerComponentInformation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LoggerComponentInformation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore26LoggerComponentInformationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::LoggerComponentInformation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::LoggerComponentInformation> = true;
template<>
struct implClassFor<CloneableCore::LoggerComponentInformation> { using type = CloneableCore::_impl::_impl_LoggerComponentInformation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_LoggerWorkflowInformation;

// Type metadata accessor for LoggerWorkflowInformation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore25LoggerWorkflowInformationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore25LoggerWorkflowInformationV") LoggerWorkflowInformation final {
public:
  SWIFT_INLINE_THUNK ~LoggerWorkflowInformation() noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerWorkflowInformation(const LoggerWorkflowInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerWorkflowInformation &operator =(const LoggerWorkflowInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LoggerWorkflowInformation &operator =(LoggerWorkflowInformation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LoggerWorkflowInformation(LoggerWorkflowInformation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK LoggerWorkflowInformation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LoggerWorkflowInformation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LoggerWorkflowInformation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LoggerWorkflowInformation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore25LoggerWorkflowInformationVD;
  static inline constexpr $s13CloneableCore25LoggerWorkflowInformationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LoggerWorkflowInformation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LoggerWorkflowInformation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LoggerWorkflowInformation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LoggerWorkflowInformation returnNewValue(T callable) {
    auto result = LoggerWorkflowInformation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LoggerWorkflowInformation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::LoggerWorkflowInformation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::LoggerWorkflowInformation> = true;
template<>
struct implClassFor<CloneableCore::LoggerWorkflowInformation> { using type = CloneableCore::_impl::_impl_LoggerWorkflowInformation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_ModelToSync;

// Type metadata accessor for ModelToSync
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11ModelToSyncOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ModelToSync
extern "C" {
extern unsigned $s13CloneableCore11ModelToSyncO15FileInformationyA2CmFWC;
extern unsigned $s13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmFWC;
extern unsigned $s13CloneableCore11ModelToSyncO19NotificationRequestyA2CmFWC;
extern unsigned $s13CloneableCore11ModelToSyncO10DataObjectyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO") ModelToSync final {
public:
  SWIFT_INLINE_THUNK ~ModelToSync() noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelToSync(const ModelToSync &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelToSync &operator =(const ModelToSync &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ModelToSync &operator =(ModelToSync &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ModelToSync(ModelToSync &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    FileInformation SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO15FileInformationyA2CmF"),
    CompletedWorkflow SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmF"),
    NotificationRequest SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO19NotificationRequestyA2CmF"),
    DataObject SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO10DataObjectyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_FileInformation {  // impl struct for case FileInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::FileInformation;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } FileInformation SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO15FileInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isFileInformation() const;

  inline const static struct _impl_CompletedWorkflow {  // impl struct for case CompletedWorkflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::CompletedWorkflow;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } CompletedWorkflow SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmF");
  SWIFT_INLINE_THUNK bool isCompletedWorkflow() const;

  inline const static struct _impl_NotificationRequest {  // impl struct for case NotificationRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::NotificationRequest;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } NotificationRequest SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO19NotificationRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isNotificationRequest() const;

  inline const static struct _impl_DataObject {  // impl struct for case DataObject
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::DataObject;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } DataObject SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO10DataObjectyA2CmF");
  SWIFT_INLINE_THUNK bool isDataObject() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore11ModelToSyncO15FileInformationyA2CmFWC) return cases::FileInformation;
    if (tag == _impl::$s13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmFWC) return cases::CompletedWorkflow;
    if (tag == _impl::$s13CloneableCore11ModelToSyncO19NotificationRequestyA2CmFWC) return cases::NotificationRequest;
    if (tag == _impl::$s13CloneableCore11ModelToSyncO10DataObjectyA2CmFWC) return cases::DataObject;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ModelToSync> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ModelToSync(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ModelToSync _make() noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ModelToSync(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ModelToSync;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11ModelToSyncOD;
  static inline constexpr $s13CloneableCore11ModelToSyncOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ModelToSync {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ModelToSync &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ModelToSync &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ModelToSync returnNewValue(T callable) {
    auto result = ModelToSync::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ModelToSync> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11ModelToSyncOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ModelToSync> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ModelToSync> = true;
template<>
struct implClassFor<CloneableCore::ModelToSync> { using type = CloneableCore::_impl::_impl_ModelToSync; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore14NetworkMonitorC") NetworkMonitor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::NetworkMonitor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_NetworkMonitor;
// Type metadata accessor for NetworkMonitor
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore14NetworkMonitorCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore14NetworkMonitorC") NetworkMonitor : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK NetworkMonitor(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_NetworkMonitor;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore14NetworkMonitorCD;
  static inline constexpr $s13CloneableCore14NetworkMonitorCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_NetworkMonitor {
public:
static SWIFT_INLINE_THUNK NetworkMonitor makeRetained(void * _Nonnull ptr) noexcept { return NetworkMonitor(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::NetworkMonitor> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore14NetworkMonitorCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::NetworkMonitor> { using type = CloneableCore::_impl::_impl_NetworkMonitor; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO") NotificationRequestCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::NotificationRequestCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_NotificationRequestCallType;

// Type metadata accessor for NotificationRequestCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore27NotificationRequestCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum NotificationRequestCallType
extern "C" {
extern unsigned $s13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO") NotificationRequestCallType final {
public:
  SWIFT_INLINE_THUNK ~NotificationRequestCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType(const NotificationRequestCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType &operator =(const NotificationRequestCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType &operator =(NotificationRequestCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER NotificationRequestCallType(NotificationRequestCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    uploadRequest SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_uploadRequest {  // impl struct for case uploadRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uploadRequest;
    }
    SWIFT_INLINE_THUNK NotificationRequestCallType operator()() const;
  } uploadRequest SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmF");
  SWIFT_INLINE_THUNK bool isUploadRequest() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmFWC) return cases::uploadRequest;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<NotificationRequestCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK NotificationRequestCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK NotificationRequestCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return NotificationRequestCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_NotificationRequestCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore27NotificationRequestCallTypeOD;
  static inline constexpr $s13CloneableCore27NotificationRequestCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_NotificationRequestCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(NotificationRequestCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const NotificationRequestCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER NotificationRequestCallType returnNewValue(T callable) {
    auto result = NotificationRequestCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::NotificationRequestCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::NotificationRequestCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::NotificationRequestCallType> = true;
template<>
struct implClassFor<CloneableCore::NotificationRequestCallType> { using type = CloneableCore::_impl::_impl_NotificationRequestCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




class SWIFT_SYMBOL("s:13CloneableCore17ObjectIdGeneratorV") ObjectIdGenerator;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ObjectIdGenerator> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_ObjectIdGenerator;

// Type metadata accessor for ObjectIdGenerator
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17ObjectIdGeneratorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17ObjectIdGeneratorV") ObjectIdGenerator final {
public:
  SWIFT_INLINE_THUNK ~ObjectIdGenerator() noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ObjectIdGenerator(const ObjectIdGenerator &other) noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ObjectIdGenerator &operator =(const ObjectIdGenerator &other) noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ObjectIdGenerator &operator =(ObjectIdGenerator &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ObjectIdGenerator(ObjectIdGenerator &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  static SWIFT_INLINE_THUNK swift::String generate() SWIFT_SYMBOL("s:13CloneableCore17ObjectIdGeneratorV8generateSSyFZ");
private:
  SWIFT_INLINE_THUNK ObjectIdGenerator(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ObjectIdGenerator _make() noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ObjectIdGenerator(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ObjectIdGenerator;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17ObjectIdGeneratorVD;
  static inline constexpr $s13CloneableCore17ObjectIdGeneratorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ObjectIdGenerator {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ObjectIdGenerator &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ObjectIdGenerator &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ObjectIdGenerator returnNewValue(T callable) {
    auto result = ObjectIdGenerator::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ObjectIdGenerator> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17ObjectIdGeneratorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ObjectIdGenerator> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ObjectIdGenerator> = true;
template<>
struct implClassFor<CloneableCore::ObjectIdGenerator> { using type = CloneableCore::_impl::_impl_ObjectIdGenerator; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV") OutputConnection;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::OutputConnection> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_OutputConnection;

// Type metadata accessor for OutputConnection
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore16OutputConnectionVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV") OutputConnection final {
public:
  SWIFT_INLINE_THUNK ~OutputConnection() noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK OutputConnection(const OutputConnection &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK OutputConnection &operator =(const OutputConnection &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK OutputConnection &operator =(OutputConnection &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER OutputConnection(OutputConnection &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getTargetInputStaticID() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV19targetInputStaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetInputStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV19targetInputStaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetDynamicID() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV15targetDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setTargetDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV15targetDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetInput() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV11targetInputSSvp");
  SWIFT_INLINE_THUNK void setTargetInput(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV11targetInputSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetStaticID() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV14targetStaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV14targetStaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetType() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV10targetTypeSSvp");
  SWIFT_INLINE_THUNK void setTargetType(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV10targetTypeSSvp");
  static SWIFT_INLINE_THUNK OutputConnection init(const swift::String& targetInputStaticID, const swift::String& targetDynamicID, const swift::String& targetInput, const swift::String& targetStaticID, const swift::String& targetType) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV19targetInputStaticID0e7DynamicH00eF00egH00E4TypeACSS_S4Stcfc");
private:
  SWIFT_INLINE_THUNK OutputConnection(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK OutputConnection _make() noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return OutputConnection(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_OutputConnection;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore16OutputConnectionVD;
  static inline constexpr $s13CloneableCore16OutputConnectionVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_OutputConnection {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(OutputConnection &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const OutputConnection &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER OutputConnection returnNewValue(T callable) {
    auto result = OutputConnection::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::OutputConnection> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore16OutputConnectionVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::OutputConnection> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::OutputConnection> = true;
template<>
struct implClassFor<CloneableCore::OutputConnection> { using type = CloneableCore::_impl::_impl_OutputConnection; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV") ParsingError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ParsingError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_ParsingError;

// Type metadata accessor for ParsingError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore12ParsingErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV") ParsingError final {
public:
  SWIFT_INLINE_THUNK ~ParsingError() noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ParsingError(const ParsingError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ParsingError &operator =(const ParsingError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ParsingError &operator =(ParsingError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ParsingError(ParsingError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getLine() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV4lineSivp");
  SWIFT_INLINE_THUNK swift::Int getColumn() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV6columnSivp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV16errorDescriptionSSSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ParsingError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ParsingError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ParsingError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ParsingError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore12ParsingErrorVD;
  static inline constexpr $s13CloneableCore12ParsingErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ParsingError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ParsingError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ParsingError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ParsingError returnNewValue(T callable) {
    auto result = ParsingError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ParsingError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore12ParsingErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ParsingError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ParsingError> = true;
template<>
struct implClassFor<CloneableCore::ParsingError> { using type = CloneableCore::_impl::_impl_ParsingError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



namespace _impl {

class _impl_RUNTIME_ENVIRONMENT;

// Type metadata accessor for RUNTIME_ENVIRONMENT
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore19RUNTIME_ENVIRONMENTOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum RUNTIME_ENVIRONMENT
extern "C" {
extern unsigned $s13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmFWC;
extern unsigned $s13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO") RUNTIME_ENVIRONMENT final {
public:
  SWIFT_INLINE_THUNK ~RUNTIME_ENVIRONMENT() noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT(const RUNTIME_ENVIRONMENT &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT &operator =(const RUNTIME_ENVIRONMENT &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT &operator =(RUNTIME_ENVIRONMENT &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RUNTIME_ENVIRONMENT(RUNTIME_ENVIRONMENT &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    mobile SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmF"),
    cloud SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_mobile {  // impl struct for case mobile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mobile;
    }
    SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT operator()() const;
  } mobile SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmF");
  SWIFT_INLINE_THUNK bool isMobile() const;

  inline const static struct _impl_cloud {  // impl struct for case cloud
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud;
    }
    SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT operator()() const;
  } cloud SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmFWC) return cases::mobile;
    if (tag == _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmFWC) return cases::cloud;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT _make() noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RUNTIME_ENVIRONMENT(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RUNTIME_ENVIRONMENT;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore19RUNTIME_ENVIRONMENTOD;
  static inline constexpr $s13CloneableCore19RUNTIME_ENVIRONMENTOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RUNTIME_ENVIRONMENT {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RUNTIME_ENVIRONMENT &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RUNTIME_ENVIRONMENT &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RUNTIME_ENVIRONMENT returnNewValue(T callable) {
    auto result = RUNTIME_ENVIRONMENT::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::RUNTIME_ENVIRONMENT> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::RUNTIME_ENVIRONMENT> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::RUNTIME_ENVIRONMENT> = true;
template<>
struct implClassFor<CloneableCore::RUNTIME_ENVIRONMENT> { using type = CloneableCore::_impl::_impl_RUNTIME_ENVIRONMENT; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {








/// This class is used to wrap the observer in a weak reference so it doesn’t cause strong reference cycles.
class SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC") SyncStatusToken;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncStatusToken> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_SyncStatusToken;
// Type metadata accessor for SyncStatusToken
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore15SyncStatusTokenCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC") SyncStatusToken : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK void unsubscribe() SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC11unsubscribeyyF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC9hashValueSivp");
protected:
  SWIFT_INLINE_THUNK SyncStatusToken(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_SyncStatusToken;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore15SyncStatusTokenCD;
  static inline constexpr $s13CloneableCore15SyncStatusTokenCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncStatusToken {
public:
static SWIFT_INLINE_THUNK SyncStatusToken makeRetained(void * _Nonnull ptr) noexcept { return SyncStatusToken(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncStatusToken> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore15SyncStatusTokenCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::SyncStatusToken> { using type = CloneableCore::_impl::_impl_SyncStatusToken; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC0E6ChangeO") DatabaseChange;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DatabaseChange> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// Represents a database for synchronized files.
class SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC") SyncedFileDatabase;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncedFileDatabase> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_SyncedFileDatabase;
// Type metadata accessor for SyncedFileDatabase
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore18SyncedFileDatabaseCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC") SyncedFileDatabase : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Retrieves the number of un-synced files.
///
/// returns:
/// The number of un-synced files or nil if there is a database error.
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getUnsyncedFileCount() SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyF");
/// Retrieves the number of total files
///
/// returns:
/// The number of total files or nil if there is a database error.
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getTotalFileCount() SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyF");
/// Retrieves the number of synced files
///
/// returns:
/// The number of synced files or nil if there is a database error.
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getSyncedFileCount() SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyF");
protected:
  SWIFT_INLINE_THUNK SyncedFileDatabase(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_SyncedFileDatabase;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore18SyncedFileDatabaseCD;
  static inline constexpr $s13CloneableCore18SyncedFileDatabaseCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncedFileDatabase {
public:
static SWIFT_INLINE_THUNK SyncedFileDatabase makeRetained(void * _Nonnull ptr) noexcept { return SyncedFileDatabase(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncedFileDatabase> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore18SyncedFileDatabaseCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::SyncedFileDatabase> { using type = CloneableCore::_impl::_impl_SyncedFileDatabase; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore34SyncedFileInformationObserverTokenC") SyncedFileInformationObserverToken;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncedFileInformationObserverToken> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_SyncedFileInformationObserverToken;
// Type metadata accessor for SyncedFileInformationObserverToken
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore34SyncedFileInformationObserverTokenCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore34SyncedFileInformationObserverTokenC") SyncedFileInformationObserverToken : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK void cancel() SWIFT_SYMBOL("s:13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyF");
protected:
  SWIFT_INLINE_THUNK SyncedFileInformationObserverToken(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_SyncedFileInformationObserverToken;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore34SyncedFileInformationObserverTokenCD;
  static inline constexpr $s13CloneableCore34SyncedFileInformationObserverTokenCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncedFileInformationObserverToken {
public:
static SWIFT_INLINE_THUNK SyncedFileInformationObserverToken makeRetained(void * _Nonnull ptr) noexcept { return SyncedFileInformationObserverToken(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncedFileInformationObserverToken> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore34SyncedFileInformationObserverTokenCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::SyncedFileInformationObserverToken> { using type = CloneableCore::_impl::_impl_SyncedFileInformationObserverToken; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_SyncedFileInformationV2;

// Type metadata accessor for SyncedFileInformationV2
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore23SyncedFileInformationV2VMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V") SyncedFileInformationV2 final {
public:
  SWIFT_INLINE_THUNK ~SyncedFileInformationV2() noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SyncedFileInformationV2(const SyncedFileInformationV2 &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SyncedFileInformationV2 &operator =(const SyncedFileInformationV2 &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SyncedFileInformationV2 &operator =(SyncedFileInformationV2 &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SyncedFileInformationV2(SyncedFileInformationV2 &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Array<swift::String> getRelatedCloneableDeployedWorkflows() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvp");
  SWIFT_INLINE_THUNK void setRelatedCloneableDeployedWorkflows(const swift::Array<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getDownload() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8downloadSbSgvp");
  SWIFT_INLINE_THUNK void setDownload(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8downloadSbSgvp");
  SWIFT_INLINE_THUNK bool getSyncComplete() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvp");
  SWIFT_INLINE_THUNK void setSyncComplete(bool value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getLocalFilePath() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvp");
  SWIFT_INLINE_THUNK void setLocalFilePath(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvp");
  SWIFT_INLINE_THUNK swift::String getFileName() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8fileNameSSvp");
  SWIFT_INLINE_THUNK void setFileName(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8fileNameSSvp");
private:
  SWIFT_INLINE_THUNK SyncedFileInformationV2(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SyncedFileInformationV2 _make() noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SyncedFileInformationV2(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SyncedFileInformationV2;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore23SyncedFileInformationV2VD;
  static inline constexpr $s13CloneableCore23SyncedFileInformationV2VD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncedFileInformationV2 {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SyncedFileInformationV2 &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SyncedFileInformationV2 &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SyncedFileInformationV2 returnNewValue(T callable) {
    auto result = SyncedFileInformationV2::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncedFileInformationV2> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore23SyncedFileInformationV2VMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::SyncedFileInformationV2> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::SyncedFileInformationV2> = true;
template<>
struct implClassFor<CloneableCore::SyncedFileInformationV2> { using type = CloneableCore::_impl::_impl_SyncedFileInformationV2; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_TargetInput;

// Type metadata accessor for TargetInput
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11TargetInputVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11TargetInputV") TargetInput final {
public:
  SWIFT_INLINE_THUNK ~TargetInput() noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK TargetInput(const TargetInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK TargetInput &operator =(const TargetInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK TargetInput &operator =(TargetInput &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER TargetInput(TargetInput &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ComponentType getComponentType() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovp");
  SWIFT_INLINE_THUNK void setComponentType(const ComponentType& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovp");
  SWIFT_INLINE_THUNK swift::String getTargetInputStaticID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD8StaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetInputStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD8StaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetInputDynamicID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD9DynamicIDSSvp");
  SWIFT_INLINE_THUNK void setTargetInputDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD9DynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetComponentStaticID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV23targetComponentStaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetComponentStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV23targetComponentStaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetComponentDynamicID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV24targetComponentDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setTargetComponentDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV24targetComponentDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getObjectFieldOutputDynamicID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvp");
  SWIFT_INLINE_THUNK void setObjectFieldOutputDynamicID(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvp");
private:
  SWIFT_INLINE_THUNK TargetInput(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK TargetInput _make() noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return TargetInput(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_TargetInput;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11TargetInputVD;
  static inline constexpr $s13CloneableCore11TargetInputVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_TargetInput {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(TargetInput &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const TargetInput &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER TargetInput returnNewValue(T callable) {
    auto result = TargetInput::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::TargetInput> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11TargetInputVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::TargetInput> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::TargetInput> = true;
template<>
struct implClassFor<CloneableCore::TargetInput> { using type = CloneableCore::_impl::_impl_TargetInput; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Models a text element
class SWIFT_SYMBOL("s:13CloneableCore11TextElementC") TextElement;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::TextElement> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_TextElement;
// Type metadata accessor for TextElement
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11TextElementCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11TextElementC") TextElement : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::String getText() SWIFT_SYMBOL("s:13CloneableCore11TextElementC4textSSvp");
protected:
  SWIFT_INLINE_THUNK TextElement(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_TextElement;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11TextElementCD;
  static inline constexpr $s13CloneableCore11TextElementCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_TextElement {
public:
static SWIFT_INLINE_THUNK TextElement makeRetained(void * _Nonnull ptr) noexcept { return TextElement(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::TextElement> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11TextElementCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::TextElement> { using type = CloneableCore::_impl::_impl_TextElement; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore10TrackStateO") TrackState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::TrackState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_TrackState;

// Type metadata accessor for TrackState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10TrackStateOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum TrackState
extern "C" {
extern unsigned $s13CloneableCore10TrackStateO3newyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO7trackedyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO4lostyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO7removedyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10TrackStateO") TrackState final {
public:
  SWIFT_INLINE_THUNK ~TrackState() noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK TrackState(const TrackState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK TrackState &operator =(const TrackState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK TrackState &operator =(TrackState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER TrackState(TrackState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    new_ SWIFT_SYMBOL("s:13CloneableCore10TrackStateO3newyA2CmF"),
    tracked SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7trackedyA2CmF"),
    lost SWIFT_SYMBOL("s:13CloneableCore10TrackStateO4lostyA2CmF"),
    removed SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7removedyA2CmF"),
    unknown SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_new {  // impl struct for case new
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::new_;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } new_ SWIFT_SYMBOL("s:13CloneableCore10TrackStateO3newyA2CmF");
  SWIFT_INLINE_THUNK bool isNew_() const;

  inline const static struct _impl_tracked {  // impl struct for case tracked
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tracked;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } tracked SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7trackedyA2CmF");
  SWIFT_INLINE_THUNK bool isTracked() const;

  inline const static struct _impl_lost {  // impl struct for case lost
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lost;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } lost SWIFT_SYMBOL("s:13CloneableCore10TrackStateO4lostyA2CmF");
  SWIFT_INLINE_THUNK bool isLost() const;

  inline const static struct _impl_removed {  // impl struct for case removed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::removed;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } removed SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7removedyA2CmF");
  SWIFT_INLINE_THUNK bool isRemoved() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } unknown SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore10TrackStateO3newyA2CmFWC) return cases::new_;
    if (tag == _impl::$s13CloneableCore10TrackStateO7trackedyA2CmFWC) return cases::tracked;
    if (tag == _impl::$s13CloneableCore10TrackStateO4lostyA2CmFWC) return cases::lost;
    if (tag == _impl::$s13CloneableCore10TrackStateO7removedyA2CmFWC) return cases::removed;
    if (tag == _impl::$s13CloneableCore10TrackStateO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<TrackState> init(swift::Int rawValue) SWIFT_SYMBOL("s:13CloneableCore10TrackStateO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:13CloneableCore10TrackStateO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK TrackState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK TrackState _make() noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return TrackState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_TrackState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10TrackStateOD;
  static inline constexpr $s13CloneableCore10TrackStateOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_TrackState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(TrackState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const TrackState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER TrackState returnNewValue(T callable) {
    auto result = TrackState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::TrackState> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10TrackStateOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::TrackState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::TrackState> = true;
template<>
struct implClassFor<CloneableCore::TrackState> { using type = CloneableCore::_impl::_impl_TrackState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




/// The singleton class that acts as a bridge to communicate to the components
class SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC") WorkflowFramework;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::WorkflowFramework> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_WorkflowFramework;
// Type metadata accessor for WorkflowFramework
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17WorkflowFrameworkCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC") WorkflowFramework : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getActiveUIComponent() SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvp");
  SWIFT_INLINE_THUNK void setActiveUIComponent(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvp");
protected:
  SWIFT_INLINE_THUNK WorkflowFramework(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_WorkflowFramework;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17WorkflowFrameworkCD;
  static inline constexpr $s13CloneableCore17WorkflowFrameworkCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_WorkflowFramework {
public:
static SWIFT_INLINE_THUNK WorkflowFramework makeRetained(void * _Nonnull ptr) noexcept { return WorkflowFramework(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::WorkflowFramework> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17WorkflowFrameworkCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::WorkflowFramework> { using type = CloneableCore::_impl::_impl_WorkflowFramework; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {











class SWIFT_SYMBOL("s:13CloneableCore3XMLC8AccessorO") Accessor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::Accessor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// Director class to parse and access XML document.
/// You can parse XML docuemnts with parse() method and get the accessor.
/// <h3>Example</h3>
/// \code
///    let string = "<ResultSet><Result><Hit index="1"><Name>ほげ</Name></Hit><Hit index="2"><Name>ふが</Name></Hit></Result></ResultSet>"
///    xml = XML.parse(string)
///    let text = xml["ResultSet"]["Result"]["Hit"][0]["Name"].text {
///        println("exsists path & text")
///    }
///
///    let text = xml["ResultSet", "Result", "Hit", 0, "Name"].text {
///        println("exsists path & text")
///    }
///
///    let attributes = xml["ResultSet", "Result", "Hit", 0, "Name"].attributes {
///        println("exsists path & attributes")
///    }
///
///    for hit in xml["ResultSet", "Result", "Hit"] {
///        println("enumarate existing element")
///    }
///
///    switch xml["ResultSet", "Result", "TypoKey"] {
///    case .Failure(let error):
///        println(error)
///    case .SingleElement(_), .Sequence(_):
///        println("success parse")
///    }
///
/// \endcode
class SWIFT_SYMBOL("s:13CloneableCore3XMLC") XML;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XML> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XML;
// Type metadata accessor for XML
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore3XMLCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore3XMLC") XML : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK XML(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XML;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore3XMLCD;
  static inline constexpr $s13CloneableCore3XMLCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XML {
public:
static SWIFT_INLINE_THUNK XML makeRetained(void * _Nonnull ptr) noexcept { return XML(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XML> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore3XMLCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XML> { using type = CloneableCore::_impl::_impl_XML; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {





class SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV") XMLAttribute;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLAttribute> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLAttribute;

// Type metadata accessor for XMLAttribute
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore12XMLAttributeVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV") XMLAttribute final {
public:
  SWIFT_INLINE_THUNK ~XMLAttribute() noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK XMLAttribute(const XMLAttribute &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK XMLAttribute &operator =(const XMLAttribute &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK XMLAttribute &operator =(XMLAttribute &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER XMLAttribute(XMLAttribute &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getName() const SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV4nameSSvp");
  SWIFT_INLINE_THUNK swift::String getText() const SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV4textSSvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK XMLAttribute(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK XMLAttribute _make() noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return XMLAttribute(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_XMLAttribute;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore12XMLAttributeVD;
  static inline constexpr $s13CloneableCore12XMLAttributeVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLAttribute {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(XMLAttribute &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const XMLAttribute &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER XMLAttribute returnNewValue(T callable) {
    auto result = XMLAttribute::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLAttribute> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore12XMLAttributeVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::XMLAttribute> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::XMLAttribute> = true;
template<>
struct implClassFor<CloneableCore::XMLAttribute> { using type = CloneableCore::_impl::_impl_XMLAttribute; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






/// Models an XML element, including name, text and attributes
class SWIFT_SYMBOL("s:13CloneableCore10XMLElementC") XMLElement;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLElement> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLElement;
// Type metadata accessor for XMLElement
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10XMLElementCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10XMLElementC") XMLElement : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::String getName() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC4nameSSvp");
  SWIFT_INLINE_THUNK bool getCaseInsensitive() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC15caseInsensitiveSbvp");
/// Find an attribute by name
  SWIFT_INLINE_THUNK swift::Optional<XMLAttribute> attribute(const swift::String& name) SWIFT_SYMBOL("s:13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tF");
  SWIFT_INLINE_THUNK swift::String getText() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC4textSSvp");
  SWIFT_INLINE_THUNK swift::String getRecursiveText() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC13recursiveTextSSvp");
  SWIFT_INLINE_THUNK swift::String getInnerXML() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC8innerXMLSSvp");
protected:
  SWIFT_INLINE_THUNK XMLElement(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XMLElement;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10XMLElementCD;
  static inline constexpr $s13CloneableCore10XMLElementCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLElement {
public:
static SWIFT_INLINE_THUNK XMLElement makeRetained(void * _Nonnull ptr) noexcept { return XMLElement(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLElement> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10XMLElementCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XMLElement> { using type = CloneableCore::_impl::_impl_XMLElement; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore10XMLIndexerO") XMLIndexer;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLIndexer> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// Simple XML parser
class SWIFT_SYMBOL("s:13CloneableCore7XMLHashC") XMLHash;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLHash> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLHash;
// Type metadata accessor for XMLHash
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore7XMLHashCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore7XMLHashC") XMLHash : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK XMLHash(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XMLHash;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore7XMLHashCD;
  static inline constexpr $s13CloneableCore7XMLHashCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLHash {
public:
static SWIFT_INLINE_THUNK XMLHash makeRetained(void * _Nonnull ptr) noexcept { return XMLHash(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLHash> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore7XMLHashCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XMLHash> { using type = CloneableCore::_impl::_impl_XMLHash; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



/// Parser options
class SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC") XMLHashOptions;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLHashOptions> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLHashOptions;
// Type metadata accessor for XMLHashOptions
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore14XMLHashOptionsCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC") XMLHashOptions : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK bool getShouldProcessLazily() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvp");
  SWIFT_INLINE_THUNK void setShouldProcessLazily(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvp");
  SWIFT_INLINE_THUNK bool getShouldProcessNamespaces() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvp");
  SWIFT_INLINE_THUNK void setShouldProcessNamespaces(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvp");
  SWIFT_INLINE_THUNK bool getCaseInsensitive() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvp");
  SWIFT_INLINE_THUNK void setCaseInsensitive(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvp");
  SWIFT_INLINE_THUNK bool getDetectParsingErrors() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvp");
  SWIFT_INLINE_THUNK void setDetectParsingErrors(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvp");
protected:
  SWIFT_INLINE_THUNK XMLHashOptions(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XMLHashOptions;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore14XMLHashOptionsCD;
  static inline constexpr $s13CloneableCore14XMLHashOptionsCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLHashOptions {
public:
static SWIFT_INLINE_THUNK XMLHashOptions makeRetained(void * _Nonnull ptr) noexcept { return XMLHashOptions(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLHashOptions> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore14XMLHashOptionsCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XMLHashOptions> { using type = CloneableCore::_impl::_impl_XMLHashOptions; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {










  SWIFT_INLINE_THUNK swift::String APICall::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore7APICallV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String APICall::getRelatedID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore7APICallV9relatedIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelToSync APICall::getModelToSync() const {
  return _impl::_impl_ModelToSync::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore7APICallV11modelToSyncAA05ModeleF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK APICallStatus APICall::getStatus() const {
  return _impl::_impl_APICallStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore7APICallV6statusAA0C6StatusOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void APICall::setStatus(const APICallStatus& value) {
  return _impl::$s13CloneableCore7APICallV6statusAA0C6StatusOvs(_impl::_impl_APICallStatus::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Pending::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO7PendingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isPending() const {
    return *this == APICallStatus::Pending;
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Syncing::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO7SyncingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isSyncing() const {
    return *this == APICallStatus::Syncing;
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Synced::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO6SyncedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isSynced() const {
    return *this == APICallStatus::Synced;
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Error::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO5ErroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isError() const {
    return *this == APICallStatus::Error;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isUnknownDefault() const {
    return *this == APICallStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<APICallStatus> APICallStatus::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<APICallStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore13APICallStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String APICallStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore13APICallStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_invalidReturnType::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO17invalidReturnTypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isInvalidReturnType() const {
    return *this == APIError::invalidReturnType;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_couldntAuthenticateRequest::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isCouldntAuthenticateRequest() const {
    return *this == APIError::couldntAuthenticateRequest;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_apiManagerNotSet::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO16apiManagerNotSetyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isApiManagerNotSet() const {
    return *this == APIError::apiManagerNotSet;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_serverUnreachable::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO17serverUnreachableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isServerUnreachable() const {
    return *this == APIError::serverUnreachable;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_invalidResponse::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO15invalidResponseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isInvalidResponse() const {
    return *this == APIError::invalidResponse;
  }
  SWIFT_INLINE_THUNK  bool APIError::isUnknownDefault() const {
    return *this == APIError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int APIError::getHashValue() const {
  return _impl::$s13CloneableCore8APIErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::isComplex() const {
  return _impl::$s13CloneableCore03AnyA4DataV9isComplexSbyF(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> AnyCloneableData::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore03AnyA4DataV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::isEqual(const AnyCloneableData& to) const {
  return _impl::$s13CloneableCore03AnyA4DataV7isEqual2toSbAC_tF(_impl::_impl_AnyCloneableData::getOpaquePointer(to), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> AnyCloneableData::init(const JXValue& jxValue) {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV4fromACSg5JXKit7JXValueC_tcfC(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(jxValue));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AnyCloneableData::getStringValue() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore03AnyA4DataV14getStringValueSSSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> AnyCloneableData::getBoolValue() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint8_t_0_1(result, _impl::$s13CloneableCore03AnyA4DataV12getBoolValueSbSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<AnyCloneableData>> AnyCloneableData::getArrayValue() const {
  return swift::_impl::_impl_Optional<swift::Array<AnyCloneableData>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore03AnyA4DataV13getArrayValueSayACGSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableBoundingBox> AnyCloneableData::getBoundingBoxValue() const {
  return swift::_impl::_impl_Optional<CloneableBoundingBox>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore03AnyA4DataV19getBoundingBoxValueAA0afG0CSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> AnyCloneableData::getDepthMap() const {
  return swift::_impl::_impl_Optional<CloneableDepthMap>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV11getDepthMapAA0afG0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<double> AnyCloneableData::getNumberValue() const {
  return swift::_impl::_impl_Optional<double>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore03AnyA4DataV14getNumberValueSdSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> AnyCloneableData::getDepthMapValue() const {
  return swift::_impl::_impl_Optional<CloneableDepthMap>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV16getDepthMapValueAA0afG0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AnyCloneableData::getFileExtension() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore03AnyA4DataV16getFileExtensionSSSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> AnyCloneableData::getObjectFieldValue(const swift::String& fieldName) const {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV19getObjectFieldValue9fieldNameACSgSS_tF(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fieldName)), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::number(double value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6numberyACSdFZ(result, value);
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::array(const swift::Array<AnyCloneableData>& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV5arrayyACSayACGFZ(result, _impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<AnyCloneableData>::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::status(const swift::String& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6statusyACSSFZ(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::string(const swift::String& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6stringyACSSFZ(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::boolean(bool value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV7booleanyACSbFZ(result, value);
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::boundingbox(const CloneableBoundingBox& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV11boundingboxyAcA0A11BoundingBoxCFZ(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(value));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::object(const swift::String& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6objectyACSSFZ(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getBindingStringValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV18bindingStringValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingStringValue(const swift::String& newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingStringValueSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double AnyCloneableData::getBindingNumberValue() const {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingNumberValueSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingNumberValue(double newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingNumberValueSdvs(newValue, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::getBindingBooleanValue() const {
  return _impl::$s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingBooleanValue(bool newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvs(newValue, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getBindingStatusValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV18bindingStatusValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingStatusValue(const swift::String& newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingStatusValueSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::isArray() const {
  return _impl::$s13CloneableCore03AnyA4DataV7isArraySbyF(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AnyCloneableData::getArrayTypeAsString() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore03AnyA4DataV20getArrayTypeAsStringSSSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError AnyCloneableDataError::_impl_typeNotRegistered::operator()(const swift::String& val) const {
    auto result = AnyCloneableDataError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnyCloneableDataError::isTypeNotRegistered() const {
    return *this == AnyCloneableDataError::typeNotRegistered;
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableDataError::getTypeNotRegistered() const {
    if (!isTypeNotRegistered()) abort();
    alignas(AnyCloneableDataError) unsigned char buffer[sizeof(AnyCloneableDataError)];
    auto *thisCopy = new(buffer) AnyCloneableDataError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError AnyCloneableDataError::_impl_failedInit::operator()() const {
    auto result = AnyCloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore03AnyA9DataErrorO10failedInityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnyCloneableDataError::isFailedInit() const {
    return *this == AnyCloneableDataError::failedInit;
  }
  SWIFT_INLINE_THUNK  bool AnyCloneableDataError::isUnknownDefault() const {
    return *this == AnyCloneableDataError::unknownDefault;
  }
  SWIFT_INLINE_THUNK AuthenticationError AuthenticationError::_impl_loginError::operator()() const {
    auto result = AuthenticationError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19AuthenticationErrorO05loginD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isLoginError() const {
    return *this == AuthenticationError::loginError;
  }
  SWIFT_INLINE_THUNK AuthenticationError AuthenticationError::_impl_notLoggedIn::operator()() const {
    auto result = AuthenticationError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isNotLoggedIn() const {
    return *this == AuthenticationError::notLoggedIn;
  }
  SWIFT_INLINE_THUNK AuthenticationError AuthenticationError::_impl_cannotRefreshUserData::operator()() const {
    auto result = AuthenticationError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isCannotRefreshUserData() const {
    return *this == AuthenticationError::cannotRefreshUserData;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isUnknownDefault() const {
    return *this == AuthenticationError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int AuthenticationError::getHashValue() const {
  return _impl::$s13CloneableCore19AuthenticationErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableArray::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ArrayV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableArray CloneableArray::init(const swift::Array<AnyCloneableData>& data) {
  return _impl::_impl_CloneableArray::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A5ArrayV4dataACSayAA03AnyA4DataVG_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<AnyCloneableData>::getOpaquePointer(data)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableArray::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ArrayV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableArray::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ArrayV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableArray::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A5ArrayV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_offline::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO7offlineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isOffline() const {
    return *this == CloneableAuthStatus::offline;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_not_authenticated::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isNot_authenticated() const {
    return *this == CloneableAuthStatus::not_authenticated;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_auth_error::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO10auth_erroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isAuth_error() const {
    return *this == CloneableAuthStatus::auth_error;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_authenticating::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO14authenticatingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isAuthenticating() const {
    return *this == CloneableAuthStatus::authenticating;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_authenticated::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO13authenticatedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isAuthenticated() const {
    return *this == CloneableAuthStatus::authenticated;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isUnknownDefault() const {
    return *this == CloneableAuthStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableAuthStatus::getHashValue() const {
  return _impl::$s13CloneableCore0A10AuthStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableBoolean::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A7BooleanV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableBoolean::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A7BooleanV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableBoolean CloneableBoolean::init(bool value) {
  return _impl::_impl_CloneableBoolean::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A7BooleanVyACSbcfC(result, value);
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableBoolean::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A7BooleanV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableBoolean::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A7BooleanV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableColor::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ColorV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK float CloneableColor::getR() const {
  return _impl::$s13CloneableCore0A5ColorV1rSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setR(float value) {
  return _impl::$s13CloneableCore0A5ColorV1rSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CloneableColor::getG() const {
  return _impl::$s13CloneableCore0A5ColorV1gSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setG(float value) {
  return _impl::$s13CloneableCore0A5ColorV1gSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CloneableColor::getB() const {
  return _impl::$s13CloneableCore0A5ColorV1bSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setB(float value) {
  return _impl::$s13CloneableCore0A5ColorV1bSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CloneableColor::getA() const {
  return _impl::$s13CloneableCore0A5ColorV1aSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setA(float value) {
  return _impl::$s13CloneableCore0A5ColorV1aSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableColor::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ColorV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableColor::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ColorV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableColor::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A5ColorV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableConnectionState::_impl_connecting::operator()() const {
    auto result = CloneableConnectionState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A15ConnectionStateO10connectingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isConnecting() const {
    return *this == CloneableConnectionState::connecting;
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableConnectionState::_impl_connected::operator()() const {
    auto result = CloneableConnectionState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A15ConnectionStateO9connectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isConnected() const {
    return *this == CloneableConnectionState::connected;
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableConnectionState::_impl_disconnected::operator()() const {
    auto result = CloneableConnectionState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A15ConnectionStateO12disconnectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isDisconnected() const {
    return *this == CloneableConnectionState::disconnected;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isUnknownDefault() const {
    return *this == CloneableConnectionState::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableConnectionState::getHashValue() const {
  return _impl::$s13CloneableCore0A15ConnectionStateO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableCore::getAppID() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCoreAAC5appIDSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setAppID(const swift::String& value) {
  return _impl::$s13CloneableCoreAAC5appIDSSvsTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableCore::getConnection_state() {
  return _impl::_impl_CloneableConnectionState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvgTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setConnection_state(const CloneableConnectionState& value) {
  return _impl::$s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvsTj(_impl::_impl_CloneableConnectionState::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableCore::getAuth_status() {
  return _impl::_impl_CloneableAuthStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvgTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setAuth_status(const CloneableAuthStatus& value) {
  return _impl::$s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvsTj(_impl::_impl_CloneableAuthStatus::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableCore::getSync_status() {
  return _impl::_impl_CloneableSyncStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvgTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setSync_status(const CloneableSyncStatus& value) {
  return _impl::$s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvsTj(_impl::_impl_CloneableSyncStatus::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableCore::signOut() {
  return _impl::$s13CloneableCoreAAC7signOutyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK DataManager CloneableCore::getDataCache() {
  return _impl::_impl_DataManager::makeRetained(_impl::$s13CloneableCoreAAC12getDataCacheAA0D7ManagerCyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableCore::getConnectionStatus() {
  return _impl::_impl_CloneableConnectionState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyFTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK LocalCacheManager CloneableCore::cache() {
  return _impl::_impl_LocalCacheManager::makeRetained(_impl::$s13CloneableCoreAAC5cacheAA17LocalCacheManagerCyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT CloneableCore::getRuntimeEnvironment() {
  return _impl::_impl_RUNTIME_ENVIRONMENT::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyFTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::startWorkflow(const swift::String& workflowId) {
  return _impl::$s13CloneableCoreAAC13startWorkflow10workflowIdySS_tFTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(workflowId)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableCredentials CloneableCredentials::_impl_auth0::operator()(const swift::String& val) const {
    auto result = CloneableCredentials::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A11CredentialsO5auth0yACSS_tcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableCredentials::isAuth0() const {
    return *this == CloneableCredentials::auth0;
  }
  SWIFT_INLINE_THUNK swift::String CloneableCredentials::getAuth0() const {
    if (!isAuth0()) abort();
    alignas(CloneableCredentials) unsigned char buffer[sizeof(CloneableCredentials)];
    auto *thisCopy = new(buffer) CloneableCredentials(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK CloneableCredentials CloneableCredentials::_impl_apiKey::operator()(const swift::String& val) const {
    auto result = CloneableCredentials::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableCredentials::isApiKey() const {
    return *this == CloneableCredentials::apiKey;
  }
  SWIFT_INLINE_THUNK swift::String CloneableCredentials::getApiKey() const {
    if (!isApiKey()) abort();
    alignas(CloneableCredentials) unsigned char buffer[sizeof(CloneableCredentials)];
    auto *thisCopy = new(buffer) CloneableCredentials(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool CloneableCredentials::isUnknownDefault() const {
    return *this == CloneableCredentials::unknownDefault;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_invalidValue::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO12invalidValueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isInvalidValue() const {
    return *this == CloneableDataError::invalidValue;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_implementationMissing::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO21implementationMissingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isImplementationMissing() const {
    return *this == CloneableDataError::implementationMissing;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_errorLoadingFromFile::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isErrorLoadingFromFile() const {
    return *this == CloneableDataError::errorLoadingFromFile;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_errorSavingToFile::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isErrorSavingToFile() const {
    return *this == CloneableDataError::errorSavingToFile;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isUnknownDefault() const {
    return *this == CloneableDataError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableDataError::getHashValue() const {
  return _impl::$s13CloneableCore0A9DataErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableDataObject::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A10DataObjectV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableDataObject CloneableDataObject::init(const swift::String& data) {
  return _impl::_impl_CloneableDataObject::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A10DataObjectV4dataACSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(data)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDataObject::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A10DataObjectV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDataObject::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A10DataObjectV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableDataObject::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A10DataObjectV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDate::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4DateV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDate::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4DateV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDate::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4DateV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableDate::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A4DateV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDepthMap::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8DepthMapV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool CloneableDepthMap::getComplexType() const {
  return _impl::$s13CloneableCore0A8DepthMapV11complexTypeSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setComplexType(bool value) {
  return _impl::$s13CloneableCore0A8DepthMapV11complexTypeSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<swift::Array<float>> CloneableDepthMap::getDepthMap() const {
  return swift::_impl::_impl_Array<swift::Array<float>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setDepthMap(const swift::Array<swift::Array<float>>& value) {
  return _impl::$s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<swift::Array<float>>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<swift::Array<swift::Array<float>>> CloneableDepthMap::getUnprojectedDepth() const {
  return swift::_impl::_impl_Array<swift::Array<swift::Array<float>>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setUnprojectedDepth(const swift::Array<swift::Array<swift::Array<float>>>& value) {
  return _impl::$s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<swift::Array<swift::Array<float>>>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::Array<swift::Int>>> CloneableDepthMap::getConfidenceMap() const {
  return swift::_impl::_impl_Optional<swift::Array<swift::Array<swift::Int>>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setConfidenceMap(const swift::Optional<swift::Array<swift::Array<swift::Int>>>& value) {
  return _impl::$s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<swift::Array<swift::Int>>>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableDepthMap::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8DepthMapV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDepthMap::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8DepthMapV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableDepthMap::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A8DepthMapV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK OS_dispatch_queue *_Nonnull CloneableFileSyncEngine::getSyncedFileQueue() {
return (__bridge_transfer OS_dispatch_queue *)(__bridge void *)_impl::$s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::setSyncedFileQueue(OS_dispatch_queue *_Nonnull value) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int CloneableFileSyncEngine::getTotalFiles() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC10totalFilesSivgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::setTotalFiles(swift::Int value) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC10totalFilesSivsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int CloneableFileSyncEngine::getFilesSynced() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC11filesSyncedSivgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::setFilesSynced(swift::Int value) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC11filesSyncedSivsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::processAndSyncObjectsNonCompleteRequests() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> CloneableFileSyncEngine::getCloneableDataFromFile(const swift::String& fileName, const swift::String& fileType, const swift::String& displayName) {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StFTj(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fileName)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fileType)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(displayName)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK bool CloneableFileSyncEngine::fileExistsLocally(const swift::String& fileName) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tFTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fileName)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int CloneableFileSyncEngine::getNumberOfDownloadedFiles() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_all::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3allyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isAll() const {
    return *this == CloneableFileType::all;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_image::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO5imageyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isImage() const {
    return *this == CloneableFileType::image;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_pdf::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3pdfyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isPdf() const {
    return *this == CloneableFileType::pdf;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_iosAIModel::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO10iosAIModelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isIosAIModel() const {
    return *this == CloneableFileType::iosAIModel;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_shapefile::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO9shapefileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isShapefile() const {
    return *this == CloneableFileType::shapefile;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_kml::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3kmlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isKml() const {
    return *this == CloneableFileType::kml;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_kmz::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3kmzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isKmz() const {
    return *this == CloneableFileType::kmz;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_geotiff::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO7geotiffyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isGeotiff() const {
    return *this == CloneableFileType::geotiff;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_raster::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO6rasteryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isRaster() const {
    return *this == CloneableFileType::raster;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isUnknownDefault() const {
    return *this == CloneableFileType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String CloneableFileType::getContentType(const swift::Optional<swift::String>& fileExtension) const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8FileTypeO010getContentD013fileExtensionS2SSg_tF(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileExtension)), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableFileType::getFileExtension(const swift::Optional<swift::String>& contentType) const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8FileTypeO03getC9Extension07contentD0S2SSg_tF(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(contentType)), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableFileType> CloneableFileType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<CloneableFileType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A8FileTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableFileType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8FileTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::convertKMLToString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV18convertKMLToStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableKML::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A3KMLV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setId(const swift::String& value) {
  return _impl::$s13CloneableCore0A8LocationV2idSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double CloneableLocation::getLatitude() const {
  return _impl::$s13CloneableCore0A8LocationV8latitudeSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setLatitude(double value) {
  return _impl::$s13CloneableCore0A8LocationV8latitudeSdvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double CloneableLocation::getLongitude() const {
  return _impl::$s13CloneableCore0A8LocationV9longitudeSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setLongitude(double value) {
  return _impl::$s13CloneableCore0A8LocationV9longitudeSdvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<double> CloneableLocation::getAltitude() const {
  return swift::_impl::_impl_Optional<double>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore0A8LocationV8altitudeSdSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setAltitude(const swift::Optional<double>& value) {
  return _impl::$s13CloneableCore0A8LocationV8altitudeSdSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<double>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CloneableLocation::getComplexType() const {
  return _impl::$s13CloneableCore0A8LocationV11complexTypeSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setComplexType(bool value) {
  return _impl::$s13CloneableCore0A8LocationV11complexTypeSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::simpleDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV17simpleDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableLocation::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A8LocationV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLog::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3LogV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setId(const swift::String& value) {
  return _impl::$s13CloneableCore0A3LogV2idSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK LogLevel CloneableLog::getLogLevel() const {
  return _impl::_impl_LogLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV8logLevelAA0cE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setLogLevel(const LogLevel& value) {
  return _impl::$s13CloneableCore0A3LogV8logLevelAA0cE0Ovs(_impl::_impl_LogLevel::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableLog::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3LogV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setMessage(const swift::String& value) {
  return _impl::$s13CloneableCore0A3LogV7messageSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<LoggerWorkflowInformation> CloneableLog::getWorkflow() const {
  return swift::_impl::_impl_Optional<LoggerWorkflowInformation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setWorkflow(const swift::Optional<LoggerWorkflowInformation>& value) {
  return _impl::$s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvs(swift::_impl::_impl_Optional<LoggerWorkflowInformation>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<LoggerComponentInformation> CloneableLog::getComponent() const {
  return swift::_impl::_impl_Optional<LoggerComponentInformation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setComponent(const swift::Optional<LoggerComponentInformation>& value) {
  return _impl::$s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvs(swift::_impl::_impl_Optional<LoggerComponentInformation>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DisplayMode> CloneableLog::getDisplayMode() const {
  return swift::_impl::_impl_Optional<DisplayMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setDisplayMode(const swift::Optional<DisplayMode>& value) {
  return _impl::$s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvs(swift::_impl::_impl_Optional<DisplayMode>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<CloneableLog> CloneableLogger::getLogs() {
  return swift::_impl::_impl_Array<CloneableLog>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore0A6LoggerC7getLogsSayAA0A3LogVGyFZ(swift::TypeMetadataTrait<CloneableLogger>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLogger::clearLogs() {
  return _impl::$s13CloneableCore0A6LoggerC9clearLogsyyFZ(swift::TypeMetadataTrait<CloneableLogger>::getTypeMetadata());
  }
  SWIFT_INLINE_THUNK void CloneableLogger::notifyObservers(const CloneableLog& log) {
  return _impl::$s13CloneableCore0A6LoggerC15notifyObservers3logyAA0A3LogV_tFZ(_impl::_impl_CloneableLog::getOpaquePointer(log), swift::TypeMetadataTrait<CloneableLogger>::getTypeMetadata());
  }
  SWIFT_INLINE_THUNK swift::String CloneableNumber::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6NumberV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableNumber::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A6NumberV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableNumber CloneableNumber::init(double value) {
  return _impl::_impl_CloneableNumber::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A6NumberVyACSdcfC(result, value);
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableNumber::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6NumberV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableNumber::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6NumberV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableStatus::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StatusV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableStatus::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A6StatusV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableStatus CloneableStatus::init(const swift::String& json) {
  return _impl::_impl_CloneableStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A6StatusV4jsonACSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(json)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableStatus::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StatusV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableStatus::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StatusV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableString::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StringV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableString::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A6StringV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableString CloneableString::init(const swift::String& json) {
  return _impl::_impl_CloneableString::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A6StringV4jsonACSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(json)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableString::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StringV09getTypeAsC0SSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableString::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StringV03getC11DescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_notAuthenticated::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isNotAuthenticated() const {
    return *this == CloneableSyncError::notAuthenticated;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_fileSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO04filecD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isFileSyncError() const {
    return *this == CloneableSyncError::fileSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_objectSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO06objectcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isObjectSyncError() const {
    return *this == CloneableSyncError::objectSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_workflowSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO08workflowcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isWorkflowSyncError() const {
    return *this == CloneableSyncError::workflowSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_completedWorkflowSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isCompletedWorkflowSyncError() const {
    return *this == CloneableSyncError::completedWorkflowSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_notificationSyncSerror::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isNotificationSyncSerror() const {
    return *this == CloneableSyncError::notificationSyncSerror;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_dataObjectSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isDataObjectSyncError() const {
    return *this == CloneableSyncError::dataObjectSyncError;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isUnknownDefault() const {
    return *this == CloneableSyncError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableSyncError::getHashValue() const {
  return _impl::$s13CloneableCore0A9SyncErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_not_synced::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO10not_syncedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isNot_synced() const {
    return *this == CloneableSyncStatus::not_synced;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_syncing::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO7syncingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isSyncing() const {
    return *this == CloneableSyncStatus::syncing;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_synced::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO6syncedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isSynced() const {
    return *this == CloneableSyncStatus::synced;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_sync_error::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO10sync_erroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isSync_error() const {
    return *this == CloneableSyncStatus::sync_error;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isUnknownDefault() const {
    return *this == CloneableSyncStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableSyncStatus::getHashValue() const {
  return _impl::$s13CloneableCore0A10SyncStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableUUID::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4UUIDV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableUUID::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4UUIDV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableUUID::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4UUIDV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableUUID::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A4UUIDV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType CompletedWorkflowCallType::_impl_startWorkflow::operator()() const {
    auto result = CompletedWorkflowCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CompletedWorkflowCallType::isStartWorkflow() const {
    return *this == CompletedWorkflowCallType::startWorkflow;
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType CompletedWorkflowCallType::_impl_updateWorkflow::operator()() const {
    auto result = CompletedWorkflowCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CompletedWorkflowCallType::isUpdateWorkflow() const {
    return *this == CompletedWorkflowCallType::updateWorkflow;
  }
  SWIFT_INLINE_THUNK  bool CompletedWorkflowCallType::isUnknownDefault() const {
    return *this == CompletedWorkflowCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<CompletedWorkflowCallType> CompletedWorkflowCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<CompletedWorkflowCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore25CompletedWorkflowCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CompletedWorkflowCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore25CompletedWorkflowCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String Component::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9ComponentV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void Component::setId(const swift::String& value) {
  return _impl::$s13CloneableCore9ComponentV2idSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentType Component::getType() const {
  return _impl::_impl_ComponentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore9ComponentV4typeAA0C4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void Component::setType(const ComponentType& value) {
  return _impl::$s13CloneableCore9ComponentV4typeAA0C4TypeOvs(_impl::_impl_ComponentType::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<ComponentRuntime> Component::getRuntimes() const {
  return swift::_impl::_impl_Array<ComponentRuntime>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void Component::setRuntimes(const swift::Array<ComponentRuntime>& value) {
  return _impl::$s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<ComponentRuntime>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_ios::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO3iosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isIos() const {
    return *this == ComponentRuntime::ios;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_cloud::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO5cloudyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isCloud() const {
    return *this == ComponentRuntime::cloud;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_web::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO3webyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isWeb() const {
    return *this == ComponentRuntime::web;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_android::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO7androidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isAndroid() const {
    return *this == ComponentRuntime::android;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_edge_linux::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isEdge_linux() const {
    return *this == ComponentRuntime::edge_linux;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isUnknownDefault() const {
    return *this == ComponentRuntime::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ComponentRuntime> ComponentRuntime::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<ComponentRuntime>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore16ComponentRuntimeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ComponentRuntime::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16ComponentRuntimeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_ios_workflow_start::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isIos_workflow_start() const {
    return *this == ComponentType::ios_workflow_start;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_ios_workflow_end::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isIos_workflow_end() const {
    return *this == ComponentType::ios_workflow_end;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_cloud_workflow_start::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isCloud_workflow_start() const {
    return *this == ComponentType::cloud_workflow_start;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_cloud_workflow_end::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isCloud_workflow_end() const {
    return *this == ComponentType::cloud_workflow_end;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_ui::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO2uiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isUi() const {
    return *this == ComponentType::ui;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_processing::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO10processingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isProcessing() const {
    return *this == ComponentType::processing;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_object::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO6objectyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isObject() const {
    return *this == ComponentType::object;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_logical::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO7logicalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isLogical() const {
    return *this == ComponentType::logical;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_file_data::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO9file_datayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isFile_data() const {
    return *this == ComponentType::file_data;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isUnknownDefault() const {
    return *this == ComponentType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ComponentType> ComponentType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<ComponentType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore13ComponentTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ComponentType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore13ComponentTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void Components::addComponent(const Component& component) {
  return _impl::$s13CloneableCore10ComponentsC12addComponent9componentyAA0E0V_tFZ(_impl::_impl_Component::getOpaquePointer(component), swift::TypeMetadataTrait<Components>::getTypeMetadata());
  }
  SWIFT_INLINE_THUNK swift::String DataInput::getComponentDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9DataInputV18componentDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setComponentDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore9DataInputV18componentDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataInput::getInputDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9DataInputV14inputDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setInputDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore9DataInputV14inputDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataInput::getInputStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9DataInputV13inputStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setInputStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore9DataInputV13inputStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AnyCloneableData DataInput::getData() const {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore9DataInputV4dataAA03AnyaC0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setData(const AnyCloneableData& value) {
  return _impl::$s13CloneableCore9DataInputV4dataAA03AnyaC0Vvs(_impl::_impl_AnyCloneableData::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> DataInput::getBatch() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore9DataInputV5batchSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setBatch(const swift::Optional<swift::Int>& value) {
  return _impl::$s13CloneableCore9DataInputV5batchSiSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool DataInput::getCurrentBatch() const {
  return _impl::$s13CloneableCore9DataInputV12currentBatchSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DataInput::setCurrentBatch(bool value) {
  return _impl::$s13CloneableCore9DataInputV12currentBatchSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CloneableFileSyncEngine DataManager::getFile_sync_engine() {
  return _impl::_impl_CloneableFileSyncEngine::makeRetained(_impl::$s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  }
  SWIFT_INLINE_THUNK void DataManager::setFile_sync_engine(const CloneableFileSyncEngine& value) {
  return _impl::$s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvsTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void DataManager::clearFileCache() {
  return _impl::$s13CloneableCore11DataManagerC14clearFileCacheyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DataManager::getUserId() {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore11DataManagerC9getUserIdSSSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DataManager::canProceed(const swift::String& auth0_jwt) {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tFTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(auth0_jwt)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK DataObjectCallType DataObjectCallType::_impl_createRequest::operator()() const {
    auto result = DataObjectCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore18DataObjectCallTypeO13createRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataObjectCallType::isCreateRequest() const {
    return *this == DataObjectCallType::createRequest;
  }
  SWIFT_INLINE_THUNK DataObjectCallType DataObjectCallType::_impl_updateRequest::operator()() const {
    auto result = DataObjectCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataObjectCallType::isUpdateRequest() const {
    return *this == DataObjectCallType::updateRequest;
  }
  SWIFT_INLINE_THUNK  bool DataObjectCallType::isUnknownDefault() const {
    return *this == DataObjectCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DataObjectCallType> DataObjectCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<DataObjectCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore18DataObjectCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DataObjectCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore18DataObjectCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int DataOutput::getOutputCount() const {
  return _impl::$s13CloneableCore10DataOutputV11outputCountSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DataOutput::setOutputCount(swift::Int value) {
  return _impl::$s13CloneableCore10DataOutputV11outputCountSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getDynamicOutputID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV07dynamicD2IDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setDynamicOutputID(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV07dynamicD2IDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AnyCloneableData DataOutput::getData() const {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setData(const AnyCloneableData& value) {
  return _impl::$s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvs(_impl::_impl_AnyCloneableData::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getStaticComponentID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV17staticComponentIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setStaticComponentID(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV17staticComponentIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getDynamicComponentID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV18dynamicComponentIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setDynamicComponentID(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV18dynamicComponentIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getTypeDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV15typeDescriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setTypeDescription(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV15typeDescriptionSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentType DataOutput::getOutputComponentType() const {
  return _impl::_impl_ComponentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setOutputComponentType(const ComponentType& value) {
  return _impl::$s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovs(_impl::_impl_ComponentType::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<TargetInput> DataOutput::getTargetInput() const {
  return swift::_impl::_impl_Optional<TargetInput>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setTargetInput(const swift::Optional<TargetInput>& value) {
  return _impl::$s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvs(swift::_impl::_impl_Optional<TargetInput>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> DataOutput::getBatch() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore10DataOutputV5batchSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setBatch(const swift::Optional<swift::Int>& value) {
  return _impl::$s13CloneableCore10DataOutputV5batchSiSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DataOutput DataOutput::init(const AnyCloneableData& data, const swift::String& staticComponentID, const swift::String& dynamicComponentID, const swift::String& dynamicOutputID, const ComponentType& outputComponentType, const swift::Optional<TargetInput>& targetInput) {
  return _impl::_impl_DataOutput::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV4data17staticComponentID07dynamicgH00idH006outputG4Type11targetInputAcA03AnyaC0V_S3SAA0gK0OAA06TargetM0VSgtcfC(result, _impl::_impl_AnyCloneableData::getOpaquePointer(data), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(staticComponentID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(dynamicComponentID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(dynamicOutputID)), _impl::_impl_ComponentType::getOpaquePointer(outputComponentType), swift::_impl::_impl_Optional<TargetInput>::getOpaquePointer(targetInput));
  });
  }
  SWIFT_INLINE_THUNK DataInput DataOutput::convertToDataInput(bool firstCall) const {
  return _impl::_impl_DataInput::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV09convertToC5Input9firstCallAA0cG0VSb_tF(result, firstCall, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Connection> DatabaseManager::getConnection() {
  return swift::_impl::_impl_Optional<Connection>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void DatabaseManager::setConnection(const swift::Optional<Connection>& value) {
  return _impl::$s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvsTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8(swift::_impl::_impl_Optional<Connection>::getOpaquePointer(value)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_top::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO3topyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isTop() const {
    return *this == DisplayMode::top;
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_middle::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO6middleyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isMiddle() const {
    return *this == DisplayMode::middle;
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_drawer::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO6draweryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isDrawer() const {
    return *this == DisplayMode::drawer;
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_sheet::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO5sheetyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isSheet() const {
    return *this == DisplayMode::sheet;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isUnknownDefault() const {
    return *this == DisplayMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DisplayMode::getHashValue() const {
  return _impl::$s13CloneableCore11DisplayModeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileExtension() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileExtension(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV8fileNameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileName(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV8fileNameSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> FieldFileInformation::getFileSize() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore20FieldFileInformationV8fileSizeSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileSize(const swift::Optional<swift::Int>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV8fileSizeSiSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileType() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV8fileTypeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileType(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV8fileTypeSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileUrl() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV7fileUrlSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileUrl(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV7fileUrlSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getStorageAuthProviderName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setStorageAuthProviderName(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getStorageAuthProviderRefID() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setStorageAuthProviderRefID(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getStorageProvider() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV15storageProviderSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setStorageProvider(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV15storageProviderSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> FieldFileInformation::getOne_way_sync() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint8_t_0_1(result, _impl::$s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setOne_way_sync(const swift::Optional<bool>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvs(_impl::swift_interop_passDirect_CloneableCore_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK FieldFileInformation FieldFileInformation::init(const swift::Optional<swift::String>& fileExtension, const swift::Optional<swift::String>& fileName, const swift::Optional<swift::Int>& fileSize, const swift::Optional<swift::String>& fileType, const swift::Optional<swift::String>& fileUrl, const swift::Optional<swift::String>& storageAuthProviderName, const swift::Optional<swift::String>& storageAuthProviderRefID, const swift::Optional<swift::String>& storageProvider, const swift::Optional<bool>& one_way_sync) {
  return _impl::_impl_FieldFileInformation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore20FieldFileInformationV13fileExtension0F4Name0F4Size0F4Type0F3Url019storageAuthProviderH00lmN5RefID0lN012one_way_syncACSSSg_AMSiSgA5MSbSgtcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileExtension)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileName)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(fileSize)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileType)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileUrl)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(storageAuthProviderName)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(storageAuthProviderRefID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(storageProvider)), _impl::swift_interop_passDirect_CloneableCore_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(one_way_sync)));
  });
  }
  SWIFT_INLINE_THUNK FileInformationCallType FileInformationCallType::_impl_createFile::operator()() const {
    auto result = FileInformationCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore23FileInformationCallTypeO06createC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileInformationCallType::isCreateFile() const {
    return *this == FileInformationCallType::createFile;
  }
  SWIFT_INLINE_THUNK FileInformationCallType FileInformationCallType::_impl_updateUploadStatus::operator()() const {
    auto result = FileInformationCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileInformationCallType::isUpdateUploadStatus() const {
    return *this == FileInformationCallType::updateUploadStatus;
  }
  SWIFT_INLINE_THUNK  bool FileInformationCallType::isUnknownDefault() const {
    return *this == FileInformationCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<FileInformationCallType> FileInformationCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<FileInformationCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore23FileInformationCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileInformationCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore23FileInformationCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FileObserverToken::cancel() {
  return _impl::$s13CloneableCore17FileObserverTokenC6cancelyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRelation::_impl_object::operator()() const {
    auto result = FileSyncRelation::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16FileSyncRelationO6objectyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isObject() const {
    return *this == FileSyncRelation::object;
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRelation::_impl_workflow::operator()() const {
    auto result = FileSyncRelation::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16FileSyncRelationO8workflowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isWorkflow() const {
    return *this == FileSyncRelation::workflow;
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRelation::_impl_component::operator()() const {
    auto result = FileSyncRelation::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16FileSyncRelationO9componentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isComponent() const {
    return *this == FileSyncRelation::component;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isUnknownDefault() const {
    return *this == FileSyncRelation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<FileSyncRelation> FileSyncRelation::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<FileSyncRelation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore16FileSyncRelationO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRelation::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16FileSyncRelationO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRequest::getFileName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV8fileNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> FileSyncRequest::getData() const {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV4dataAA03AnyA4DataVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRequest::getFileRelation() const {
  return _impl::_impl_FileSyncRelation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV12fileRelationAA0cdG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CloneableFileType FileSyncRequest::getFileType() const {
  return _impl::_impl_CloneableFileType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV8fileTypeAA0acG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK bool FileSyncRequest::getOne_way_sync() const {
  return _impl::$s13CloneableCore15FileSyncRequestV12one_way_syncSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRequest::getUser() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV4userSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRequest::getCompany() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV7companySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FileSyncRequest::getTypeRefID() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV9typeRefIDSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::String>> FileSyncRequest::getRelatedDeployedWorkflowIDs() const {
  return swift::_impl::_impl_Optional<swift::Array<swift::String>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore15FileSyncRequestV26relatedDeployedWorkflowIDsSaySSGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool FileSyncRequest::getDownload() const {
  return _impl::$s13CloneableCore15FileSyncRequestV8downloadSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldFileInformation> FileSyncRequest::getFieldFileInformation() const {
  return swift::_impl::_impl_Optional<FieldFileInformation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV05fieldC11InformationAA05FieldcG0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_fatal::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO5fatalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isFatal() const {
    return *this == LogLevel::fatal;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_success::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isSuccess() const {
    return *this == LogLevel::success;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_debug::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO5debugyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isDebug() const {
    return *this == LogLevel::debug;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_info::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO4infoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isInfo() const {
    return *this == LogLevel::info;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_warning::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO7warningyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isWarning() const {
    return *this == LogLevel::warning;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_error::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO5erroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isError() const {
    return *this == LogLevel::error;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isUnknownDefault() const {
    return *this == LogLevel::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String LogLevel::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore8LogLevelO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<LogLevel> LogLevel::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<LogLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore8LogLevelO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_FileInformation::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO15FileInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isFileInformation() const {
    return *this == ModelToSync::FileInformation;
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_CompletedWorkflow::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isCompletedWorkflow() const {
    return *this == ModelToSync::CompletedWorkflow;
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_NotificationRequest::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO19NotificationRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isNotificationRequest() const {
    return *this == ModelToSync::NotificationRequest;
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_DataObject::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO10DataObjectyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isDataObject() const {
    return *this == ModelToSync::DataObject;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isUnknownDefault() const {
    return *this == ModelToSync::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ModelToSync> ModelToSync::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<ModelToSync>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore11ModelToSyncO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ModelToSync::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11ModelToSyncO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType NotificationRequestCallType::_impl_uploadRequest::operator()() const {
    auto result = NotificationRequestCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool NotificationRequestCallType::isUploadRequest() const {
    return *this == NotificationRequestCallType::uploadRequest;
  }
  SWIFT_INLINE_THUNK  bool NotificationRequestCallType::isUnknownDefault() const {
    return *this == NotificationRequestCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<NotificationRequestCallType> NotificationRequestCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<NotificationRequestCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore27NotificationRequestCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String NotificationRequestCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore27NotificationRequestCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ObjectIdGenerator::generate() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore17ObjectIdGeneratorV8generateSSyFZ());
  });
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetInputStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetInputStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV15targetDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV15targetDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetInput() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV11targetInputSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetInput(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV11targetInputSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV14targetStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV14targetStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetType() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV10targetTypeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetType(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV10targetTypeSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK OutputConnection OutputConnection::init(const swift::String& targetInputStaticID, const swift::String& targetDynamicID, const swift::String& targetInput, const swift::String& targetStaticID, const swift::String& targetType) {
  return _impl::_impl_OutputConnection::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore16OutputConnectionV19targetInputStaticID0e7DynamicH00eF00egH00E4TypeACSS_S4StcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetInputStaticID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetDynamicID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetInput)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetStaticID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetType)));
  });
  }
  SWIFT_INLINE_THUNK swift::Int ParsingError::getLine() const {
  return _impl::$s13CloneableCore12ParsingErrorV4lineSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int ParsingError::getColumn() const {
  return _impl::$s13CloneableCore12ParsingErrorV6columnSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ParsingError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore12ParsingErrorV16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ParsingError::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12ParsingErrorV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT RUNTIME_ENVIRONMENT::_impl_mobile::operator()() const {
    auto result = RUNTIME_ENVIRONMENT::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RUNTIME_ENVIRONMENT::isMobile() const {
    return *this == RUNTIME_ENVIRONMENT::mobile;
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT RUNTIME_ENVIRONMENT::_impl_cloud::operator()() const {
    auto result = RUNTIME_ENVIRONMENT::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RUNTIME_ENVIRONMENT::isCloud() const {
    return *this == RUNTIME_ENVIRONMENT::cloud;
  }
  SWIFT_INLINE_THUNK  bool RUNTIME_ENVIRONMENT::isUnknownDefault() const {
    return *this == RUNTIME_ENVIRONMENT::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int RUNTIME_ENVIRONMENT::getHashValue() const {
  return _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void SyncStatusToken::unsubscribe() {
  return _impl::$s13CloneableCore15SyncStatusTokenC11unsubscribeyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int SyncStatusToken::getHashValue() {
  return _impl::$s13CloneableCore15SyncStatusTokenC9hashValueSivgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> SyncedFileDatabase::getUnsyncedFileCount() {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> SyncedFileDatabase::getTotalFileCount() {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> SyncedFileDatabase::getSyncedFileCount() {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationObserverToken::cancel() {
  return _impl::$s13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Array<swift::String> SyncedFileInformationV2::getRelatedCloneableDeployedWorkflows() const {
  return swift::_impl::_impl_Array<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setRelatedCloneableDeployedWorkflows(const swift::Array<swift::String>& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> SyncedFileInformationV2::getDownload() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint8_t_0_1(result, _impl::$s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setDownload(const swift::Optional<bool>& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvs(_impl::swift_interop_passDirect_CloneableCore_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool SyncedFileInformationV2::getSyncComplete() const {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setSyncComplete(bool value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> SyncedFileInformationV2::getLocalFilePath() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setLocalFilePath(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String SyncedFileInformationV2::getFileName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore23SyncedFileInformationV2V8fileNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setFileName(const swift::String& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V8fileNameSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentType TargetInput::getComponentType() const {
  return _impl::_impl_ComponentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setComponentType(const ComponentType& value) {
  return _impl::$s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovs(_impl::_impl_ComponentType::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetInputStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV06targetD8StaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetInputStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV06targetD8StaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetInputDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV06targetD9DynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetInputDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV06targetD9DynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetComponentStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV23targetComponentStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetComponentStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV23targetComponentStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetComponentDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetComponentDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> TargetInput::getObjectFieldOutputDynamicID() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setObjectFieldOutputDynamicID(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TextElement::getText() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TextElementC4textSSvg(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_new::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO3newyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isNew_() const {
    return *this == TrackState::new_;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_tracked::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO7trackedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isTracked() const {
    return *this == TrackState::tracked;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_lost::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO4lostyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isLost() const {
    return *this == TrackState::lost;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_removed::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO7removedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isRemoved() const {
    return *this == TrackState::removed;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_unknown::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isUnknown() const {
    return *this == TrackState::unknown;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isUnknownDefault() const {
    return *this == TrackState::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<TrackState> TrackState::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<TrackState>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10TrackStateO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int TrackState::getRawValue() const {
  return _impl::$s13CloneableCore10TrackStateO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> WorkflowFramework::getActiveUIComponent() {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void WorkflowFramework::setActiveUIComponent(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvsTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::String XMLAttribute::getName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12XMLAttributeV4nameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLAttribute::getText() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12XMLAttributeV4textSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLAttribute::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12XMLAttributeV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getName() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC4nameSSvg(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK bool XMLElement::getCaseInsensitive() {
  return _impl::$s13CloneableCore10XMLElementC15caseInsensitiveSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<XMLAttribute> XMLElement::attribute(const swift::String& name) {
  return swift::_impl::_impl_Optional<XMLAttribute>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tFTj(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(name)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getText() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC4textSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getRecursiveText() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC13recursiveTextSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getInnerXML() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC8innerXMLSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getShouldProcessLazily() {
  return _impl::$s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setShouldProcessLazily(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getShouldProcessNamespaces() {
  return _impl::$s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setShouldProcessNamespaces(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getCaseInsensitive() {
  return _impl::$s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setCaseInsensitive(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getDetectParsingErrors() {
  return _impl::$s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setDetectParsingErrors(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }

class APICallType { } SWIFT_UNAVAILABLE_MSG("protocol 'APICallType' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CloneableData'.

class CloneableDataInput { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableDataInput' can not yet be represented in C++");

class CloneableDataOutput { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableDataOutput' can not yet be represented in C++");

class CloneableDataType { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableDataType' can not yet be represented in C++");

class CloneableLocationManager { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableLocationManager' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CloneableObject'.

// Unavailable in C++: Swift type alias 'CloneableObserverToken'.

// Unavailable in C++: Swift type alias 'CloneableWorkflow'.

// Unavailable in C++: Swift type alias 'CloneableWorkflow_auditTimeline'.

// Unavailable in C++: Swift type alias 'CloneableWorkflow_relatedObjectTypes'.

class ComponentSubscriber { } SWIFT_UNAVAILABLE_MSG("protocol 'ComponentSubscriber' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'DataObjectObserverToken'.

// Unavailable in C++: Swift type alias 'DeployedWorkflow_components'.

// Unavailable in C++: Swift type alias 'DeployedWorkflow_object_field'.

// Unavailable in C++: Swift type alias 'DeployedWorkflow_objects'.

class FileSyncChangeType { } SWIFT_UNAVAILABLE_MSG("enum 'FileSyncChangeType' can not yet be represented in C++ as one of its cases has multiple associated values");

// Unavailable in C++: Swift type alias 'FileSyncStatusToken'.

class IndexingError { } SWIFT_UNAVAILABLE_MSG("enum 'IndexingError' can not yet be represented in C++ as one of its cases has multiple associated values");

// Unavailable in C++: Swift type alias 'LogObserverToken'.

class NavigationCoordinator { } SWIFT_UNAVAILABLE_MSG("protocol 'NavigationCoordinator' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'NotificationRequest'.

// Unavailable in C++: Swift type alias 'NotificationRequest_roles_channels'.

// Unavailable in C++: Swift type alias 'NotificationRequest_targetSMSNumbers'.

// Unavailable in C++: Swift type alias 'ObjectField'.

class SQLiteTable { } SWIFT_UNAVAILABLE_MSG("protocol 'SQLiteTable' can not yet be represented in C++");

class SyncManagerDataObjectChangeType { } SWIFT_UNAVAILABLE_MSG("Swift enum 'SyncManagerDataObjectChangeType' cannot be represented in C++");

class SyncManagerDeployedWorkflowChangeType { } SWIFT_UNAVAILABLE_MSG("Swift enum 'SyncManagerDeployedWorkflowChangeType' cannot be represented in C++");

class WorkflowService { } SWIFT_UNAVAILABLE_MSG("protocol 'WorkflowService' can not yet be represented in C++");

class XMLAttributeDeserializable { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLAttributeDeserializable' can not yet be represented in C++");

class XMLContent { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLContent' can not yet be represented in C++");

class XMLDeserializationError { } SWIFT_UNAVAILABLE_MSG("enum 'XMLDeserializationError' can not yet be represented in C++ as one of its cases has multiple associated values");

class XMLElementDeserializable { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLElementDeserializable' can not yet be represented in C++");

class XMLError { } SWIFT_UNAVAILABLE_MSG("enum 'XMLError' can not be represented in C++ as one of its cases has an associated value with type that can't be represented in C++");

// Unavailable in C++: Swift type alias 'XMLHashXMLElement'.

class XMLIndexer { } SWIFT_UNAVAILABLE_MSG("Swift enum 'XMLIndexer' cannot be represented in C++");

class XMLObjectDeserialization { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLObjectDeserialization' can not yet be represented in C++");

class XMLSubscriptType { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLSubscriptType' can not yet be represented in C++");

class XMLValueDeserialization { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLValueDeserialization' can not yet be represented in C++");

// Unavailable in C++: Swift var 'workflowFramework'.

} // namespace CloneableCore

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef CLONEABLECORE_SWIFT_H
#define CLONEABLECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CloneableCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC13CloneableCore13BoxSnapPoints")
@interface BoxSnapPoints : NSObject <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSString;
@class NSNumber;

SWIFT_CLASS("_TtC13CloneableCore20CloneableBoundingBox")
@interface CloneableBoundingBox : NSObject <NSCopying>
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic) CGRect boundingBox;
@property (nonatomic, copy) NSString * _Nonnull label;
@property (nonatomic) double confidence;
@property (nonatomic) double trackID;
@property (nonatomic) BOOL createdByPerson;
@property (nonatomic) BOOL modifiedByPerson;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id boundingBox:(CGRect)boundingBox label:(NSString * _Nonnull)label confidence:(double)confidence trackID:(double)trackID measuredWidth:(NSNumber * _Nullable)measuredWidth measuredHeight:(NSNumber * _Nullable)measuredHeight state:(NSInteger)state createdByPerson:(BOOL)createdByPerson modifiedByPerson:(BOOL)modifiedByPerson referenceImageWidth:(NSInteger)referenceImageWidth referenceImageHeight:(NSInteger)referenceImageHeight measurementSnapped:(BOOL)measurementSnapped boxSnapPoints:(BoxSnapPoints * _Nullable)boxSnapPoints OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




























template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {



























































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
































































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqyxSgxcfc");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {


















































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




















































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {



















































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(some_), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  return _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  return _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  return _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  return _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  return _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  return _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  return _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  return _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'getVaList(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("CloneableCore", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {
extern "C" {
#endif

SWIFT_EXTERN void $s13CloneableCore3qlloiyySayxGz_xSgtlF(void * _Nonnull lhs, const void * _Nonnull rhs, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // ?<<(_:_:)
SWIFT_EXTERN void $s13CloneableCore2qeoiyyxz_xSgtlF(void * _Nonnull lhs, const void * _Nonnull rhs, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // ?=(_:_:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore7APICallV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore7APICallV9relatedIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore7APICallV11modelToSyncAA05ModeleF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore7APICallV6statusAA0C6StatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore7APICallV6statusAA0C6StatusOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore13APICallStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore13APICallStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore8APIErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV9isComplexSbyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // isComplex()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore03AnyA4DataV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV7isEqual2toSbAC_tF(const void * _Nonnull to, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // isEqual(to:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV4fromACSg5JXKit7JXValueC_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull jxValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(from:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore03AnyA4DataV14getStringValueSSSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringValue()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint8_t_0_1(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 value) {
  memcpy(result + 0, &value._1, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 $s13CloneableCore03AnyA4DataV12getBoolValueSbSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getBoolValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore03AnyA4DataV13getArrayValueSayACGSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getArrayValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore03AnyA4DataV19getBoundingBoxValueAA0afG0CSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getBoundingBoxValue()
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV11getDepthMapAA0afG0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDepthMap()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore03AnyA4DataV14getNumberValueSdSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getNumberValue()
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV16getDepthMapValueAA0afG0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDepthMapValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore03AnyA4DataV16getFileExtensionSSSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getFileExtension()
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV19getObjectFieldValue9fieldNameACSgSS_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fieldName, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getObjectFieldValue(fieldName:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6numberyACSdFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, double value) SWIFT_NOEXCEPT SWIFT_CALL; // number(_:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_void_ptr_0_8 swift_interop_passDirect_CloneableCore_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV5arrayyACSayACGFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value) SWIFT_NOEXCEPT SWIFT_CALL; // array(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6statusyACSSFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // status(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6stringyACSSFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // string(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV7booleanyACSbFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, bool value) SWIFT_NOEXCEPT SWIFT_CALL; // boolean(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV11boundingboxyAcA0A11BoundingBoxCFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull value) SWIFT_NOEXCEPT SWIFT_CALL; // boundingbox(_:)
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV6objectyACSSFZ(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // object(_:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV18bindingStringValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV18bindingStringValueSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13CloneableCore03AnyA4DataV18bindingNumberValueSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV18bindingNumberValueSdvs(double newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvs(bool newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore03AnyA4DataV18bindingStatusValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore03AnyA4DataV18bindingStatusValueSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore03AnyA4DataV7isArraySbyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // isArray()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore03AnyA4DataV20getArrayTypeAsStringSSSgyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getArrayTypeAsString()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore19AuthenticationErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ArrayV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN void $s13CloneableCore0A5ArrayV4dataACSayAA03AnyA4DataVG_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_void_ptr_0_8 data) SWIFT_NOEXCEPT SWIFT_CALL; // init(data:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ArrayV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ArrayV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A5ArrayV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A10AuthStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A7BooleanV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A7BooleanV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A7BooleanVyACSbcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, bool value) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A7BooleanV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A7BooleanV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ColorV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1rSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1rSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1gSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1gSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1bSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1bSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13CloneableCore0A5ColorV1aSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A5ColorV1aSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ColorV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A5ColorV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A5ColorV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A15ConnectionStateO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCoreAAC5appIDSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCoreAAC5appIDSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC5appIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC5appIDSSvsTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvgTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvsTj(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvgTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvsTj(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvgTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvsTj(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCoreAAC7signOutyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // signOut()
SWIFT_EXTERN void $s13CloneableCoreAAC7signOutyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for signOut()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC12getDataCacheAA0D7ManagerCyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDataCache()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC12getDataCacheAA0D7ManagerCyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getDataCache()
SWIFT_EXTERN void $s13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getConnectionStatus()
SWIFT_EXTERN void $s13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getConnectionStatus()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC5cacheAA17LocalCacheManagerCyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cache()
SWIFT_EXTERN void * _Nonnull $s13CloneableCoreAAC5cacheAA17LocalCacheManagerCyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for cache()
SWIFT_EXTERN void $s13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getRuntimeEnvironment()
SWIFT_EXTERN void $s13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getRuntimeEnvironment()
SWIFT_EXTERN void $s13CloneableCoreAAC13startWorkflow10workflowIdySS_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 workflowId, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // startWorkflow(workflowId:)
SWIFT_EXTERN void $s13CloneableCoreAAC13startWorkflow10workflowIdySS_tFTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 workflowId, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for startWorkflow(workflowId:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A9DataErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A10DataObjectV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN void $s13CloneableCore0A10DataObjectV4dataACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 data) SWIFT_NOEXCEPT SWIFT_CALL; // init(data:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A10DataObjectV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A10DataObjectV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A10DataObjectV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4DateV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4DateV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4DateV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A4DateV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8DepthMapV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN bool $s13CloneableCore0A8DepthMapV11complexTypeSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV11complexTypeSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_CloneableCore_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8 swift_interop_passDirect_CloneableCore_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8DepthMapV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8DepthMapV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A8DepthMapV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN OS_dispatch_queue *_Nonnull $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN OS_dispatch_queue *_Nonnull $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvs(OS_dispatch_queue *_Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvsTj(OS_dispatch_queue *_Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC10totalFilesSivg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC10totalFilesSivgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC10totalFilesSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC10totalFilesSivsTj(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC11filesSyncedSivsTj(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // processAndSyncObjectsNonCompleteRequests()
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for processAndSyncObjectsNonCompleteRequests()
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StF(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileType, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 displayName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getCloneableDataFromFile(fileName:fileType:displayName:)
SWIFT_EXTERN void $s13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileType, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 displayName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getCloneableDataFromFile(fileName:fileType:displayName:)
SWIFT_EXTERN bool $s13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // fileExistsLocally(fileName:)
SWIFT_EXTERN bool $s13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tFTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 fileName, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for fileExistsLocally(fileName:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getNumberOfDownloadedFiles()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getNumberOfDownloadedFiles()
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8FileTypeO010getContentD013fileExtensionS2SSg_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileExtension, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getContentType(fileExtension:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8FileTypeO03getC9Extension07contentD0S2SSg_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 contentType, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getFileExtension(contentType:)
SWIFT_EXTERN void $s13CloneableCore0A8FileTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8FileTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3KMLV18convertKMLToStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // convertKMLToString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A3KMLV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV2idSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13CloneableCore0A8LocationV8latitudeSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV8latitudeSdvs(double value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13CloneableCore0A8LocationV9longitudeSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV9longitudeSdvs(double value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore0A8LocationV8altitudeSdSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 1);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore0A8LocationV8altitudeSdSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore0A8LocationV11complexTypeSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A8LocationV11complexTypeSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A8LocationV17simpleDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // simpleDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A8LocationV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3LogV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV2idSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8logLevelAA0cE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8logLevelAA0cE0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A3LogV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV7messageSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore0A6LoggerC7getLogsSayAA0A3LogVGyFZ(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getLogs()
SWIFT_EXTERN void $s13CloneableCore0A6LoggerC9clearLogsyyFZ(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // clearLogs()
SWIFT_EXTERN void $s13CloneableCore0A6LoggerC15notifyObservers3logyAA0A3LogV_tFZ(const void * _Nonnull log, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // notifyObservers(log:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6NumberV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A6NumberV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A6NumberVyACSdcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, double value) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6NumberV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6NumberV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StatusV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A6StatusV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A6StatusV4jsonACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 json) SWIFT_NOEXCEPT SWIFT_CALL; // init(json:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StatusV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StatusV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StringV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A6StringV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore0A6StringV4jsonACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 json) SWIFT_NOEXCEPT SWIFT_CALL; // init(json:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StringV09getTypeAsC0SSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A6StringV03getC11DescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A9SyncErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore0A10SyncStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4UUIDV12getJSONValueSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJSONValue()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4UUIDV15getTypeAsStringSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTypeAsString()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore0A4UUIDV20getStringDescriptionSSyF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getStringDescription()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore0A4UUIDV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(void * _Nonnull context, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getJXValue(context:)
SWIFT_EXTERN void $s13CloneableCore25CompletedWorkflowCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore25CompletedWorkflowCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9ComponentV2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV2idSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV4typeAA0C4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV4typeAA0C4TypeOvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16ComponentRuntimeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16ComponentRuntimeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore13ComponentTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore13ComponentTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10ComponentsC12addComponent9componentyAA0E0V_tFZ(const void * _Nonnull component, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // addComponent(component:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9DataInputV18componentDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV18componentDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9DataInputV14inputDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV14inputDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore9DataInputV13inputStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV13inputStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV4dataAA03AnyaC0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV4dataAA03AnyaC0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore9DataInputV5batchSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV5batchSiSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore9DataInputV12currentBatchSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore9DataInputV12currentBatchSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void * _Nonnull $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void * _Nonnull $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvs(void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvsTj(void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore11DataManagerC14clearFileCacheyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // clearFileCache()
SWIFT_EXTERN void $s13CloneableCore11DataManagerC14clearFileCacheyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for clearFileCache()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC9getUserIdSSSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getUserId()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC9getUserIdSSSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getUserId()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tF(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 auth0_jwt, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // canProceed(auth0_jwt:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tFTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 auth0_jwt, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for canProceed(auth0_jwt:)
SWIFT_EXTERN void $s13CloneableCore18DataObjectCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore18DataObjectCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore10DataOutputV11outputCountSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV11outputCountSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV07dynamicD2IDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV07dynamicD2IDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV17staticComponentIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV17staticComponentIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV18dynamicComponentIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV18dynamicComponentIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10DataOutputV15typeDescriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV15typeDescriptionSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore10DataOutputV5batchSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV5batchSiSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10DataOutputV4data17staticComponentID07dynamicgH00idH006outputG4Type11targetInputAcA03AnyaC0V_S3SAA0gK0OAA06TargetM0VSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull data, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 staticComponentID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 dynamicComponentID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 dynamicOutputID, const void * _Nonnull outputComponentType, const void * _Nonnull targetInput) SWIFT_NOEXCEPT SWIFT_CALL; // init(data:staticComponentID:dynamicComponentID:dynamicOutputID:outputComponentType:targetInput:)
SWIFT_EXTERN void $s13CloneableCore10DataOutputV09convertToC5Input9firstCallAA0cG0VSb_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, bool firstCall, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // convertToDataInput(firstCall:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvsTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore11DisplayModeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV8fileNameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV8fileNameSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore20FieldFileInformationV8fileSizeSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV8fileSizeSiSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV8fileTypeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV8fileTypeSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV7fileUrlSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV7fileUrlSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore20FieldFileInformationV15storageProviderSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV15storageProviderSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 $s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_CloneableCore_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_CloneableCore_uint8_t_0_1 swift_interop_passDirect_CloneableCore_uint8_t_0_1(const char * _Nonnull value) {
  struct swift_interop_passStub_CloneableCore_uint8_t_0_1 result;
  memcpy(&result._1, value + 0, 1);
  return result;
}

SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvs(struct swift_interop_passStub_CloneableCore_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore20FieldFileInformationV13fileExtension0F4Name0F4Size0F4Type0F3Url019storageAuthProviderH00lmN5RefID0lN012one_way_syncACSSSg_AMSiSgA5MSbSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileExtension, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 fileSize, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileType, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 fileUrl, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 storageAuthProviderName, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 storageAuthProviderRefID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 storageProvider, struct swift_interop_passStub_CloneableCore_uint8_t_0_1 one_way_sync) SWIFT_NOEXCEPT SWIFT_CALL; // init(fileExtension:fileName:fileSize:fileType:fileUrl:storageAuthProviderName:storageAuthProviderRefID:storageProvider:one_way_sync:)
SWIFT_EXTERN void $s13CloneableCore23FileInformationCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore23FileInformationCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore17FileObserverTokenC6cancelyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cancel()
SWIFT_EXTERN void $s13CloneableCore17FileObserverTokenC6cancelyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for cancel()
SWIFT_EXTERN void $s13CloneableCore16FileSyncRelationO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16FileSyncRelationO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore15FileSyncRequestV8fileNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV4dataAA03AnyA4DataVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV12fileRelationAA0cdG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV8fileTypeAA0acG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore15FileSyncRequestV12one_way_syncSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore15FileSyncRequestV4userSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore15FileSyncRequestV7companySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore15FileSyncRequestV9typeRefIDSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8 $s13CloneableCore15FileSyncRequestV26relatedDeployedWorkflowIDsSaySSGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore15FileSyncRequestV8downloadSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15FileSyncRequestV05fieldC11InformationAA05FieldcG0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore8LogLevelO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore8LogLevelO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN void $s13CloneableCore11ModelToSyncO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11ModelToSyncO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore27NotificationRequestCallTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore27NotificationRequestCallTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore17ObjectIdGeneratorV8generateSSyFZ(void) SWIFT_NOEXCEPT SWIFT_CALL; // generate()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV15targetDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV15targetDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV11targetInputSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV11targetInputSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV14targetStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV14targetStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore16OutputConnectionV10targetTypeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV10targetTypeSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore16OutputConnectionV19targetInputStaticID0e7DynamicH00eF00egH00E4TypeACSS_S4StcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetInputStaticID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetDynamicID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetInput, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetStaticID, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 targetType) SWIFT_NOEXCEPT SWIFT_CALL; // init(targetInputStaticID:targetDynamicID:targetInput:targetStaticID:targetType:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore12ParsingErrorV4lineSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore12ParsingErrorV6columnSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore12ParsingErrorV16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12ParsingErrorV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore19RUNTIME_ENVIRONMENTO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore15SyncStatusTokenC11unsubscribeyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // unsubscribe()
SWIFT_EXTERN void $s13CloneableCore15SyncStatusTokenC11unsubscribeyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for unsubscribe()
SWIFT_EXTERN ptrdiff_t $s13CloneableCore15SyncStatusTokenC9hashValueSivg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13CloneableCore15SyncStatusTokenC9hashValueSivgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getUnsyncedFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getUnsyncedFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getTotalFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getTotalFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getSyncedFileCount()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint8_t_8_9 $s13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for getSyncedFileCount()
SWIFT_EXTERN void $s13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cancel()
SWIFT_EXTERN void $s13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyFTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for cancel()
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_void_ptr_0_8 $s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvs(struct swift_interop_passStub_CloneableCore_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint8_t_0_1 $s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvs(struct swift_interop_passStub_CloneableCore_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore23SyncedFileInformationV2V8fileNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore23SyncedFileInformationV2V8fileNameSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV06targetD8StaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV06targetD8StaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV06targetD9DynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV06targetD9DynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV23targetComponentStaticIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV23targetComponentStaticIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore11TextElementC4textSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore10TrackStateO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s13CloneableCore10TrackStateO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvs(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvsTj(struct swift_interop_passStub_CloneableCore_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12XMLAttributeV4nameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12XMLAttributeV4textSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore12XMLAttributeV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC4nameSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore10XMLElementC15caseInsensitiveSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore10XMLElementC15caseInsensitiveSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 name, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // attribute(by:)
SWIFT_EXTERN void $s13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tFTj(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 name, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for attribute(by:)
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC4textSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC4textSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC13recursiveTextSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC13recursiveTextSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC8innerXMLSSvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_CloneableCore_uint64_t_0_8_void_ptr_8_16 $s13CloneableCore10XMLElementC8innerXMLSSvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvg(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvgTj(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvsTj(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // dispatch thunk for _

#ifdef __cplusplus
}
}
}
namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// push value to array if rhs is not optonal. When rhs is optional, nothing to do.
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void ?<<(swift::Array<T_0_0>& lhs, const swift::Optional<T_0_0>& rhs) noexcept SWIFT_SYMBOL("s:13CloneableCore3qlloiyySayxGz_xSgtlF") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s13CloneableCore3qlloiyySayxGz_xSgtlF(swift::_impl::_impl_Array<T_0_0>::getOpaquePointer(lhs), swift::_impl::_impl_Optional<T_0_0>::getOpaquePointer(rhs), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
}


/// assign value if rhs is not optonal. When rhs is optional, nothing to do.
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void ?=(T_0_0& lhs, const swift::Optional<T_0_0>& rhs) noexcept SWIFT_SYMBOL("s:13CloneableCore2qeoiyyxz_xSgtlF") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s13CloneableCore2qeoiyyxz_xSgtlF(swift::_impl::getOpaquePointer(lhs), swift::_impl::_impl_Optional<T_0_0>::getOpaquePointer(rhs), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
}

class SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO") ModelToSync;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ModelToSync> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO") APICallStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::APICallStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore7APICallV") APICall;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::APICall> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_APICall;

// Type metadata accessor for APICall
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore7APICallVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore7APICallV") APICall final {
public:
  SWIFT_INLINE_THUNK ~APICall() noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APICall(const APICall &other) noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APICall &operator =(const APICall &other) noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APICall &operator =(APICall &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APICall(APICall &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore7APICallV2idSSvp");
  SWIFT_INLINE_THUNK swift::String getRelatedID() const SWIFT_SYMBOL("s:13CloneableCore7APICallV9relatedIDSSvp");
  SWIFT_INLINE_THUNK ModelToSync getModelToSync() const SWIFT_SYMBOL("s:13CloneableCore7APICallV11modelToSyncAA05ModeleF0Ovp");
  SWIFT_INLINE_THUNK APICallStatus getStatus() const SWIFT_SYMBOL("s:13CloneableCore7APICallV6statusAA0C6StatusOvp");
  SWIFT_INLINE_THUNK void setStatus(const APICallStatus& value) SWIFT_SYMBOL("s:13CloneableCore7APICallV6statusAA0C6StatusOvp");
private:
  SWIFT_INLINE_THUNK APICall(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK APICall _make() noexcept {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return APICall(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_APICall;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore7APICallVD;
  static inline constexpr $s13CloneableCore7APICallVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APICall {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APICall &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APICall &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APICall returnNewValue(T callable) {
    auto result = APICall::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore7APICallVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::APICall> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore7APICallVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::APICall> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::APICall> = true;
template<>
struct implClassFor<CloneableCore::APICall> { using type = CloneableCore::_impl::_impl_APICall; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_APICallStatus;

// Type metadata accessor for APICallStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore13APICallStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum APICallStatus
extern "C" {
extern unsigned $s13CloneableCore13APICallStatusO7PendingyA2CmFWC;
extern unsigned $s13CloneableCore13APICallStatusO7SyncingyA2CmFWC;
extern unsigned $s13CloneableCore13APICallStatusO6SyncedyA2CmFWC;
extern unsigned $s13CloneableCore13APICallStatusO5ErroryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO") APICallStatus final {
public:
  SWIFT_INLINE_THUNK ~APICallStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APICallStatus(const APICallStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APICallStatus &operator =(const APICallStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APICallStatus &operator =(APICallStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APICallStatus(APICallStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    Pending SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7PendingyA2CmF"),
    Syncing SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7SyncingyA2CmF"),
    Synced SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO6SyncedyA2CmF"),
    Error SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO5ErroryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_Pending {  // impl struct for case Pending
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Pending;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Pending SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7PendingyA2CmF");
  SWIFT_INLINE_THUNK bool isPending() const;

  inline const static struct _impl_Syncing {  // impl struct for case Syncing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Syncing;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Syncing SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO7SyncingyA2CmF");
  SWIFT_INLINE_THUNK bool isSyncing() const;

  inline const static struct _impl_Synced {  // impl struct for case Synced
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Synced;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Synced SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO6SyncedyA2CmF");
  SWIFT_INLINE_THUNK bool isSynced() const;

  inline const static struct _impl_Error {  // impl struct for case Error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::Error;
    }
    SWIFT_INLINE_THUNK APICallStatus operator()() const;
  } Error SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO5ErroryA2CmF");
  SWIFT_INLINE_THUNK bool isError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore13APICallStatusO7PendingyA2CmFWC) return cases::Pending;
    if (tag == _impl::$s13CloneableCore13APICallStatusO7SyncingyA2CmFWC) return cases::Syncing;
    if (tag == _impl::$s13CloneableCore13APICallStatusO6SyncedyA2CmFWC) return cases::Synced;
    if (tag == _impl::$s13CloneableCore13APICallStatusO5ErroryA2CmFWC) return cases::Error;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<APICallStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore13APICallStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK APICallStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK APICallStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return APICallStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_APICallStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore13APICallStatusOD;
  static inline constexpr $s13CloneableCore13APICallStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APICallStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APICallStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APICallStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APICallStatus returnNewValue(T callable) {
    auto result = APICallStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore13APICallStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::APICallStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore13APICallStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::APICallStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::APICallStatus> = true;
template<>
struct implClassFor<CloneableCore::APICallStatus> { using type = CloneableCore::_impl::_impl_APICallStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore8APIErrorO") APIError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::APIError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_APIError;

// Type metadata accessor for APIError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8APIErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum APIError
extern "C" {
extern unsigned $s13CloneableCore8APIErrorO17invalidReturnTypeyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO16apiManagerNotSetyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO17serverUnreachableyA2CmFWC;
extern unsigned $s13CloneableCore8APIErrorO15invalidResponseyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8APIErrorO") APIError final {
public:
  SWIFT_INLINE_THUNK ~APIError() noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK APIError(const APIError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK APIError &operator =(const APIError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK APIError &operator =(APIError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER APIError(APIError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    invalidReturnType SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17invalidReturnTypeyA2CmF"),
    couldntAuthenticateRequest SWIFT_SYMBOL("s:13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmF"),
    apiManagerNotSet SWIFT_SYMBOL("s:13CloneableCore8APIErrorO16apiManagerNotSetyA2CmF"),
    serverUnreachable SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17serverUnreachableyA2CmF"),
    invalidResponse SWIFT_SYMBOL("s:13CloneableCore8APIErrorO15invalidResponseyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_invalidReturnType {  // impl struct for case invalidReturnType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidReturnType;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } invalidReturnType SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17invalidReturnTypeyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidReturnType() const;

  inline const static struct _impl_couldntAuthenticateRequest {  // impl struct for case couldntAuthenticateRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::couldntAuthenticateRequest;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } couldntAuthenticateRequest SWIFT_SYMBOL("s:13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isCouldntAuthenticateRequest() const;

  inline const static struct _impl_apiManagerNotSet {  // impl struct for case apiManagerNotSet
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::apiManagerNotSet;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } apiManagerNotSet SWIFT_SYMBOL("s:13CloneableCore8APIErrorO16apiManagerNotSetyA2CmF");
  SWIFT_INLINE_THUNK bool isApiManagerNotSet() const;

  inline const static struct _impl_serverUnreachable {  // impl struct for case serverUnreachable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serverUnreachable;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } serverUnreachable SWIFT_SYMBOL("s:13CloneableCore8APIErrorO17serverUnreachableyA2CmF");
  SWIFT_INLINE_THUNK bool isServerUnreachable() const;

  inline const static struct _impl_invalidResponse {  // impl struct for case invalidResponse
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidResponse;
    }
    SWIFT_INLINE_THUNK APIError operator()() const;
  } invalidResponse SWIFT_SYMBOL("s:13CloneableCore8APIErrorO15invalidResponseyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidResponse() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore8APIErrorO17invalidReturnTypeyA2CmFWC) return cases::invalidReturnType;
    if (tag == _impl::$s13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmFWC) return cases::couldntAuthenticateRequest;
    if (tag == _impl::$s13CloneableCore8APIErrorO16apiManagerNotSetyA2CmFWC) return cases::apiManagerNotSet;
    if (tag == _impl::$s13CloneableCore8APIErrorO17serverUnreachableyA2CmFWC) return cases::serverUnreachable;
    if (tag == _impl::$s13CloneableCore8APIErrorO15invalidResponseyA2CmFWC) return cases::invalidResponse;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore8APIErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK APIError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK APIError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return APIError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_APIError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8APIErrorOD;
  static inline constexpr $s13CloneableCore8APIErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_APIError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(APIError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const APIError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER APIError returnNewValue(T callable) {
    auto result = APIError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore8APIErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::APIError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8APIErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::APIError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::APIError> = true;
template<>
struct implClassFor<CloneableCore::APIError> { using type = CloneableCore::_impl::_impl_APIError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {





class SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV") CloneableDepthMap;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDepthMap> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV") AnyCloneableData;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::AnyCloneableData> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_AnyCloneableData;

// Type metadata accessor for AnyCloneableData
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore03AnyA4DataVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV") AnyCloneableData final {
public:
  SWIFT_INLINE_THUNK ~AnyCloneableData() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableData(const AnyCloneableData &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableData &operator =(const AnyCloneableData &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AnyCloneableData &operator =(AnyCloneableData &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AnyCloneableData(AnyCloneableData &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Function to get the JSON string value from
///
/// returns:
/// The JSON string value
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK bool isComplex() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV9isComplexSbyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF");
  SWIFT_INLINE_THUNK bool isEqual(const AnyCloneableData& to) const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV7isEqual2toSbAC_tF");
/// Initializes a new instance of the <code>CloneableDataType</code> with a given <code>jxValue</code> object.
/// \param from The <code>jxValue</code> object to be used to create a new instance of <code>CloneableDataType</code>.
///
///
/// returns:
/// An instance of <code>CloneableDataType</code> if <code>jxValue</code> is a valid JSON object or array, <code>nil</code> otherwise.
  static SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> init(const JXValue& jxValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV4fromACSg5JXKit7JXValueC_tcfc");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStringValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV14getStringValueSSSgyF");
  SWIFT_INLINE_THUNK swift::Optional<bool> getBoolValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV12getBoolValueSbSgyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<AnyCloneableData>> getArrayValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV13getArrayValueSayACGSgyF");
  SWIFT_INLINE_THUNK swift::Optional<CloneableBoundingBox> getBoundingBoxValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19getBoundingBoxValueAA0afG0CSgyF");
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> getDepthMap() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV11getDepthMapAA0afG0VSgyF");
  SWIFT_INLINE_THUNK swift::Optional<double> getNumberValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV14getNumberValueSdSgyF");
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> getDepthMapValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV16getDepthMapValueAA0afG0VSgyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileExtension() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV16getFileExtensionSSSgyF");
/// Function to get the broken out values if the data type is a custom object type
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> getObjectFieldValue(const swift::String& fieldName) const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19getObjectFieldValue9fieldNameACSgSS_tF");
  static SWIFT_INLINE_THUNK AnyCloneableData number(double value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6numberyACSdFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData array(const swift::Array<AnyCloneableData>& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV5arrayyACSayACGFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData status(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6statusyACSSFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData string(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6stringyACSSFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData boolean(bool value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV7booleanyACSbFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData boundingbox(const CloneableBoundingBox& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV11boundingboxyAcA0A11BoundingBoxCFZ");
  static SWIFT_INLINE_THUNK AnyCloneableData object(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV6objectyACSSFZ");
  SWIFT_INLINE_THUNK swift::String getBindingStringValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStringValueSSvp");
  SWIFT_INLINE_THUNK void setBindingStringValue(const swift::String& newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStringValueSSvp");
  SWIFT_INLINE_THUNK double getBindingNumberValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingNumberValueSdvp");
  SWIFT_INLINE_THUNK void setBindingNumberValue(double newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingNumberValueSdvp");
  SWIFT_INLINE_THUNK bool getBindingBooleanValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19bindingBooleanValueSbvp");
  SWIFT_INLINE_THUNK void setBindingBooleanValue(bool newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV19bindingBooleanValueSbvp");
  SWIFT_INLINE_THUNK swift::String getBindingStatusValue() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStatusValueSSvp");
  SWIFT_INLINE_THUNK void setBindingStatusValue(const swift::String& newValue) SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV18bindingStatusValueSSvp");
  SWIFT_INLINE_THUNK bool isArray() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV7isArraySbyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getArrayTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore03AnyA4DataV20getArrayTypeAsStringSSSgyF");
private:
  SWIFT_INLINE_THUNK AnyCloneableData(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AnyCloneableData _make() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AnyCloneableData(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AnyCloneableData;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore03AnyA4DataVD;
  static inline constexpr $s13CloneableCore03AnyA4DataVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AnyCloneableData {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AnyCloneableData &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AnyCloneableData &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AnyCloneableData returnNewValue(T callable) {
    auto result = AnyCloneableData::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore03AnyA4DataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::AnyCloneableData> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore03AnyA4DataVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::AnyCloneableData> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::AnyCloneableData> = true;
template<>
struct implClassFor<CloneableCore::AnyCloneableData> { using type = CloneableCore::_impl::_impl_AnyCloneableData; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {







class SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO") AnyCloneableDataError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::AnyCloneableDataError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_AnyCloneableDataError;

// Type metadata accessor for AnyCloneableDataError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore03AnyA9DataErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AnyCloneableDataError
extern "C" {
extern unsigned $s13CloneableCore03AnyA9DataErrorO10failedInityA2CmFWC;
extern unsigned $s13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO") AnyCloneableDataError final {
public:
  SWIFT_INLINE_THUNK ~AnyCloneableDataError() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError(const AnyCloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError &operator =(const AnyCloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError &operator =(AnyCloneableDataError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AnyCloneableDataError(AnyCloneableDataError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    typeNotRegistered SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmF"),
    failedInit SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO10failedInityA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_typeNotRegistered {  // impl struct for case typeNotRegistered
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::typeNotRegistered;
    }
    SWIFT_INLINE_THUNK AnyCloneableDataError operator()(const swift::String& val) const;
  } typeNotRegistered SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmF");
  SWIFT_INLINE_THUNK bool isTypeNotRegistered() const;
  SWIFT_INLINE_THUNK swift::String getTypeNotRegistered() const;

  inline const static struct _impl_failedInit {  // impl struct for case failedInit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::failedInit;
    }
    SWIFT_INLINE_THUNK AnyCloneableDataError operator()() const;
  } failedInit SWIFT_SYMBOL("s:13CloneableCore03AnyA9DataErrorO10failedInityA2CmF");
  SWIFT_INLINE_THUNK bool isFailedInit() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmFWC) return cases::typeNotRegistered;
    if (tag == _impl::$s13CloneableCore03AnyA9DataErrorO10failedInityA2CmFWC) return cases::failedInit;
    return cases::unknownDefault;
  }

private:
  SWIFT_INLINE_THUNK AnyCloneableDataError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AnyCloneableDataError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AnyCloneableDataError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AnyCloneableDataError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore03AnyA9DataErrorOD;
  static inline constexpr $s13CloneableCore03AnyA9DataErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AnyCloneableDataError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AnyCloneableDataError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AnyCloneableDataError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AnyCloneableDataError returnNewValue(T callable) {
    auto result = AnyCloneableDataError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore03AnyA9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::AnyCloneableDataError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore03AnyA9DataErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::AnyCloneableDataError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::AnyCloneableDataError> = true;
template<>
struct implClassFor<CloneableCore::AnyCloneableDataError> { using type = CloneableCore::_impl::_impl_AnyCloneableDataError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO") AuthenticationError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::AuthenticationError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_AuthenticationError;

// Type metadata accessor for AuthenticationError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore19AuthenticationErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AuthenticationError
extern "C" {
extern unsigned $s13CloneableCore19AuthenticationErrorO05loginD0yA2CmFWC;
extern unsigned $s13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmFWC;
extern unsigned $s13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO") AuthenticationError final {
public:
  SWIFT_INLINE_THUNK ~AuthenticationError() noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AuthenticationError(const AuthenticationError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AuthenticationError &operator =(const AuthenticationError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AuthenticationError &operator =(AuthenticationError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AuthenticationError(AuthenticationError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    loginError SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO05loginD0yA2CmF"),
    notLoggedIn SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmF"),
    cannotRefreshUserData SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_loginError {  // impl struct for case loginError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::loginError;
    }
    SWIFT_INLINE_THUNK AuthenticationError operator()() const;
  } loginError SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO05loginD0yA2CmF");
  SWIFT_INLINE_THUNK bool isLoginError() const;

  inline const static struct _impl_notLoggedIn {  // impl struct for case notLoggedIn
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notLoggedIn;
    }
    SWIFT_INLINE_THUNK AuthenticationError operator()() const;
  } notLoggedIn SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmF");
  SWIFT_INLINE_THUNK bool isNotLoggedIn() const;

  inline const static struct _impl_cannotRefreshUserData {  // impl struct for case cannotRefreshUserData
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cannotRefreshUserData;
    }
    SWIFT_INLINE_THUNK AuthenticationError operator()() const;
  } cannotRefreshUserData SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmF");
  SWIFT_INLINE_THUNK bool isCannotRefreshUserData() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore19AuthenticationErrorO05loginD0yA2CmFWC) return cases::loginError;
    if (tag == _impl::$s13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmFWC) return cases::notLoggedIn;
    if (tag == _impl::$s13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmFWC) return cases::cannotRefreshUserData;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore19AuthenticationErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK AuthenticationError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AuthenticationError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AuthenticationError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AuthenticationError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore19AuthenticationErrorOD;
  static inline constexpr $s13CloneableCore19AuthenticationErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AuthenticationError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AuthenticationError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AuthenticationError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AuthenticationError returnNewValue(T callable) {
    auto result = AuthenticationError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore19AuthenticationErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::AuthenticationError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore19AuthenticationErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::AuthenticationError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::AuthenticationError> = true;
template<>
struct implClassFor<CloneableCore::AuthenticationError> { using type = CloneableCore::_impl::_impl_AuthenticationError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV") CloneableArray;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableArray> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableArray;

// Type metadata accessor for CloneableArray
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A5ArrayVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV") CloneableArray final {
public:
  SWIFT_INLINE_THUNK ~CloneableArray() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableArray(const CloneableArray &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableArray &operator =(const CloneableArray &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableArray &operator =(CloneableArray &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableArray(CloneableArray &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV12getJSONValueSSyF");
  static SWIFT_INLINE_THUNK CloneableArray init(const swift::Array<AnyCloneableData>& data) SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV4dataACSayAA03AnyA4DataVG_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A5ArrayV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableArray(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableArray _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableArray(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableArray;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A5ArrayVD;
  static inline constexpr $s13CloneableCore0A5ArrayVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableArray {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableArray &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableArray &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableArray returnNewValue(T callable) {
    auto result = CloneableArray::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A5ArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableArray> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A5ArrayVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableArray> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableArray> = true;
template<>
struct implClassFor<CloneableCore::CloneableArray> { using type = CloneableCore::_impl::_impl_CloneableArray; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO") CloneableAuthStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableAuthStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableAuthStatus;

// Type metadata accessor for CloneableAuthStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A10AuthStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableAuthStatus
extern "C" {
extern unsigned $s13CloneableCore0A10AuthStatusO7offlineyA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO10auth_erroryA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO14authenticatingyA2CmFWC;
extern unsigned $s13CloneableCore0A10AuthStatusO13authenticatedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO") CloneableAuthStatus final {
public:
  SWIFT_INLINE_THUNK ~CloneableAuthStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus(const CloneableAuthStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus &operator =(const CloneableAuthStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus &operator =(CloneableAuthStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableAuthStatus(CloneableAuthStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    offline SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO7offlineyA2CmF"),
    not_authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmF"),
    auth_error SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO10auth_erroryA2CmF"),
    authenticating SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO14authenticatingyA2CmF"),
    authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO13authenticatedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_offline {  // impl struct for case offline
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::offline;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } offline SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO7offlineyA2CmF");
  SWIFT_INLINE_THUNK bool isOffline() const;

  inline const static struct _impl_not_authenticated {  // impl struct for case not_authenticated
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::not_authenticated;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } not_authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmF");
  SWIFT_INLINE_THUNK bool isNot_authenticated() const;

  inline const static struct _impl_auth_error {  // impl struct for case auth_error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::auth_error;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } auth_error SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO10auth_erroryA2CmF");
  SWIFT_INLINE_THUNK bool isAuth_error() const;

  inline const static struct _impl_authenticating {  // impl struct for case authenticating
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::authenticating;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } authenticating SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO14authenticatingyA2CmF");
  SWIFT_INLINE_THUNK bool isAuthenticating() const;

  inline const static struct _impl_authenticated {  // impl struct for case authenticated
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::authenticated;
    }
    SWIFT_INLINE_THUNK CloneableAuthStatus operator()() const;
  } authenticated SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO13authenticatedyA2CmF");
  SWIFT_INLINE_THUNK bool isAuthenticated() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO7offlineyA2CmFWC) return cases::offline;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmFWC) return cases::not_authenticated;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO10auth_erroryA2CmFWC) return cases::auth_error;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO14authenticatingyA2CmFWC) return cases::authenticating;
    if (tag == _impl::$s13CloneableCore0A10AuthStatusO13authenticatedyA2CmFWC) return cases::authenticated;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A10AuthStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableAuthStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableAuthStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableAuthStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableAuthStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A10AuthStatusOD;
  static inline constexpr $s13CloneableCore0A10AuthStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableAuthStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableAuthStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableAuthStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableAuthStatus returnNewValue(T callable) {
    auto result = CloneableAuthStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A10AuthStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableAuthStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A10AuthStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableAuthStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableAuthStatus> = true;
template<>
struct implClassFor<CloneableCore::CloneableAuthStatus> { using type = CloneableCore::_impl::_impl_CloneableAuthStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV") CloneableBoolean;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableBoolean> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableBoolean;

// Type metadata accessor for CloneableBoolean
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A7BooleanVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV") CloneableBoolean final {
public:
  SWIFT_INLINE_THUNK ~CloneableBoolean() noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableBoolean(const CloneableBoolean &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableBoolean &operator =(const CloneableBoolean &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableBoolean &operator =(CloneableBoolean &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableBoolean(CloneableBoolean &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableBoolean init(bool value) SWIFT_SYMBOL("s:13CloneableCore0A7BooleanVyACSbcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A7BooleanV20getStringDescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableBoolean(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableBoolean _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableBoolean(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableBoolean;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A7BooleanVD;
  static inline constexpr $s13CloneableCore0A7BooleanVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableBoolean {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableBoolean &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableBoolean &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableBoolean returnNewValue(T callable) {
    auto result = CloneableBoolean::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A7BooleanVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableBoolean> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A7BooleanVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableBoolean> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableBoolean> = true;
template<>
struct implClassFor<CloneableCore::CloneableBoolean> { using type = CloneableCore::_impl::_impl_CloneableBoolean; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore0A5ColorV") CloneableColor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableColor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableColor;

// Type metadata accessor for CloneableColor
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A5ColorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A5ColorV") CloneableColor final {
public:
  SWIFT_INLINE_THUNK ~CloneableColor() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableColor(const CloneableColor &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableColor &operator =(const CloneableColor &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableColor &operator =(CloneableColor &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableColor(CloneableColor &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK float getR() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1rSfvp");
  SWIFT_INLINE_THUNK void setR(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1rSfvp");
  SWIFT_INLINE_THUNK float getG() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1gSfvp");
  SWIFT_INLINE_THUNK void setG(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1gSfvp");
  SWIFT_INLINE_THUNK float getB() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1bSfvp");
  SWIFT_INLINE_THUNK void setB(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1bSfvp");
  SWIFT_INLINE_THUNK float getA() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1aSfvp");
  SWIFT_INLINE_THUNK void setA(float value) SWIFT_SYMBOL("s:13CloneableCore0A5ColorV1aSfvp");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A5ColorV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableColor(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableColor _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableColor(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableColor;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A5ColorVD;
  static inline constexpr $s13CloneableCore0A5ColorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableColor {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableColor &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableColor &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableColor returnNewValue(T callable) {
    auto result = CloneableColor::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A5ColorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableColor> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A5ColorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableColor> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableColor> = true;
template<>
struct implClassFor<CloneableCore::CloneableColor> { using type = CloneableCore::_impl::_impl_CloneableColor; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO") CloneableConnectionState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableConnectionState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableConnectionState;

// Type metadata accessor for CloneableConnectionState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A15ConnectionStateOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableConnectionState
extern "C" {
extern unsigned $s13CloneableCore0A15ConnectionStateO10connectingyA2CmFWC;
extern unsigned $s13CloneableCore0A15ConnectionStateO9connectedyA2CmFWC;
extern unsigned $s13CloneableCore0A15ConnectionStateO12disconnectedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO") CloneableConnectionState final {
public:
  SWIFT_INLINE_THUNK ~CloneableConnectionState() noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableConnectionState(const CloneableConnectionState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableConnectionState &operator =(const CloneableConnectionState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableConnectionState &operator =(CloneableConnectionState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableConnectionState(CloneableConnectionState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    connecting SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO10connectingyA2CmF"),
    connected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO9connectedyA2CmF"),
    disconnected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO12disconnectedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_connecting {  // impl struct for case connecting
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::connecting;
    }
    SWIFT_INLINE_THUNK CloneableConnectionState operator()() const;
  } connecting SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO10connectingyA2CmF");
  SWIFT_INLINE_THUNK bool isConnecting() const;

  inline const static struct _impl_connected {  // impl struct for case connected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::connected;
    }
    SWIFT_INLINE_THUNK CloneableConnectionState operator()() const;
  } connected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO9connectedyA2CmF");
  SWIFT_INLINE_THUNK bool isConnected() const;

  inline const static struct _impl_disconnected {  // impl struct for case disconnected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::disconnected;
    }
    SWIFT_INLINE_THUNK CloneableConnectionState operator()() const;
  } disconnected SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO12disconnectedyA2CmF");
  SWIFT_INLINE_THUNK bool isDisconnected() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A15ConnectionStateO10connectingyA2CmFWC) return cases::connecting;
    if (tag == _impl::$s13CloneableCore0A15ConnectionStateO9connectedyA2CmFWC) return cases::connected;
    if (tag == _impl::$s13CloneableCore0A15ConnectionStateO12disconnectedyA2CmFWC) return cases::disconnected;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A15ConnectionStateO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableConnectionState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableConnectionState _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableConnectionState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableConnectionState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A15ConnectionStateOD;
  static inline constexpr $s13CloneableCore0A15ConnectionStateOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableConnectionState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableConnectionState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableConnectionState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableConnectionState returnNewValue(T callable) {
    auto result = CloneableConnectionState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A15ConnectionStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableConnectionState> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A15ConnectionStateOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableConnectionState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableConnectionState> = true;
template<>
struct implClassFor<CloneableCore::CloneableConnectionState> { using type = CloneableCore::_impl::_impl_CloneableConnectionState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO") CloneableSyncStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableSyncStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore37SyncManagerDeployedWorkflowChangeTypeO") SyncManagerDeployedWorkflowChangeType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncManagerDeployedWorkflowChangeType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO") RUNTIME_ENVIRONMENT;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::RUNTIME_ENVIRONMENT> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// CloneableCore is a class that provides core functionality for the Cloneable platform.
class SWIFT_SYMBOL("s:13CloneableCoreAAC") CloneableCore;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableCore> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableCore;
// Type metadata accessor for CloneableCore
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCoreAACMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCoreAAC") CloneableCore : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::String getAppID() SWIFT_SYMBOL("s:13CloneableCoreAAC5appIDSSvp");
  SWIFT_INLINE_THUNK void setAppID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCoreAAC5appIDSSvp");
  SWIFT_INLINE_THUNK CloneableConnectionState getConnection_state() SWIFT_SYMBOL("s:13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvp");
  SWIFT_INLINE_THUNK void setConnection_state(const CloneableConnectionState& value) SWIFT_SYMBOL("s:13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvp");
  SWIFT_INLINE_THUNK CloneableAuthStatus getAuth_status() SWIFT_SYMBOL("s:13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvp");
  SWIFT_INLINE_THUNK void setAuth_status(const CloneableAuthStatus& value) SWIFT_SYMBOL("s:13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvp");
  SWIFT_INLINE_THUNK CloneableSyncStatus getSync_status() SWIFT_SYMBOL("s:13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvp");
  SWIFT_INLINE_THUNK void setSync_status(const CloneableSyncStatus& value) SWIFT_SYMBOL("s:13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvp");
  SWIFT_INLINE_THUNK void signOut() SWIFT_SYMBOL("s:13CloneableCoreAAC7signOutyyF");
  SWIFT_INLINE_THUNK DataManager getDataCache() SWIFT_SYMBOL("s:13CloneableCoreAAC12getDataCacheAA0D7ManagerCyF");
  SWIFT_INLINE_THUNK CloneableConnectionState getConnectionStatus() SWIFT_SYMBOL("s:13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyF");
  SWIFT_INLINE_THUNK LocalCacheManager cache() SWIFT_SYMBOL("s:13CloneableCoreAAC5cacheAA17LocalCacheManagerCyF");
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT getRuntimeEnvironment() SWIFT_SYMBOL("s:13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyF");
  SWIFT_INLINE_THUNK void startWorkflow(const swift::String& workflowId) SWIFT_SYMBOL("s:13CloneableCoreAAC13startWorkflow10workflowIdySS_tF");
protected:
  SWIFT_INLINE_THUNK CloneableCore(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_CloneableCore;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCoreAACD;
  static inline constexpr $s13CloneableCoreAACD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableCore {
public:
static SWIFT_INLINE_THUNK CloneableCore makeRetained(void * _Nonnull ptr) noexcept { return CloneableCore(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableCore> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCoreAACMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::CloneableCore> { using type = CloneableCore::_impl::_impl_CloneableCore; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO") CloneableCredentials;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableCredentials> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableCredentials;

// Type metadata accessor for CloneableCredentials
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A11CredentialsOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableCredentials
extern "C" {
extern unsigned $s13CloneableCore0A11CredentialsO5auth0yACSS_tcACmFWC;
extern unsigned $s13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO") CloneableCredentials final {
public:
  SWIFT_INLINE_THUNK ~CloneableCredentials() noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableCredentials(const CloneableCredentials &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableCredentials &operator =(const CloneableCredentials &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableCredentials &operator =(CloneableCredentials &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableCredentials(CloneableCredentials &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    auth0 SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO5auth0yACSS_tcACmF"),
    apiKey SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_auth0 {  // impl struct for case auth0
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::auth0;
    }
    SWIFT_INLINE_THUNK CloneableCredentials operator()(const swift::String& val) const;
  } auth0 SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO5auth0yACSS_tcACmF");
  SWIFT_INLINE_THUNK bool isAuth0() const;
  SWIFT_INLINE_THUNK swift::String getAuth0() const;

  inline const static struct _impl_apiKey {  // impl struct for case apiKey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::apiKey;
    }
    SWIFT_INLINE_THUNK CloneableCredentials operator()(const swift::String& val) const;
  } apiKey SWIFT_SYMBOL("s:13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmF");
  SWIFT_INLINE_THUNK bool isApiKey() const;
  SWIFT_INLINE_THUNK swift::String getApiKey() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A11CredentialsO5auth0yACSS_tcACmFWC) return cases::auth0;
    if (tag == _impl::$s13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmFWC) return cases::apiKey;
    return cases::unknownDefault;
  }

private:
  SWIFT_INLINE_THUNK CloneableCredentials(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableCredentials _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableCredentials(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableCredentials;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A11CredentialsOD;
  static inline constexpr $s13CloneableCore0A11CredentialsOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableCredentials {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableCredentials &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableCredentials &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableCredentials returnNewValue(T callable) {
    auto result = CloneableCredentials::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A11CredentialsOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableCredentials> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A11CredentialsOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableCredentials> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableCredentials> = true;
template<>
struct implClassFor<CloneableCore::CloneableCredentials> { using type = CloneableCore::_impl::_impl_CloneableCredentials; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO") CloneableDataError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDataError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableDataError;

// Type metadata accessor for CloneableDataError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A9DataErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableDataError
extern "C" {
extern unsigned $s13CloneableCore0A9DataErrorO12invalidValueyA2CmFWC;
extern unsigned $s13CloneableCore0A9DataErrorO21implementationMissingyA2CmFWC;
extern unsigned $s13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmFWC;
extern unsigned $s13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO") CloneableDataError final {
public:
  SWIFT_INLINE_THUNK ~CloneableDataError() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataError(const CloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataError &operator =(const CloneableDataError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDataError &operator =(CloneableDataError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDataError(CloneableDataError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    invalidValue SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO12invalidValueyA2CmF"),
    implementationMissing SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO21implementationMissingyA2CmF"),
    errorLoadingFromFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmF"),
    errorSavingToFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_invalidValue {  // impl struct for case invalidValue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidValue;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } invalidValue SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO12invalidValueyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidValue() const;

  inline const static struct _impl_implementationMissing {  // impl struct for case implementationMissing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::implementationMissing;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } implementationMissing SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO21implementationMissingyA2CmF");
  SWIFT_INLINE_THUNK bool isImplementationMissing() const;

  inline const static struct _impl_errorLoadingFromFile {  // impl struct for case errorLoadingFromFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::errorLoadingFromFile;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } errorLoadingFromFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmF");
  SWIFT_INLINE_THUNK bool isErrorLoadingFromFile() const;

  inline const static struct _impl_errorSavingToFile {  // impl struct for case errorSavingToFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::errorSavingToFile;
    }
    SWIFT_INLINE_THUNK CloneableDataError operator()() const;
  } errorSavingToFile SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmF");
  SWIFT_INLINE_THUNK bool isErrorSavingToFile() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A9DataErrorO12invalidValueyA2CmFWC) return cases::invalidValue;
    if (tag == _impl::$s13CloneableCore0A9DataErrorO21implementationMissingyA2CmFWC) return cases::implementationMissing;
    if (tag == _impl::$s13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmFWC) return cases::errorLoadingFromFile;
    if (tag == _impl::$s13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmFWC) return cases::errorSavingToFile;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A9DataErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableDataError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDataError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDataError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDataError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A9DataErrorOD;
  static inline constexpr $s13CloneableCore0A9DataErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDataError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDataError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDataError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDataError returnNewValue(T callable) {
    auto result = CloneableDataError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A9DataErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDataError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A9DataErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDataError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDataError> = true;
template<>
struct implClassFor<CloneableCore::CloneableDataError> { using type = CloneableCore::_impl::_impl_CloneableDataError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV") CloneableDataObject;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDataObject> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableDataObject;

// Type metadata accessor for CloneableDataObject
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A10DataObjectVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV") CloneableDataObject final {
public:
  SWIFT_INLINE_THUNK ~CloneableDataObject() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataObject(const CloneableDataObject &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDataObject &operator =(const CloneableDataObject &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDataObject &operator =(CloneableDataObject &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDataObject(CloneableDataObject &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV12getJSONValueSSyF");
  static SWIFT_INLINE_THUNK CloneableDataObject init(const swift::String& data) SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV4dataACSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A10DataObjectV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableDataObject(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDataObject _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDataObject(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDataObject;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A10DataObjectVD;
  static inline constexpr $s13CloneableCore0A10DataObjectVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDataObject {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDataObject &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDataObject &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDataObject returnNewValue(T callable) {
    auto result = CloneableDataObject::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A10DataObjectVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDataObject> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A10DataObjectVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDataObject> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDataObject> = true;
template<>
struct implClassFor<CloneableCore::CloneableDataObject> { using type = CloneableCore::_impl::_impl_CloneableDataObject; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore0A4DateV") CloneableDate;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableDate> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableDate;

// Type metadata accessor for CloneableDate
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A4DateVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A4DateV") CloneableDate final {
public:
  SWIFT_INLINE_THUNK ~CloneableDate() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDate(const CloneableDate &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDate &operator =(const CloneableDate &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDate &operator =(CloneableDate &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDate(CloneableDate &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A4DateV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A4DateV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A4DateV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A4DateV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableDate(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDate _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDate(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDate;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A4DateVD;
  static inline constexpr $s13CloneableCore0A4DateVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDate {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDate &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDate &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDate returnNewValue(T callable) {
    auto result = CloneableDate::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A4DateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDate> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A4DateVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDate> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDate> = true;
template<>
struct implClassFor<CloneableCore::CloneableDate> { using type = CloneableCore::_impl::_impl_CloneableDate; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_CloneableDepthMap;

// Type metadata accessor for CloneableDepthMap
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A8DepthMapVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV") CloneableDepthMap final {
public:
  SWIFT_INLINE_THUNK ~CloneableDepthMap() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDepthMap(const CloneableDepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableDepthMap &operator =(const CloneableDepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableDepthMap &operator =(CloneableDepthMap &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableDepthMap(CloneableDepthMap &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK bool getComplexType() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV11complexTypeSbvp");
  SWIFT_INLINE_THUNK void setComplexType(bool value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV11complexTypeSbvp");
  SWIFT_INLINE_THUNK swift::Array<swift::Array<float>> getDepthMap() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvp");
  SWIFT_INLINE_THUNK void setDepthMap(const swift::Array<swift::Array<float>>& value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvp");
  SWIFT_INLINE_THUNK swift::Array<swift::Array<swift::Array<float>>> getUnprojectedDepth() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvp");
  SWIFT_INLINE_THUNK void setUnprojectedDepth(const swift::Array<swift::Array<swift::Array<float>>>& value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::Array<swift::Int>>> getConfidenceMap() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvp");
  SWIFT_INLINE_THUNK void setConfidenceMap(const swift::Optional<swift::Array<swift::Array<swift::Int>>>& value) SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvp");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A8DepthMapV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableDepthMap(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableDepthMap _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableDepthMap(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableDepthMap;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A8DepthMapVD;
  static inline constexpr $s13CloneableCore0A8DepthMapVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableDepthMap {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableDepthMap &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableDepthMap &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableDepthMap returnNewValue(T callable) {
    auto result = CloneableDepthMap::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableDepthMap> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A8DepthMapVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableDepthMap> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableDepthMap> = true;
template<>
struct implClassFor<CloneableCore::CloneableDepthMap> { using type = CloneableCore::_impl::_impl_CloneableDepthMap; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V") SyncedFileInformationV2;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncedFileInformationV2> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC") CloneableFileSyncEngine;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableFileSyncEngine> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableFileSyncEngine;
// Type metadata accessor for CloneableFileSyncEngine
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A14FileSyncEngineCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC") CloneableFileSyncEngine : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK OS_dispatch_queue *_Nonnull getSyncedFileQueue() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvp");
  SWIFT_INLINE_THUNK void setSyncedFileQueue(OS_dispatch_queue *_Nonnull value) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvp");
  SWIFT_INLINE_THUNK swift::Int getTotalFiles() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC10totalFilesSivp");
  SWIFT_INLINE_THUNK void setTotalFiles(swift::Int value) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC10totalFilesSivp");
  SWIFT_INLINE_THUNK swift::Int getFilesSynced() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC11filesSyncedSivp");
  SWIFT_INLINE_THUNK void setFilesSynced(swift::Int value) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC11filesSyncedSivp");
  SWIFT_INLINE_THUNK void processAndSyncObjectsNonCompleteRequests() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyF");
/// Get the file from the AnyCloneableData file options
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> getCloneableDataFromFile(const swift::String& fileName, const swift::String& fileType, const swift::String& displayName) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StF");
/// Function to see if a file already exists
  SWIFT_INLINE_THUNK bool fileExistsLocally(const swift::String& fileName) SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tF");
  SWIFT_INLINE_THUNK swift::Int getNumberOfDownloadedFiles() SWIFT_SYMBOL("s:13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyF");
protected:
  SWIFT_INLINE_THUNK CloneableFileSyncEngine(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_CloneableFileSyncEngine;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A14FileSyncEngineCD;
  static inline constexpr $s13CloneableCore0A14FileSyncEngineCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableFileSyncEngine {
public:
static SWIFT_INLINE_THUNK CloneableFileSyncEngine makeRetained(void * _Nonnull ptr) noexcept { return CloneableFileSyncEngine(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableFileSyncEngine> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A14FileSyncEngineCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::CloneableFileSyncEngine> { using type = CloneableCore::_impl::_impl_CloneableFileSyncEngine; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




class SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO") CloneableFileType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableFileType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableFileType;

// Type metadata accessor for CloneableFileType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A8FileTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableFileType
extern "C" {
extern unsigned $s13CloneableCore0A8FileTypeO3allyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO5imageyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO3pdfyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO10iosAIModelyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO9shapefileyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO3kmlyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO3kmzyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO7geotiffyA2CmFWC;
extern unsigned $s13CloneableCore0A8FileTypeO6rasteryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO") CloneableFileType final {
public:
  SWIFT_INLINE_THUNK ~CloneableFileType() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableFileType(const CloneableFileType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableFileType &operator =(const CloneableFileType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableFileType &operator =(CloneableFileType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableFileType(CloneableFileType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    all SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3allyA2CmF"),
    image SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO5imageyA2CmF"),
    pdf SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3pdfyA2CmF"),
    iosAIModel SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO10iosAIModelyA2CmF"),
    shapefile SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO9shapefileyA2CmF"),
    kml SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmlyA2CmF"),
    kmz SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmzyA2CmF"),
    geotiff SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO7geotiffyA2CmF"),
    raster SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO6rasteryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_all {  // impl struct for case all
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::all;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } all SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3allyA2CmF");
  SWIFT_INLINE_THUNK bool isAll() const;

  inline const static struct _impl_image {  // impl struct for case image
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::image;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } image SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO5imageyA2CmF");
  SWIFT_INLINE_THUNK bool isImage() const;

  inline const static struct _impl_pdf {  // impl struct for case pdf
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pdf;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } pdf SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3pdfyA2CmF");
  SWIFT_INLINE_THUNK bool isPdf() const;

  inline const static struct _impl_iosAIModel {  // impl struct for case iosAIModel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iosAIModel;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } iosAIModel SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO10iosAIModelyA2CmF");
  SWIFT_INLINE_THUNK bool isIosAIModel() const;

  inline const static struct _impl_shapefile {  // impl struct for case shapefile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::shapefile;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } shapefile SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO9shapefileyA2CmF");
  SWIFT_INLINE_THUNK bool isShapefile() const;

  inline const static struct _impl_kml {  // impl struct for case kml
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kml;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } kml SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmlyA2CmF");
  SWIFT_INLINE_THUNK bool isKml() const;

  inline const static struct _impl_kmz {  // impl struct for case kmz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kmz;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } kmz SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO3kmzyA2CmF");
  SWIFT_INLINE_THUNK bool isKmz() const;

  inline const static struct _impl_geotiff {  // impl struct for case geotiff
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::geotiff;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } geotiff SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO7geotiffyA2CmF");
  SWIFT_INLINE_THUNK bool isGeotiff() const;

  inline const static struct _impl_raster {  // impl struct for case raster
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::raster;
    }
    SWIFT_INLINE_THUNK CloneableFileType operator()() const;
  } raster SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO6rasteryA2CmF");
  SWIFT_INLINE_THUNK bool isRaster() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3allyA2CmFWC) return cases::all;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO5imageyA2CmFWC) return cases::image;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3pdfyA2CmFWC) return cases::pdf;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO10iosAIModelyA2CmFWC) return cases::iosAIModel;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO9shapefileyA2CmFWC) return cases::shapefile;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3kmlyA2CmFWC) return cases::kml;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO3kmzyA2CmFWC) return cases::kmz;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO7geotiffyA2CmFWC) return cases::geotiff;
    if (tag == _impl::$s13CloneableCore0A8FileTypeO6rasteryA2CmFWC) return cases::raster;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getContentType(const swift::Optional<swift::String>& fileExtension) const SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO010getContentD013fileExtensionS2SSg_tF");
  SWIFT_INLINE_THUNK swift::String getFileExtension(const swift::Optional<swift::String>& contentType) const SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO03getC9Extension07contentD0S2SSg_tF");
  static SWIFT_INLINE_THUNK swift::Optional<CloneableFileType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore0A8FileTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK CloneableFileType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableFileType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableFileType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableFileType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A8FileTypeOD;
  static inline constexpr $s13CloneableCore0A8FileTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableFileType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableFileType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableFileType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableFileType returnNewValue(T callable) {
    auto result = CloneableFileType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A8FileTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableFileType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A8FileTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableFileType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableFileType> = true;
template<>
struct implClassFor<CloneableCore::CloneableFileType> { using type = CloneableCore::_impl::_impl_CloneableFileType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A3KMLV") CloneableKML;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableKML> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableKML;

// Type metadata accessor for CloneableKML
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A3KMLVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A3KMLV") CloneableKML final {
public:
  SWIFT_INLINE_THUNK ~CloneableKML() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableKML(const CloneableKML &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableKML &operator =(const CloneableKML &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableKML &operator =(CloneableKML &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableKML(CloneableKML &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::String convertKMLToString() const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV18convertKMLToStringSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A3KMLV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableKML(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableKML _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableKML(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableKML;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A3KMLVD;
  static inline constexpr $s13CloneableCore0A3KMLVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableKML {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableKML &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableKML &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableKML returnNewValue(T callable) {
    auto result = CloneableKML::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A3KMLVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableKML> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A3KMLVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableKML> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableKML> = true;
template<>
struct implClassFor<CloneableCore::CloneableKML> { using type = CloneableCore::_impl::_impl_CloneableKML; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A6StringV") CloneableString;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableString> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore0A8LocationV") CloneableLocation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableLocation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableLocation;

// Type metadata accessor for CloneableLocation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A8LocationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A8LocationV") CloneableLocation final {
public:
  SWIFT_INLINE_THUNK ~CloneableLocation() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLocation(const CloneableLocation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLocation &operator =(const CloneableLocation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableLocation &operator =(CloneableLocation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableLocation(CloneableLocation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV2idSSvp");
  SWIFT_INLINE_THUNK void setId(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV2idSSvp");
  SWIFT_INLINE_THUNK double getLatitude() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8latitudeSdvp");
  SWIFT_INLINE_THUNK void setLatitude(double value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8latitudeSdvp");
  SWIFT_INLINE_THUNK double getLongitude() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV9longitudeSdvp");
  SWIFT_INLINE_THUNK void setLongitude(double value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV9longitudeSdvp");
  SWIFT_INLINE_THUNK swift::Optional<double> getAltitude() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8altitudeSdSgvp");
  SWIFT_INLINE_THUNK void setAltitude(const swift::Optional<double>& value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV8altitudeSdSgvp");
  SWIFT_INLINE_THUNK bool getComplexType() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV11complexTypeSbvp");
  SWIFT_INLINE_THUNK void setComplexType(bool value) SWIFT_SYMBOL("s:13CloneableCore0A8LocationV11complexTypeSbvp");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::String simpleDescription() const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV17simpleDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A8LocationV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableLocation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableLocation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableLocation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableLocation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A8LocationVD;
  static inline constexpr $s13CloneableCore0A8LocationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableLocation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableLocation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableLocation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableLocation returnNewValue(T callable) {
    auto result = CloneableLocation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A8LocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableLocation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A8LocationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableLocation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableLocation> = true;
template<>
struct implClassFor<CloneableCore::CloneableLocation> { using type = CloneableCore::_impl::_impl_CloneableLocation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore8LogLevelO") LogLevel;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LogLevel> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore25LoggerWorkflowInformationV") LoggerWorkflowInformation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LoggerWorkflowInformation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore26LoggerComponentInformationV") LoggerComponentInformation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LoggerComponentInformation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO") DisplayMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DisplayMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore0A3LogV") CloneableLog;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableLog> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableLog;

// Type metadata accessor for CloneableLog
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A3LogVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A3LogV") CloneableLog final {
public:
  SWIFT_INLINE_THUNK ~CloneableLog() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLog(const CloneableLog &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableLog &operator =(const CloneableLog &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableLog &operator =(CloneableLog &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableLog(CloneableLog &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV2idSSvp");
  SWIFT_INLINE_THUNK void setId(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV2idSSvp");
  SWIFT_INLINE_THUNK LogLevel getLogLevel() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV8logLevelAA0cE0Ovp");
  SWIFT_INLINE_THUNK void setLogLevel(const LogLevel& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV8logLevelAA0cE0Ovp");
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV7messageSSvp");
  SWIFT_INLINE_THUNK void setMessage(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV7messageSSvp");
  SWIFT_INLINE_THUNK swift::Optional<LoggerWorkflowInformation> getWorkflow() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvp");
  SWIFT_INLINE_THUNK void setWorkflow(const swift::Optional<LoggerWorkflowInformation>& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<LoggerComponentInformation> getComponent() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvp");
  SWIFT_INLINE_THUNK void setComponent(const swift::Optional<LoggerComponentInformation>& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DisplayMode> getDisplayMode() const SWIFT_SYMBOL("s:13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvp");
  SWIFT_INLINE_THUNK void setDisplayMode(const swift::Optional<DisplayMode>& value) SWIFT_SYMBOL("s:13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvp");
private:
  SWIFT_INLINE_THUNK CloneableLog(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableLog _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableLog(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableLog;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A3LogVD;
  static inline constexpr $s13CloneableCore0A3LogVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableLog {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableLog &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableLog &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableLog returnNewValue(T callable) {
    auto result = CloneableLog::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A3LogVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableLog> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A3LogVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableLog> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableLog> = true;
template<>
struct implClassFor<CloneableCore::CloneableLog> { using type = CloneableCore::_impl::_impl_CloneableLog; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC") CloneableLogger;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableLogger> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableLogger;
// Type metadata accessor for CloneableLogger
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6LoggerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC") CloneableLogger : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  static SWIFT_INLINE_THUNK swift::Array<CloneableLog> getLogs() SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC7getLogsSayAA0A3LogVGyFZ");
  static SWIFT_INLINE_THUNK void clearLogs() SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC9clearLogsyyFZ");
  static SWIFT_INLINE_THUNK void notifyObservers(const CloneableLog& log) SWIFT_SYMBOL("s:13CloneableCore0A6LoggerC15notifyObservers3logyAA0A3LogV_tFZ");
protected:
  SWIFT_INLINE_THUNK CloneableLogger(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_CloneableLogger;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6LoggerCD;
  static inline constexpr $s13CloneableCore0A6LoggerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableLogger {
public:
static SWIFT_INLINE_THUNK CloneableLogger makeRetained(void * _Nonnull ptr) noexcept { return CloneableLogger(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableLogger> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6LoggerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::CloneableLogger> { using type = CloneableCore::_impl::_impl_CloneableLogger; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A6NumberV") CloneableNumber;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableNumber> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableNumber;

// Type metadata accessor for CloneableNumber
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6NumberVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6NumberV") CloneableNumber final {
public:
  SWIFT_INLINE_THUNK ~CloneableNumber() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableNumber(const CloneableNumber &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableNumber &operator =(const CloneableNumber &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableNumber &operator =(CloneableNumber &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableNumber(CloneableNumber &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableNumber init(double value) SWIFT_SYMBOL("s:13CloneableCore0A6NumberVyACSdcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A6NumberV20getStringDescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableNumber(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableNumber _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableNumber(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableNumber;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6NumberVD;
  static inline constexpr $s13CloneableCore0A6NumberVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableNumber {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableNumber &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableNumber &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableNumber returnNewValue(T callable) {
    auto result = CloneableNumber::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A6NumberVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableNumber> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6NumberVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableNumber> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableNumber> = true;
template<>
struct implClassFor<CloneableCore::CloneableNumber> { using type = CloneableCore::_impl::_impl_CloneableNumber; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore0A6StatusV") CloneableStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableStatus;

// Type metadata accessor for CloneableStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6StatusVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6StatusV") CloneableStatus final {
public:
  SWIFT_INLINE_THUNK ~CloneableStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableStatus(const CloneableStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableStatus &operator =(const CloneableStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableStatus &operator =(CloneableStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableStatus(CloneableStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableStatus init(const swift::String& json) SWIFT_SYMBOL("s:13CloneableCore0A6StatusV4jsonACSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A6StatusV20getStringDescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6StatusVD;
  static inline constexpr $s13CloneableCore0A6StatusVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableStatus returnNewValue(T callable) {
    auto result = CloneableStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A6StatusVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6StatusVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableStatus> = true;
template<>
struct implClassFor<CloneableCore::CloneableStatus> { using type = CloneableCore::_impl::_impl_CloneableStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_CloneableString;

// Type metadata accessor for CloneableString
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A6StringVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A6StringV") CloneableString final {
public:
  SWIFT_INLINE_THUNK ~CloneableString() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableString(const CloneableString &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableString &operator =(const CloneableString &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableString &operator =(CloneableString &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableString(CloneableString &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A6StringV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A6StringV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
  static SWIFT_INLINE_THUNK CloneableString init(const swift::String& json) SWIFT_SYMBOL("s:13CloneableCore0A6StringV4jsonACSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A6StringV09getTypeAsC0SSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A6StringV03getC11DescriptionSSyF");
private:
  SWIFT_INLINE_THUNK CloneableString(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableString _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableString(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableString;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A6StringVD;
  static inline constexpr $s13CloneableCore0A6StringVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableString {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableString &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableString &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableString returnNewValue(T callable) {
    auto result = CloneableString::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A6StringVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableString> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A6StringVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableString> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableString> = true;
template<>
struct implClassFor<CloneableCore::CloneableString> { using type = CloneableCore::_impl::_impl_CloneableString; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO") CloneableSyncError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableSyncError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableSyncError;

// Type metadata accessor for CloneableSyncError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A9SyncErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableSyncError
extern "C" {
extern unsigned $s13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO04filecD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO06objectcD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO08workflowcD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmFWC;
extern unsigned $s13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO") CloneableSyncError final {
public:
  SWIFT_INLINE_THUNK ~CloneableSyncError() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncError(const CloneableSyncError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncError &operator =(const CloneableSyncError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableSyncError &operator =(CloneableSyncError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableSyncError(CloneableSyncError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAuthenticated SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmF"),
    fileSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO04filecD0yA2CmF"),
    objectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO06objectcD0yA2CmF"),
    workflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO08workflowcD0yA2CmF"),
    completedWorkflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmF"),
    notificationSyncSerror SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmF"),
    dataObjectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAuthenticated {  // impl struct for case notAuthenticated
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAuthenticated;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } notAuthenticated SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAuthenticated() const;

  inline const static struct _impl_fileSyncError {  // impl struct for case fileSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fileSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } fileSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO04filecD0yA2CmF");
  SWIFT_INLINE_THUNK bool isFileSyncError() const;

  inline const static struct _impl_objectSyncError {  // impl struct for case objectSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::objectSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } objectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO06objectcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isObjectSyncError() const;

  inline const static struct _impl_workflowSyncError {  // impl struct for case workflowSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::workflowSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } workflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO08workflowcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isWorkflowSyncError() const;

  inline const static struct _impl_completedWorkflowSyncError {  // impl struct for case completedWorkflowSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::completedWorkflowSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } completedWorkflowSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isCompletedWorkflowSyncError() const;

  inline const static struct _impl_notificationSyncSerror {  // impl struct for case notificationSyncSerror
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notificationSyncSerror;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } notificationSyncSerror SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmF");
  SWIFT_INLINE_THUNK bool isNotificationSyncSerror() const;

  inline const static struct _impl_dataObjectSyncError {  // impl struct for case dataObjectSyncError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dataObjectSyncError;
    }
    SWIFT_INLINE_THUNK CloneableSyncError operator()() const;
  } dataObjectSyncError SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmF");
  SWIFT_INLINE_THUNK bool isDataObjectSyncError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmFWC) return cases::notAuthenticated;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO04filecD0yA2CmFWC) return cases::fileSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO06objectcD0yA2CmFWC) return cases::objectSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO08workflowcD0yA2CmFWC) return cases::workflowSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmFWC) return cases::completedWorkflowSyncError;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmFWC) return cases::notificationSyncSerror;
    if (tag == _impl::$s13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmFWC) return cases::dataObjectSyncError;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A9SyncErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableSyncError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableSyncError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableSyncError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableSyncError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A9SyncErrorOD;
  static inline constexpr $s13CloneableCore0A9SyncErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableSyncError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableSyncError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableSyncError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableSyncError returnNewValue(T callable) {
    auto result = CloneableSyncError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A9SyncErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableSyncError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A9SyncErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableSyncError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableSyncError> = true;
template<>
struct implClassFor<CloneableCore::CloneableSyncError> { using type = CloneableCore::_impl::_impl_CloneableSyncError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_CloneableSyncStatus;

// Type metadata accessor for CloneableSyncStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A10SyncStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CloneableSyncStatus
extern "C" {
extern unsigned $s13CloneableCore0A10SyncStatusO10not_syncedyA2CmFWC;
extern unsigned $s13CloneableCore0A10SyncStatusO7syncingyA2CmFWC;
extern unsigned $s13CloneableCore0A10SyncStatusO6syncedyA2CmFWC;
extern unsigned $s13CloneableCore0A10SyncStatusO10sync_erroryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO") CloneableSyncStatus final {
public:
  SWIFT_INLINE_THUNK ~CloneableSyncStatus() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus(const CloneableSyncStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus &operator =(const CloneableSyncStatus &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus &operator =(CloneableSyncStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableSyncStatus(CloneableSyncStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    not_synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10not_syncedyA2CmF"),
    syncing SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO7syncingyA2CmF"),
    synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO6syncedyA2CmF"),
    sync_error SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10sync_erroryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_not_synced {  // impl struct for case not_synced
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::not_synced;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } not_synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10not_syncedyA2CmF");
  SWIFT_INLINE_THUNK bool isNot_synced() const;

  inline const static struct _impl_syncing {  // impl struct for case syncing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::syncing;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } syncing SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO7syncingyA2CmF");
  SWIFT_INLINE_THUNK bool isSyncing() const;

  inline const static struct _impl_synced {  // impl struct for case synced
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::synced;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } synced SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO6syncedyA2CmF");
  SWIFT_INLINE_THUNK bool isSynced() const;

  inline const static struct _impl_sync_error {  // impl struct for case sync_error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sync_error;
    }
    SWIFT_INLINE_THUNK CloneableSyncStatus operator()() const;
  } sync_error SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO10sync_erroryA2CmF");
  SWIFT_INLINE_THUNK bool isSync_error() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO10not_syncedyA2CmFWC) return cases::not_synced;
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO7syncingyA2CmFWC) return cases::syncing;
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO6syncedyA2CmFWC) return cases::synced;
    if (tag == _impl::$s13CloneableCore0A10SyncStatusO10sync_erroryA2CmFWC) return cases::sync_error;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore0A10SyncStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CloneableSyncStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableSyncStatus _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableSyncStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableSyncStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A10SyncStatusOD;
  static inline constexpr $s13CloneableCore0A10SyncStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableSyncStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableSyncStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableSyncStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableSyncStatus returnNewValue(T callable) {
    auto result = CloneableSyncStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A10SyncStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableSyncStatus> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A10SyncStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableSyncStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableSyncStatus> = true;
template<>
struct implClassFor<CloneableCore::CloneableSyncStatus> { using type = CloneableCore::_impl::_impl_CloneableSyncStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV") CloneableUUID;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CloneableUUID> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CloneableUUID;

// Type metadata accessor for CloneableUUID
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore0A4UUIDVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV") CloneableUUID final {
public:
  SWIFT_INLINE_THUNK ~CloneableUUID() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableUUID(const CloneableUUID &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CloneableUUID &operator =(const CloneableUUID &other) noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CloneableUUID &operator =(CloneableUUID &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CloneableUUID(CloneableUUID &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getJSONValue() const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV12getJSONValueSSyF");
  SWIFT_INLINE_THUNK swift::String getTypeAsString() const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV15getTypeAsStringSSyF");
  SWIFT_INLINE_THUNK swift::String getStringDescription() const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV20getStringDescriptionSSyF");
  SWIFT_INLINE_THUNK swift::Optional<JXValue> getJXValue(const JXContext& context) const SWIFT_SYMBOL("s:13CloneableCore0A4UUIDV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF");
private:
  SWIFT_INLINE_THUNK CloneableUUID(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CloneableUUID _make() noexcept {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CloneableUUID(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CloneableUUID;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore0A4UUIDVD;
  static inline constexpr $s13CloneableCore0A4UUIDVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CloneableUUID {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CloneableUUID &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CloneableUUID &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CloneableUUID returnNewValue(T callable) {
    auto result = CloneableUUID::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore0A4UUIDVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CloneableUUID> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore0A4UUIDVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CloneableUUID> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CloneableUUID> = true;
template<>
struct implClassFor<CloneableCore::CloneableUUID> { using type = CloneableCore::_impl::_impl_CloneableUUID; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




class SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO") CompletedWorkflowCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::CompletedWorkflowCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_CompletedWorkflowCallType;

// Type metadata accessor for CompletedWorkflowCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore25CompletedWorkflowCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CompletedWorkflowCallType
extern "C" {
extern unsigned $s13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmFWC;
extern unsigned $s13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO") CompletedWorkflowCallType final {
public:
  SWIFT_INLINE_THUNK ~CompletedWorkflowCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType(const CompletedWorkflowCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType &operator =(const CompletedWorkflowCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType &operator =(CompletedWorkflowCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CompletedWorkflowCallType(CompletedWorkflowCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    startWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmF"),
    updateWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_startWorkflow {  // impl struct for case startWorkflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::startWorkflow;
    }
    SWIFT_INLINE_THUNK CompletedWorkflowCallType operator()() const;
  } startWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmF");
  SWIFT_INLINE_THUNK bool isStartWorkflow() const;

  inline const static struct _impl_updateWorkflow {  // impl struct for case updateWorkflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::updateWorkflow;
    }
    SWIFT_INLINE_THUNK CompletedWorkflowCallType operator()() const;
  } updateWorkflow SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmF");
  SWIFT_INLINE_THUNK bool isUpdateWorkflow() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmFWC) return cases::startWorkflow;
    if (tag == _impl::$s13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmFWC) return cases::updateWorkflow;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<CompletedWorkflowCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore25CompletedWorkflowCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK CompletedWorkflowCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CompletedWorkflowCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CompletedWorkflowCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CompletedWorkflowCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore25CompletedWorkflowCallTypeOD;
  static inline constexpr $s13CloneableCore25CompletedWorkflowCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CompletedWorkflowCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CompletedWorkflowCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CompletedWorkflowCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CompletedWorkflowCallType returnNewValue(T callable) {
    auto result = CompletedWorkflowCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::CompletedWorkflowCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore25CompletedWorkflowCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::CompletedWorkflowCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::CompletedWorkflowCallType> = true;
template<>
struct implClassFor<CloneableCore::CompletedWorkflowCallType> { using type = CloneableCore::_impl::_impl_CompletedWorkflowCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO") ComponentType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ComponentType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO") ComponentRuntime;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ComponentRuntime> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore9ComponentV") Component;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::Component> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_Component;

// Type metadata accessor for Component
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore9ComponentVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore9ComponentV") Component final {
public:
  SWIFT_INLINE_THUNK ~Component() noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Component(const Component &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Component &operator =(const Component &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Component &operator =(Component &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Component(Component &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13CloneableCore9ComponentV2idSSvp");
  SWIFT_INLINE_THUNK void setId(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9ComponentV2idSSvp");
  SWIFT_INLINE_THUNK ComponentType getType() const SWIFT_SYMBOL("s:13CloneableCore9ComponentV4typeAA0C4TypeOvp");
  SWIFT_INLINE_THUNK void setType(const ComponentType& value) SWIFT_SYMBOL("s:13CloneableCore9ComponentV4typeAA0C4TypeOvp");
  SWIFT_INLINE_THUNK swift::Array<ComponentRuntime> getRuntimes() const SWIFT_SYMBOL("s:13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvp");
  SWIFT_INLINE_THUNK void setRuntimes(const swift::Array<ComponentRuntime>& value) SWIFT_SYMBOL("s:13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvp");
private:
  SWIFT_INLINE_THUNK Component(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Component _make() noexcept {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Component(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Component;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore9ComponentVD;
  static inline constexpr $s13CloneableCore9ComponentVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Component {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Component &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Component &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Component returnNewValue(T callable) {
    auto result = Component::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore9ComponentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::Component> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore9ComponentVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::Component> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::Component> = true;
template<>
struct implClassFor<CloneableCore::Component> { using type = CloneableCore::_impl::_impl_Component; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_ComponentRuntime;

// Type metadata accessor for ComponentRuntime
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore16ComponentRuntimeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ComponentRuntime
extern "C" {
extern unsigned $s13CloneableCore16ComponentRuntimeO3iosyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO5cloudyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO3webyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO7androidyA2CmFWC;
extern unsigned $s13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO") ComponentRuntime final {
public:
  SWIFT_INLINE_THUNK ~ComponentRuntime() noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentRuntime(const ComponentRuntime &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentRuntime &operator =(const ComponentRuntime &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ComponentRuntime &operator =(ComponentRuntime &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ComponentRuntime(ComponentRuntime &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    ios SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3iosyA2CmF"),
    cloud SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO5cloudyA2CmF"),
    web SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3webyA2CmF"),
    android SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO7androidyA2CmF"),
    edge_linux SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_ios {  // impl struct for case ios
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ios;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } ios SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3iosyA2CmF");
  SWIFT_INLINE_THUNK bool isIos() const;

  inline const static struct _impl_cloud {  // impl struct for case cloud
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } cloud SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO5cloudyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud() const;

  inline const static struct _impl_web {  // impl struct for case web
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::web;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } web SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO3webyA2CmF");
  SWIFT_INLINE_THUNK bool isWeb() const;

  inline const static struct _impl_android {  // impl struct for case android
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::android;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } android SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO7androidyA2CmF");
  SWIFT_INLINE_THUNK bool isAndroid() const;

  inline const static struct _impl_edge_linux {  // impl struct for case edge_linux
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::edge_linux;
    }
    SWIFT_INLINE_THUNK ComponentRuntime operator()() const;
  } edge_linux SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmF");
  SWIFT_INLINE_THUNK bool isEdge_linux() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO3iosyA2CmFWC) return cases::ios;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO5cloudyA2CmFWC) return cases::cloud;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO3webyA2CmFWC) return cases::web;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO7androidyA2CmFWC) return cases::android;
    if (tag == _impl::$s13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmFWC) return cases::edge_linux;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ComponentRuntime> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore16ComponentRuntimeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ComponentRuntime(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ComponentRuntime _make() noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ComponentRuntime(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ComponentRuntime;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore16ComponentRuntimeOD;
  static inline constexpr $s13CloneableCore16ComponentRuntimeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ComponentRuntime {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ComponentRuntime &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ComponentRuntime &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ComponentRuntime returnNewValue(T callable) {
    auto result = ComponentRuntime::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore16ComponentRuntimeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ComponentRuntime> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore16ComponentRuntimeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ComponentRuntime> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ComponentRuntime> = true;
template<>
struct implClassFor<CloneableCore::ComponentRuntime> { using type = CloneableCore::_impl::_impl_ComponentRuntime; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_ComponentType;

// Type metadata accessor for ComponentType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore13ComponentTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ComponentType
extern "C" {
extern unsigned $s13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO2uiyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO10processingyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO6objectyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO7logicalyA2CmFWC;
extern unsigned $s13CloneableCore13ComponentTypeO9file_datayA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO") ComponentType final {
public:
  SWIFT_INLINE_THUNK ~ComponentType() noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentType(const ComponentType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ComponentType &operator =(const ComponentType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ComponentType &operator =(ComponentType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ComponentType(ComponentType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    ios_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmF"),
    ios_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmF"),
    cloud_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmF"),
    cloud_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmF"),
    ui SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO2uiyA2CmF"),
    processing SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO10processingyA2CmF"),
    object SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO6objectyA2CmF"),
    logical SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO7logicalyA2CmF"),
    file_data SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO9file_datayA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_ios_workflow_start {  // impl struct for case ios_workflow_start
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ios_workflow_start;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } ios_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmF");
  SWIFT_INLINE_THUNK bool isIos_workflow_start() const;

  inline const static struct _impl_ios_workflow_end {  // impl struct for case ios_workflow_end
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ios_workflow_end;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } ios_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmF");
  SWIFT_INLINE_THUNK bool isIos_workflow_end() const;

  inline const static struct _impl_cloud_workflow_start {  // impl struct for case cloud_workflow_start
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud_workflow_start;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } cloud_workflow_start SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud_workflow_start() const;

  inline const static struct _impl_cloud_workflow_end {  // impl struct for case cloud_workflow_end
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud_workflow_end;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } cloud_workflow_end SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud_workflow_end() const;

  inline const static struct _impl_ui {  // impl struct for case ui
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ui;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } ui SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO2uiyA2CmF");
  SWIFT_INLINE_THUNK bool isUi() const;

  inline const static struct _impl_processing {  // impl struct for case processing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::processing;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } processing SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO10processingyA2CmF");
  SWIFT_INLINE_THUNK bool isProcessing() const;

  inline const static struct _impl_object {  // impl struct for case object
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::object;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } object SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO6objectyA2CmF");
  SWIFT_INLINE_THUNK bool isObject() const;

  inline const static struct _impl_logical {  // impl struct for case logical
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::logical;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } logical SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO7logicalyA2CmF");
  SWIFT_INLINE_THUNK bool isLogical() const;

  inline const static struct _impl_file_data {  // impl struct for case file_data
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::file_data;
    }
    SWIFT_INLINE_THUNK ComponentType operator()() const;
  } file_data SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO9file_datayA2CmF");
  SWIFT_INLINE_THUNK bool isFile_data() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmFWC) return cases::ios_workflow_start;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmFWC) return cases::ios_workflow_end;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmFWC) return cases::cloud_workflow_start;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmFWC) return cases::cloud_workflow_end;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO2uiyA2CmFWC) return cases::ui;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO10processingyA2CmFWC) return cases::processing;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO6objectyA2CmFWC) return cases::object;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO7logicalyA2CmFWC) return cases::logical;
    if (tag == _impl::$s13CloneableCore13ComponentTypeO9file_datayA2CmFWC) return cases::file_data;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ComponentType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore13ComponentTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ComponentType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ComponentType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ComponentType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ComponentType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore13ComponentTypeOD;
  static inline constexpr $s13CloneableCore13ComponentTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ComponentType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ComponentType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ComponentType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ComponentType returnNewValue(T callable) {
    auto result = ComponentType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore13ComponentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ComponentType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore13ComponentTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ComponentType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ComponentType> = true;
template<>
struct implClassFor<CloneableCore::ComponentType> { using type = CloneableCore::_impl::_impl_ComponentType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Class with static components that the framework can access and the view builder can use
class SWIFT_SYMBOL("s:13CloneableCore10ComponentsC") Components;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::Components> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_Components;
// Type metadata accessor for Components
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10ComponentsCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10ComponentsC") Components : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// add components to the static variable
  static SWIFT_INLINE_THUNK void addComponent(const Component& component) SWIFT_SYMBOL("s:13CloneableCore10ComponentsC12addComponent9componentyAA0E0V_tFZ");
protected:
  SWIFT_INLINE_THUNK Components(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_Components;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10ComponentsCD;
  static inline constexpr $s13CloneableCore10ComponentsCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Components {
public:
static SWIFT_INLINE_THUNK Components makeRetained(void * _Nonnull ptr) noexcept { return Components(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::Components> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10ComponentsCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::Components> { using type = CloneableCore::_impl::_impl_Components; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




/// Class that will act as a data cache to hold output data from components
class SWIFT_SYMBOL("s:13CloneableCore9DataCacheC") DataCache;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataCache> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataCache;
// Type metadata accessor for DataCache
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore9DataCacheCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore9DataCacheC") DataCache : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK DataCache(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DataCache;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore9DataCacheCD;
  static inline constexpr $s13CloneableCore9DataCacheCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataCache {
public:
static SWIFT_INLINE_THUNK DataCache makeRetained(void * _Nonnull ptr) noexcept { return DataCache(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataCache> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore9DataCacheCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DataCache> { using type = CloneableCore::_impl::_impl_DataCache; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore9DataInputV") DataInput;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataInput> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataInput;

// Type metadata accessor for DataInput
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore9DataInputVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore9DataInputV") DataInput final {
public:
  SWIFT_INLINE_THUNK ~DataInput() noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataInput(const DataInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataInput &operator =(const DataInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataInput &operator =(DataInput &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataInput(DataInput &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getComponentDynamicID() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV18componentDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setComponentDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV18componentDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getInputDynamicID() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV14inputDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setInputDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV14inputDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getInputStaticID() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV13inputStaticIDSSvp");
  SWIFT_INLINE_THUNK void setInputStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV13inputStaticIDSSvp");
  SWIFT_INLINE_THUNK AnyCloneableData getData() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK void setData(const AnyCloneableData& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getBatch() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV5batchSiSgvp");
  SWIFT_INLINE_THUNK void setBatch(const swift::Optional<swift::Int>& value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV5batchSiSgvp");
  SWIFT_INLINE_THUNK bool getCurrentBatch() const SWIFT_SYMBOL("s:13CloneableCore9DataInputV12currentBatchSbvp");
  SWIFT_INLINE_THUNK void setCurrentBatch(bool value) SWIFT_SYMBOL("s:13CloneableCore9DataInputV12currentBatchSbvp");
private:
  SWIFT_INLINE_THUNK DataInput(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataInput _make() noexcept {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataInput(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataInput;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore9DataInputVD;
  static inline constexpr $s13CloneableCore9DataInputVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataInput {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataInput &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataInput &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataInput returnNewValue(T callable) {
    auto result = DataInput::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore9DataInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataInput> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore9DataInputVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DataInput> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DataInput> = true;
template<>
struct implClassFor<CloneableCore::DataInput> { using type = CloneableCore::_impl::_impl_DataInput; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore11DataManagerC") DataManager;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataManager> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataManager;
// Type metadata accessor for DataManager
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11DataManagerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11DataManagerC") DataManager : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK CloneableFileSyncEngine getFile_sync_engine() SWIFT_SYMBOL("s:13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvp");
  SWIFT_INLINE_THUNK void setFile_sync_engine(const CloneableFileSyncEngine& value) SWIFT_SYMBOL("s:13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvp");
  SWIFT_INLINE_THUNK void clearFileCache() SWIFT_SYMBOL("s:13CloneableCore11DataManagerC14clearFileCacheyyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getUserId() SWIFT_SYMBOL("s:13CloneableCore11DataManagerC9getUserIdSSSgyF");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> canProceed(const swift::String& auth0_jwt) SWIFT_SYMBOL("s:13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tF");
protected:
  SWIFT_INLINE_THUNK DataManager(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DataManager;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11DataManagerCD;
  static inline constexpr $s13CloneableCore11DataManagerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataManager {
public:
static SWIFT_INLINE_THUNK DataManager makeRetained(void * _Nonnull ptr) noexcept { return DataManager(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataManager> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11DataManagerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DataManager> { using type = CloneableCore::_impl::_impl_DataManager; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

























class SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO") DataObjectCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataObjectCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataObjectCallType;

// Type metadata accessor for DataObjectCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore18DataObjectCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DataObjectCallType
extern "C" {
extern unsigned $s13CloneableCore18DataObjectCallTypeO13createRequestyA2CmFWC;
extern unsigned $s13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO") DataObjectCallType final {
public:
  SWIFT_INLINE_THUNK ~DataObjectCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataObjectCallType(const DataObjectCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataObjectCallType &operator =(const DataObjectCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataObjectCallType &operator =(DataObjectCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataObjectCallType(DataObjectCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    createRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13createRequestyA2CmF"),
    updateRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_createRequest {  // impl struct for case createRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::createRequest;
    }
    SWIFT_INLINE_THUNK DataObjectCallType operator()() const;
  } createRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13createRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isCreateRequest() const;

  inline const static struct _impl_updateRequest {  // impl struct for case updateRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::updateRequest;
    }
    SWIFT_INLINE_THUNK DataObjectCallType operator()() const;
  } updateRequest SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isUpdateRequest() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore18DataObjectCallTypeO13createRequestyA2CmFWC) return cases::createRequest;
    if (tag == _impl::$s13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmFWC) return cases::updateRequest;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DataObjectCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore18DataObjectCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DataObjectCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataObjectCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataObjectCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataObjectCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore18DataObjectCallTypeOD;
  static inline constexpr $s13CloneableCore18DataObjectCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataObjectCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataObjectCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataObjectCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataObjectCallType returnNewValue(T callable) {
    auto result = DataObjectCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore18DataObjectCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataObjectCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore18DataObjectCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DataObjectCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DataObjectCallType> = true;
template<>
struct implClassFor<CloneableCore::DataObjectCallType> { using type = CloneableCore::_impl::_impl_DataObjectCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {







class SWIFT_SYMBOL("s:13CloneableCore11TargetInputV") TargetInput;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::TargetInput> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
class SWIFT_SYMBOL("s:13CloneableCore10DataOutputV") DataOutput;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DataOutput> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DataOutput;

// Type metadata accessor for DataOutput
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10DataOutputVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10DataOutputV") DataOutput final {
public:
  SWIFT_INLINE_THUNK ~DataOutput() noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataOutput(const DataOutput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataOutput &operator =(const DataOutput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataOutput &operator =(DataOutput &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataOutput(DataOutput &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getOutputCount() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11outputCountSivp");
  SWIFT_INLINE_THUNK void setOutputCount(swift::Int value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11outputCountSivp");
  SWIFT_INLINE_THUNK swift::String getDynamicOutputID() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV07dynamicD2IDSSvp");
  SWIFT_INLINE_THUNK void setDynamicOutputID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV07dynamicD2IDSSvp");
  SWIFT_INLINE_THUNK AnyCloneableData getData() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK void setData(const AnyCloneableData& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV4dataAA03AnyaC0Vvp");
  SWIFT_INLINE_THUNK swift::String getStaticComponentID() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV17staticComponentIDSSvp");
  SWIFT_INLINE_THUNK void setStaticComponentID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV17staticComponentIDSSvp");
  SWIFT_INLINE_THUNK swift::String getDynamicComponentID() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV18dynamicComponentIDSSvp");
  SWIFT_INLINE_THUNK void setDynamicComponentID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV18dynamicComponentIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTypeDescription() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV15typeDescriptionSSvp");
  SWIFT_INLINE_THUNK void setTypeDescription(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV15typeDescriptionSSvp");
  SWIFT_INLINE_THUNK ComponentType getOutputComponentType() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setOutputComponentType(const ComponentType& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<TargetInput> getTargetInput() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvp");
  SWIFT_INLINE_THUNK void setTargetInput(const swift::Optional<TargetInput>& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getBatch() const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV5batchSiSgvp");
  SWIFT_INLINE_THUNK void setBatch(const swift::Optional<swift::Int>& value) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV5batchSiSgvp");
  static SWIFT_INLINE_THUNK DataOutput init(const AnyCloneableData& data, const swift::String& staticComponentID, const swift::String& dynamicComponentID, const swift::String& dynamicOutputID, const ComponentType& outputComponentType, const swift::Optional<TargetInput>& targetInput) SWIFT_SYMBOL("s:13CloneableCore10DataOutputV4data17staticComponentID07dynamicgH00idH006outputG4Type11targetInputAcA03AnyaC0V_S3SAA0gK0OAA06TargetM0VSgtcfc");
  SWIFT_INLINE_THUNK DataInput convertToDataInput(bool firstCall) const SWIFT_SYMBOL("s:13CloneableCore10DataOutputV09convertToC5Input9firstCallAA0cG0VSb_tF");
private:
  SWIFT_INLINE_THUNK DataOutput(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataOutput _make() noexcept {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataOutput(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataOutput;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10DataOutputVD;
  static inline constexpr $s13CloneableCore10DataOutputVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataOutput {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataOutput &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataOutput &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataOutput returnNewValue(T callable) {
    auto result = DataOutput::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore10DataOutputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DataOutput> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10DataOutputVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DataOutput> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DataOutput> = true;
template<>
struct implClassFor<CloneableCore::DataOutput> { using type = CloneableCore::_impl::_impl_DataOutput; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Database manager handles all of the connections and the local cache
class SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC") DatabaseManager;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DatabaseManager> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DatabaseManager;
// Type metadata accessor for DatabaseManager
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore15DatabaseManagerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC") DatabaseManager : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::Optional<Connection> getConnection() SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvp");
  SWIFT_INLINE_THUNK void setConnection(const swift::Optional<Connection>& value) SWIFT_SYMBOL("s:13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvp");
protected:
  SWIFT_INLINE_THUNK DatabaseManager(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DatabaseManager;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore15DatabaseManagerCD;
  static inline constexpr $s13CloneableCore15DatabaseManagerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DatabaseManager {
public:
static SWIFT_INLINE_THUNK DatabaseManager makeRetained(void * _Nonnull ptr) noexcept { return DatabaseManager(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DatabaseManager> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore15DatabaseManagerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DatabaseManager> { using type = CloneableCore::_impl::_impl_DatabaseManager; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore8DepthMapV") DepthMap;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DepthMap> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DepthMap;

// Type metadata accessor for DepthMap
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8DepthMapVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8DepthMapV") DepthMap final {
public:
  SWIFT_INLINE_THUNK ~DepthMap() noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DepthMap(const DepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DepthMap &operator =(const DepthMap &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DepthMap &operator =(DepthMap &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DepthMap(DepthMap &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK DepthMap(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DepthMap _make() noexcept {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DepthMap(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DepthMap;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8DepthMapVD;
  static inline constexpr $s13CloneableCore8DepthMapVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DepthMap {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DepthMap &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DepthMap &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DepthMap returnNewValue(T callable) {
    auto result = DepthMap::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore8DepthMapVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DepthMap> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8DepthMapVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DepthMap> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DepthMap> = true;
template<>
struct implClassFor<CloneableCore::DepthMap> { using type = CloneableCore::_impl::_impl_DepthMap; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore14DeviceServicesC") DeviceServices;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DeviceServices> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_DeviceServices;
// Type metadata accessor for DeviceServices
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore14DeviceServicesCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore14DeviceServicesC") DeviceServices : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK DeviceServices(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_DeviceServices;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore14DeviceServicesCD;
  static inline constexpr $s13CloneableCore14DeviceServicesCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DeviceServices {
public:
static SWIFT_INLINE_THUNK DeviceServices makeRetained(void * _Nonnull ptr) noexcept { return DeviceServices(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DeviceServices> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore14DeviceServicesCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::DeviceServices> { using type = CloneableCore::_impl::_impl_DeviceServices; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_DisplayMode;

// Type metadata accessor for DisplayMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11DisplayModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DisplayMode
extern "C" {
extern unsigned $s13CloneableCore11DisplayModeO3topyA2CmFWC;
extern unsigned $s13CloneableCore11DisplayModeO6middleyA2CmFWC;
extern unsigned $s13CloneableCore11DisplayModeO6draweryA2CmFWC;
extern unsigned $s13CloneableCore11DisplayModeO5sheetyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO") DisplayMode final {
public:
  SWIFT_INLINE_THUNK ~DisplayMode() noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DisplayMode(const DisplayMode &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DisplayMode &operator =(const DisplayMode &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DisplayMode &operator =(DisplayMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DisplayMode(DisplayMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    top SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO3topyA2CmF"),
    middle SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6middleyA2CmF"),
    drawer SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6draweryA2CmF"),
    sheet SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO5sheetyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_top {  // impl struct for case top
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::top;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } top SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO3topyA2CmF");
  SWIFT_INLINE_THUNK bool isTop() const;

  inline const static struct _impl_middle {  // impl struct for case middle
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::middle;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } middle SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6middleyA2CmF");
  SWIFT_INLINE_THUNK bool isMiddle() const;

  inline const static struct _impl_drawer {  // impl struct for case drawer
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::drawer;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } drawer SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO6draweryA2CmF");
  SWIFT_INLINE_THUNK bool isDrawer() const;

  inline const static struct _impl_sheet {  // impl struct for case sheet
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sheet;
    }
    SWIFT_INLINE_THUNK DisplayMode operator()() const;
  } sheet SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO5sheetyA2CmF");
  SWIFT_INLINE_THUNK bool isSheet() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore11DisplayModeO3topyA2CmFWC) return cases::top;
    if (tag == _impl::$s13CloneableCore11DisplayModeO6middleyA2CmFWC) return cases::middle;
    if (tag == _impl::$s13CloneableCore11DisplayModeO6draweryA2CmFWC) return cases::drawer;
    if (tag == _impl::$s13CloneableCore11DisplayModeO5sheetyA2CmFWC) return cases::sheet;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore11DisplayModeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DisplayMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DisplayMode _make() noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DisplayMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DisplayMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11DisplayModeOD;
  static inline constexpr $s13CloneableCore11DisplayModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DisplayMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DisplayMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DisplayMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DisplayMode returnNewValue(T callable) {
    auto result = DisplayMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore11DisplayModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::DisplayMode> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11DisplayModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::DisplayMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::DisplayMode> = true;
template<>
struct implClassFor<CloneableCore::DisplayMode> { using type = CloneableCore::_impl::_impl_DisplayMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV") FieldFileInformation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FieldFileInformation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FieldFileInformation;

// Type metadata accessor for FieldFileInformation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore20FieldFileInformationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV") FieldFileInformation final {
public:
  SWIFT_INLINE_THUNK ~FieldFileInformation() noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldFileInformation(const FieldFileInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldFileInformation &operator =(const FieldFileInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldFileInformation &operator =(FieldFileInformation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldFileInformation(FieldFileInformation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileExtension() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV13fileExtensionSSSgvp");
  SWIFT_INLINE_THUNK void setFileExtension(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV13fileExtensionSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileName() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileNameSSSgvp");
  SWIFT_INLINE_THUNK void setFileName(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileNameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getFileSize() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileSizeSiSgvp");
  SWIFT_INLINE_THUNK void setFileSize(const swift::Optional<swift::Int>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileSizeSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileType() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileTypeSSSgvp");
  SWIFT_INLINE_THUNK void setFileType(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV8fileTypeSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getFileUrl() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV7fileUrlSSSgvp");
  SWIFT_INLINE_THUNK void setFileUrl(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV7fileUrlSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStorageAuthProviderName() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvp");
  SWIFT_INLINE_THUNK void setStorageAuthProviderName(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStorageAuthProviderRefID() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvp");
  SWIFT_INLINE_THUNK void setStorageAuthProviderRefID(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStorageProvider() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV15storageProviderSSSgvp");
  SWIFT_INLINE_THUNK void setStorageProvider(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV15storageProviderSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getOne_way_sync() const SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV12one_way_syncSbSgvp");
  SWIFT_INLINE_THUNK void setOne_way_sync(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV12one_way_syncSbSgvp");
  static SWIFT_INLINE_THUNK FieldFileInformation init(const swift::Optional<swift::String>& fileExtension, const swift::Optional<swift::String>& fileName, const swift::Optional<swift::Int>& fileSize, const swift::Optional<swift::String>& fileType, const swift::Optional<swift::String>& fileUrl, const swift::Optional<swift::String>& storageAuthProviderName, const swift::Optional<swift::String>& storageAuthProviderRefID, const swift::Optional<swift::String>& storageProvider, const swift::Optional<bool>& one_way_sync) SWIFT_SYMBOL("s:13CloneableCore20FieldFileInformationV13fileExtension0F4Name0F4Size0F4Type0F3Url019storageAuthProviderH00lmN5RefID0lN012one_way_syncACSSSg_AMSiSgA5MSbSgtcfc");
private:
  SWIFT_INLINE_THUNK FieldFileInformation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldFileInformation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldFileInformation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldFileInformation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore20FieldFileInformationVD;
  static inline constexpr $s13CloneableCore20FieldFileInformationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldFileInformation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldFileInformation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldFileInformation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldFileInformation returnNewValue(T callable) {
    auto result = FieldFileInformation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore20FieldFileInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FieldFileInformation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore20FieldFileInformationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FieldFileInformation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FieldFileInformation> = true;
template<>
struct implClassFor<CloneableCore::FieldFileInformation> { using type = CloneableCore::_impl::_impl_FieldFileInformation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO") FileInformationCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileInformationCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileInformationCallType;

// Type metadata accessor for FileInformationCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore23FileInformationCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum FileInformationCallType
extern "C" {
extern unsigned $s13CloneableCore23FileInformationCallTypeO06createC0yA2CmFWC;
extern unsigned $s13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO") FileInformationCallType final {
public:
  SWIFT_INLINE_THUNK ~FileInformationCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FileInformationCallType(const FileInformationCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FileInformationCallType &operator =(const FileInformationCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FileInformationCallType &operator =(FileInformationCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FileInformationCallType(FileInformationCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    createFile SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO06createC0yA2CmF"),
    updateUploadStatus SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_createFile {  // impl struct for case createFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::createFile;
    }
    SWIFT_INLINE_THUNK FileInformationCallType operator()() const;
  } createFile SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO06createC0yA2CmF");
  SWIFT_INLINE_THUNK bool isCreateFile() const;

  inline const static struct _impl_updateUploadStatus {  // impl struct for case updateUploadStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::updateUploadStatus;
    }
    SWIFT_INLINE_THUNK FileInformationCallType operator()() const;
  } updateUploadStatus SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isUpdateUploadStatus() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore23FileInformationCallTypeO06createC0yA2CmFWC) return cases::createFile;
    if (tag == _impl::$s13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmFWC) return cases::updateUploadStatus;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<FileInformationCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore23FileInformationCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK FileInformationCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FileInformationCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FileInformationCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FileInformationCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore23FileInformationCallTypeOD;
  static inline constexpr $s13CloneableCore23FileInformationCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileInformationCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FileInformationCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FileInformationCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FileInformationCallType returnNewValue(T callable) {
    auto result = FileInformationCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore23FileInformationCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileInformationCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore23FileInformationCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FileInformationCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FileInformationCallType> = true;
template<>
struct implClassFor<CloneableCore::FileInformationCallType> { using type = CloneableCore::_impl::_impl_FileInformationCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore17FileObserverTokenC") FileObserverToken;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileObserverToken> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileObserverToken;
// Type metadata accessor for FileObserverToken
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17FileObserverTokenCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17FileObserverTokenC") FileObserverToken : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK void cancel() SWIFT_SYMBOL("s:13CloneableCore17FileObserverTokenC6cancelyyF");
protected:
  SWIFT_INLINE_THUNK FileObserverToken(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_FileObserverToken;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17FileObserverTokenCD;
  static inline constexpr $s13CloneableCore17FileObserverTokenCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileObserverToken {
public:
static SWIFT_INLINE_THUNK FileObserverToken makeRetained(void * _Nonnull ptr) noexcept { return FileObserverToken(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileObserverToken> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17FileObserverTokenCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::FileObserverToken> { using type = CloneableCore::_impl::_impl_FileObserverToken; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO") FileSyncRelation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileSyncRelation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileSyncRelation;

// Type metadata accessor for FileSyncRelation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore16FileSyncRelationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum FileSyncRelation
extern "C" {
extern unsigned $s13CloneableCore16FileSyncRelationO6objectyA2CmFWC;
extern unsigned $s13CloneableCore16FileSyncRelationO8workflowyA2CmFWC;
extern unsigned $s13CloneableCore16FileSyncRelationO9componentyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO") FileSyncRelation final {
public:
  SWIFT_INLINE_THUNK ~FileSyncRelation() noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRelation(const FileSyncRelation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRelation &operator =(const FileSyncRelation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FileSyncRelation &operator =(FileSyncRelation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FileSyncRelation(FileSyncRelation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    object SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO6objectyA2CmF"),
    workflow SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8workflowyA2CmF"),
    component SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO9componentyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_object {  // impl struct for case object
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::object;
    }
    SWIFT_INLINE_THUNK FileSyncRelation operator()() const;
  } object SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO6objectyA2CmF");
  SWIFT_INLINE_THUNK bool isObject() const;

  inline const static struct _impl_workflow {  // impl struct for case workflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::workflow;
    }
    SWIFT_INLINE_THUNK FileSyncRelation operator()() const;
  } workflow SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8workflowyA2CmF");
  SWIFT_INLINE_THUNK bool isWorkflow() const;

  inline const static struct _impl_component {  // impl struct for case component
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::component;
    }
    SWIFT_INLINE_THUNK FileSyncRelation operator()() const;
  } component SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO9componentyA2CmF");
  SWIFT_INLINE_THUNK bool isComponent() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore16FileSyncRelationO6objectyA2CmFWC) return cases::object;
    if (tag == _impl::$s13CloneableCore16FileSyncRelationO8workflowyA2CmFWC) return cases::workflow;
    if (tag == _impl::$s13CloneableCore16FileSyncRelationO9componentyA2CmFWC) return cases::component;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<FileSyncRelation> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore16FileSyncRelationO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK FileSyncRelation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FileSyncRelation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FileSyncRelation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FileSyncRelation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore16FileSyncRelationOD;
  static inline constexpr $s13CloneableCore16FileSyncRelationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileSyncRelation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FileSyncRelation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FileSyncRelation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FileSyncRelation returnNewValue(T callable) {
    auto result = FileSyncRelation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore16FileSyncRelationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileSyncRelation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore16FileSyncRelationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FileSyncRelation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FileSyncRelation> = true;
template<>
struct implClassFor<CloneableCore::FileSyncRelation> { using type = CloneableCore::_impl::_impl_FileSyncRelation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV") FileSyncRequest;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::FileSyncRequest> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_FileSyncRequest;

// Type metadata accessor for FileSyncRequest
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore15FileSyncRequestVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV") FileSyncRequest final {
public:
  SWIFT_INLINE_THUNK ~FileSyncRequest() noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRequest(const FileSyncRequest &other) noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FileSyncRequest &operator =(const FileSyncRequest &other) noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FileSyncRequest &operator =(FileSyncRequest &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FileSyncRequest(FileSyncRequest &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getFileName() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV8fileNameSSvp");
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> getData() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV4dataAA03AnyA4DataVSgvp");
  SWIFT_INLINE_THUNK FileSyncRelation getFileRelation() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV12fileRelationAA0cdG0Ovp");
  SWIFT_INLINE_THUNK CloneableFileType getFileType() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV8fileTypeAA0acG0Ovp");
  SWIFT_INLINE_THUNK bool getOne_way_sync() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV12one_way_syncSbvp");
  SWIFT_INLINE_THUNK swift::String getUser() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV4userSSvp");
  SWIFT_INLINE_THUNK swift::String getCompany() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV7companySSvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getTypeRefID() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV9typeRefIDSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::String>> getRelatedDeployedWorkflowIDs() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV26relatedDeployedWorkflowIDsSaySSGSgvp");
  SWIFT_INLINE_THUNK bool getDownload() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV8downloadSbvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldFileInformation> getFieldFileInformation() const SWIFT_SYMBOL("s:13CloneableCore15FileSyncRequestV05fieldC11InformationAA05FieldcG0VSgvp");
private:
  SWIFT_INLINE_THUNK FileSyncRequest(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FileSyncRequest _make() noexcept {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FileSyncRequest(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FileSyncRequest;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore15FileSyncRequestVD;
  static inline constexpr $s13CloneableCore15FileSyncRequestVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FileSyncRequest {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FileSyncRequest &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FileSyncRequest &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FileSyncRequest returnNewValue(T callable) {
    auto result = FileSyncRequest::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore15FileSyncRequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::FileSyncRequest> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore15FileSyncRequestVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::FileSyncRequest> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::FileSyncRequest> = true;
template<>
struct implClassFor<CloneableCore::FileSyncRequest> { using type = CloneableCore::_impl::_impl_FileSyncRequest; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




/// Represents an indexed operation against a lazily parsed <code>XMLIndexer</code>
class SWIFT_SYMBOL("s:13CloneableCore7IndexOpC") IndexOp;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::IndexOp> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_IndexOp;
// Type metadata accessor for IndexOp
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore7IndexOpCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore7IndexOpC") IndexOp : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK IndexOp(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_IndexOp;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore7IndexOpCD;
  static inline constexpr $s13CloneableCore7IndexOpCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_IndexOp {
public:
static SWIFT_INLINE_THUNK IndexOp makeRetained(void * _Nonnull ptr) noexcept { return IndexOp(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::IndexOp> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore7IndexOpCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::IndexOp> { using type = CloneableCore::_impl::_impl_IndexOp; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Represents a collection of <code>IndexOp</code> instances. Provides a means of iterating them
/// to find a match in a lazily parsed <code>XMLIndexer</code> instance.
class SWIFT_SYMBOL("s:13CloneableCore8IndexOpsC") IndexOps;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::IndexOps> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_IndexOps;
// Type metadata accessor for IndexOps
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8IndexOpsCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8IndexOpsC") IndexOps : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK IndexOps(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_IndexOps;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8IndexOpsCD;
  static inline constexpr $s13CloneableCore8IndexOpsCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_IndexOps {
public:
static SWIFT_INLINE_THUNK IndexOps makeRetained(void * _Nonnull ptr) noexcept { return IndexOps(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::IndexOps> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8IndexOpsCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::IndexOps> { using type = CloneableCore::_impl::_impl_IndexOps; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore17LocalCacheManagerC") LocalCacheManager;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::LocalCacheManager> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_LocalCacheManager;
// Type metadata accessor for LocalCacheManager
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17LocalCacheManagerCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17LocalCacheManagerC") LocalCacheManager : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK LocalCacheManager(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_LocalCacheManager;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17LocalCacheManagerCD;
  static inline constexpr $s13CloneableCore17LocalCacheManagerCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LocalCacheManager {
public:
static SWIFT_INLINE_THUNK LocalCacheManager makeRetained(void * _Nonnull ptr) noexcept { return LocalCacheManager(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LocalCacheManager> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17LocalCacheManagerCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::LocalCacheManager> { using type = CloneableCore::_impl::_impl_LocalCacheManager; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_LogLevel;

// Type metadata accessor for LogLevel
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore8LogLevelOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum LogLevel
extern "C" {
extern unsigned $s13CloneableCore8LogLevelO5fatalyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO7successyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO5debugyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO4infoyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO7warningyA2CmFWC;
extern unsigned $s13CloneableCore8LogLevelO5erroryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore8LogLevelO") LogLevel final {
public:
  SWIFT_INLINE_THUNK ~LogLevel() noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LogLevel(const LogLevel &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LogLevel &operator =(const LogLevel &other) noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LogLevel &operator =(LogLevel &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LogLevel(LogLevel &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    fatal SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5fatalyA2CmF"),
    success SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7successyA2CmF"),
    debug SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5debugyA2CmF"),
    info SWIFT_SYMBOL("s:13CloneableCore8LogLevelO4infoyA2CmF"),
    warning SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7warningyA2CmF"),
    error SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5erroryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_fatal {  // impl struct for case fatal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fatal;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } fatal SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5fatalyA2CmF");
  SWIFT_INLINE_THUNK bool isFatal() const;

  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } success SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_debug {  // impl struct for case debug
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::debug;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } debug SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5debugyA2CmF");
  SWIFT_INLINE_THUNK bool isDebug() const;

  inline const static struct _impl_info {  // impl struct for case info
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::info;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } info SWIFT_SYMBOL("s:13CloneableCore8LogLevelO4infoyA2CmF");
  SWIFT_INLINE_THUNK bool isInfo() const;

  inline const static struct _impl_warning {  // impl struct for case warning
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::warning;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } warning SWIFT_SYMBOL("s:13CloneableCore8LogLevelO7warningyA2CmF");
  SWIFT_INLINE_THUNK bool isWarning() const;

  inline const static struct _impl_error {  // impl struct for case error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::error;
    }
    SWIFT_INLINE_THUNK LogLevel operator()() const;
  } error SWIFT_SYMBOL("s:13CloneableCore8LogLevelO5erroryA2CmF");
  SWIFT_INLINE_THUNK bool isError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore8LogLevelO5fatalyA2CmFWC) return cases::fatal;
    if (tag == _impl::$s13CloneableCore8LogLevelO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s13CloneableCore8LogLevelO5debugyA2CmFWC) return cases::debug;
    if (tag == _impl::$s13CloneableCore8LogLevelO4infoyA2CmFWC) return cases::info;
    if (tag == _impl::$s13CloneableCore8LogLevelO7warningyA2CmFWC) return cases::warning;
    if (tag == _impl::$s13CloneableCore8LogLevelO5erroryA2CmFWC) return cases::error;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore8LogLevelO8rawValueSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<LogLevel> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore8LogLevelO8rawValueACSgSS_tcfc");
private:
  SWIFT_INLINE_THUNK LogLevel(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LogLevel _make() noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LogLevel(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LogLevel;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore8LogLevelOD;
  static inline constexpr $s13CloneableCore8LogLevelOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LogLevel {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LogLevel &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LogLevel &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LogLevel returnNewValue(T callable) {
    auto result = LogLevel::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore8LogLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LogLevel> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore8LogLevelOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::LogLevel> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::LogLevel> = true;
template<>
struct implClassFor<CloneableCore::LogLevel> { using type = CloneableCore::_impl::_impl_LogLevel; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_LoggerComponentInformation;

// Type metadata accessor for LoggerComponentInformation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore26LoggerComponentInformationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore26LoggerComponentInformationV") LoggerComponentInformation final {
public:
  SWIFT_INLINE_THUNK ~LoggerComponentInformation() noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerComponentInformation(const LoggerComponentInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerComponentInformation &operator =(const LoggerComponentInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LoggerComponentInformation &operator =(LoggerComponentInformation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LoggerComponentInformation(LoggerComponentInformation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK LoggerComponentInformation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LoggerComponentInformation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LoggerComponentInformation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LoggerComponentInformation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore26LoggerComponentInformationVD;
  static inline constexpr $s13CloneableCore26LoggerComponentInformationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LoggerComponentInformation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LoggerComponentInformation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LoggerComponentInformation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LoggerComponentInformation returnNewValue(T callable) {
    auto result = LoggerComponentInformation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore26LoggerComponentInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LoggerComponentInformation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore26LoggerComponentInformationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::LoggerComponentInformation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::LoggerComponentInformation> = true;
template<>
struct implClassFor<CloneableCore::LoggerComponentInformation> { using type = CloneableCore::_impl::_impl_LoggerComponentInformation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_LoggerWorkflowInformation;

// Type metadata accessor for LoggerWorkflowInformation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore25LoggerWorkflowInformationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore25LoggerWorkflowInformationV") LoggerWorkflowInformation final {
public:
  SWIFT_INLINE_THUNK ~LoggerWorkflowInformation() noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerWorkflowInformation(const LoggerWorkflowInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LoggerWorkflowInformation &operator =(const LoggerWorkflowInformation &other) noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LoggerWorkflowInformation &operator =(LoggerWorkflowInformation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LoggerWorkflowInformation(LoggerWorkflowInformation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK LoggerWorkflowInformation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LoggerWorkflowInformation _make() noexcept {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LoggerWorkflowInformation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LoggerWorkflowInformation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore25LoggerWorkflowInformationVD;
  static inline constexpr $s13CloneableCore25LoggerWorkflowInformationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LoggerWorkflowInformation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LoggerWorkflowInformation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LoggerWorkflowInformation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LoggerWorkflowInformation returnNewValue(T callable) {
    auto result = LoggerWorkflowInformation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::LoggerWorkflowInformation> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore25LoggerWorkflowInformationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::LoggerWorkflowInformation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::LoggerWorkflowInformation> = true;
template<>
struct implClassFor<CloneableCore::LoggerWorkflowInformation> { using type = CloneableCore::_impl::_impl_LoggerWorkflowInformation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


namespace _impl {

class _impl_ModelToSync;

// Type metadata accessor for ModelToSync
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11ModelToSyncOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ModelToSync
extern "C" {
extern unsigned $s13CloneableCore11ModelToSyncO15FileInformationyA2CmFWC;
extern unsigned $s13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmFWC;
extern unsigned $s13CloneableCore11ModelToSyncO19NotificationRequestyA2CmFWC;
extern unsigned $s13CloneableCore11ModelToSyncO10DataObjectyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO") ModelToSync final {
public:
  SWIFT_INLINE_THUNK ~ModelToSync() noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelToSync(const ModelToSync &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelToSync &operator =(const ModelToSync &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ModelToSync &operator =(ModelToSync &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ModelToSync(ModelToSync &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    FileInformation SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO15FileInformationyA2CmF"),
    CompletedWorkflow SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmF"),
    NotificationRequest SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO19NotificationRequestyA2CmF"),
    DataObject SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO10DataObjectyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_FileInformation {  // impl struct for case FileInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::FileInformation;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } FileInformation SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO15FileInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isFileInformation() const;

  inline const static struct _impl_CompletedWorkflow {  // impl struct for case CompletedWorkflow
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::CompletedWorkflow;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } CompletedWorkflow SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmF");
  SWIFT_INLINE_THUNK bool isCompletedWorkflow() const;

  inline const static struct _impl_NotificationRequest {  // impl struct for case NotificationRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::NotificationRequest;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } NotificationRequest SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO19NotificationRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isNotificationRequest() const;

  inline const static struct _impl_DataObject {  // impl struct for case DataObject
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::DataObject;
    }
    SWIFT_INLINE_THUNK ModelToSync operator()() const;
  } DataObject SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO10DataObjectyA2CmF");
  SWIFT_INLINE_THUNK bool isDataObject() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore11ModelToSyncO15FileInformationyA2CmFWC) return cases::FileInformation;
    if (tag == _impl::$s13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmFWC) return cases::CompletedWorkflow;
    if (tag == _impl::$s13CloneableCore11ModelToSyncO19NotificationRequestyA2CmFWC) return cases::NotificationRequest;
    if (tag == _impl::$s13CloneableCore11ModelToSyncO10DataObjectyA2CmFWC) return cases::DataObject;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ModelToSync> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore11ModelToSyncO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ModelToSync(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ModelToSync _make() noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ModelToSync(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ModelToSync;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11ModelToSyncOD;
  static inline constexpr $s13CloneableCore11ModelToSyncOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ModelToSync {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ModelToSync &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ModelToSync &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ModelToSync returnNewValue(T callable) {
    auto result = ModelToSync::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore11ModelToSyncOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ModelToSync> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11ModelToSyncOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ModelToSync> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ModelToSync> = true;
template<>
struct implClassFor<CloneableCore::ModelToSync> { using type = CloneableCore::_impl::_impl_ModelToSync; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore14NetworkMonitorC") NetworkMonitor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::NetworkMonitor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_NetworkMonitor;
// Type metadata accessor for NetworkMonitor
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore14NetworkMonitorCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore14NetworkMonitorC") NetworkMonitor : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK NetworkMonitor(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_NetworkMonitor;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore14NetworkMonitorCD;
  static inline constexpr $s13CloneableCore14NetworkMonitorCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_NetworkMonitor {
public:
static SWIFT_INLINE_THUNK NetworkMonitor makeRetained(void * _Nonnull ptr) noexcept { return NetworkMonitor(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::NetworkMonitor> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore14NetworkMonitorCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::NetworkMonitor> { using type = CloneableCore::_impl::_impl_NetworkMonitor; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO") NotificationRequestCallType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::NotificationRequestCallType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_NotificationRequestCallType;

// Type metadata accessor for NotificationRequestCallType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore27NotificationRequestCallTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum NotificationRequestCallType
extern "C" {
extern unsigned $s13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO") NotificationRequestCallType final {
public:
  SWIFT_INLINE_THUNK ~NotificationRequestCallType() noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType(const NotificationRequestCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType &operator =(const NotificationRequestCallType &other) noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType &operator =(NotificationRequestCallType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER NotificationRequestCallType(NotificationRequestCallType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    uploadRequest SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_uploadRequest {  // impl struct for case uploadRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uploadRequest;
    }
    SWIFT_INLINE_THUNK NotificationRequestCallType operator()() const;
  } uploadRequest SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmF");
  SWIFT_INLINE_THUNK bool isUploadRequest() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmFWC) return cases::uploadRequest;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<NotificationRequestCallType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13CloneableCore27NotificationRequestCallTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK NotificationRequestCallType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK NotificationRequestCallType _make() noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return NotificationRequestCallType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_NotificationRequestCallType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore27NotificationRequestCallTypeOD;
  static inline constexpr $s13CloneableCore27NotificationRequestCallTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_NotificationRequestCallType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(NotificationRequestCallType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const NotificationRequestCallType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER NotificationRequestCallType returnNewValue(T callable) {
    auto result = NotificationRequestCallType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::NotificationRequestCallType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore27NotificationRequestCallTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::NotificationRequestCallType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::NotificationRequestCallType> = true;
template<>
struct implClassFor<CloneableCore::NotificationRequestCallType> { using type = CloneableCore::_impl::_impl_NotificationRequestCallType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




class SWIFT_SYMBOL("s:13CloneableCore17ObjectIdGeneratorV") ObjectIdGenerator;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ObjectIdGenerator> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_ObjectIdGenerator;

// Type metadata accessor for ObjectIdGenerator
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17ObjectIdGeneratorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17ObjectIdGeneratorV") ObjectIdGenerator final {
public:
  SWIFT_INLINE_THUNK ~ObjectIdGenerator() noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ObjectIdGenerator(const ObjectIdGenerator &other) noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ObjectIdGenerator &operator =(const ObjectIdGenerator &other) noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ObjectIdGenerator &operator =(ObjectIdGenerator &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ObjectIdGenerator(ObjectIdGenerator &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  static SWIFT_INLINE_THUNK swift::String generate() SWIFT_SYMBOL("s:13CloneableCore17ObjectIdGeneratorV8generateSSyFZ");
private:
  SWIFT_INLINE_THUNK ObjectIdGenerator(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ObjectIdGenerator _make() noexcept {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ObjectIdGenerator(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ObjectIdGenerator;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17ObjectIdGeneratorVD;
  static inline constexpr $s13CloneableCore17ObjectIdGeneratorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ObjectIdGenerator {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ObjectIdGenerator &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ObjectIdGenerator &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ObjectIdGenerator returnNewValue(T callable) {
    auto result = ObjectIdGenerator::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore17ObjectIdGeneratorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ObjectIdGenerator> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17ObjectIdGeneratorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ObjectIdGenerator> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ObjectIdGenerator> = true;
template<>
struct implClassFor<CloneableCore::ObjectIdGenerator> { using type = CloneableCore::_impl::_impl_ObjectIdGenerator; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV") OutputConnection;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::OutputConnection> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_OutputConnection;

// Type metadata accessor for OutputConnection
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore16OutputConnectionVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV") OutputConnection final {
public:
  SWIFT_INLINE_THUNK ~OutputConnection() noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK OutputConnection(const OutputConnection &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK OutputConnection &operator =(const OutputConnection &other) noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK OutputConnection &operator =(OutputConnection &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER OutputConnection(OutputConnection &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getTargetInputStaticID() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV19targetInputStaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetInputStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV19targetInputStaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetDynamicID() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV15targetDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setTargetDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV15targetDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetInput() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV11targetInputSSvp");
  SWIFT_INLINE_THUNK void setTargetInput(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV11targetInputSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetStaticID() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV14targetStaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV14targetStaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetType() const SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV10targetTypeSSvp");
  SWIFT_INLINE_THUNK void setTargetType(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV10targetTypeSSvp");
  static SWIFT_INLINE_THUNK OutputConnection init(const swift::String& targetInputStaticID, const swift::String& targetDynamicID, const swift::String& targetInput, const swift::String& targetStaticID, const swift::String& targetType) SWIFT_SYMBOL("s:13CloneableCore16OutputConnectionV19targetInputStaticID0e7DynamicH00eF00egH00E4TypeACSS_S4Stcfc");
private:
  SWIFT_INLINE_THUNK OutputConnection(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK OutputConnection _make() noexcept {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return OutputConnection(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_OutputConnection;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore16OutputConnectionVD;
  static inline constexpr $s13CloneableCore16OutputConnectionVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_OutputConnection {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(OutputConnection &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const OutputConnection &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER OutputConnection returnNewValue(T callable) {
    auto result = OutputConnection::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore16OutputConnectionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::OutputConnection> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore16OutputConnectionVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::OutputConnection> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::OutputConnection> = true;
template<>
struct implClassFor<CloneableCore::OutputConnection> { using type = CloneableCore::_impl::_impl_OutputConnection; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV") ParsingError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::ParsingError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_ParsingError;

// Type metadata accessor for ParsingError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore12ParsingErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV") ParsingError final {
public:
  SWIFT_INLINE_THUNK ~ParsingError() noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ParsingError(const ParsingError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ParsingError &operator =(const ParsingError &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ParsingError &operator =(ParsingError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ParsingError(ParsingError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getLine() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV4lineSivp");
  SWIFT_INLINE_THUNK swift::Int getColumn() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV6columnSivp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV16errorDescriptionSSSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13CloneableCore12ParsingErrorV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ParsingError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ParsingError _make() noexcept {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ParsingError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ParsingError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore12ParsingErrorVD;
  static inline constexpr $s13CloneableCore12ParsingErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ParsingError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ParsingError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ParsingError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ParsingError returnNewValue(T callable) {
    auto result = ParsingError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore12ParsingErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::ParsingError> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore12ParsingErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::ParsingError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::ParsingError> = true;
template<>
struct implClassFor<CloneableCore::ParsingError> { using type = CloneableCore::_impl::_impl_ParsingError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



namespace _impl {

class _impl_RUNTIME_ENVIRONMENT;

// Type metadata accessor for RUNTIME_ENVIRONMENT
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore19RUNTIME_ENVIRONMENTOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum RUNTIME_ENVIRONMENT
extern "C" {
extern unsigned $s13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmFWC;
extern unsigned $s13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO") RUNTIME_ENVIRONMENT final {
public:
  SWIFT_INLINE_THUNK ~RUNTIME_ENVIRONMENT() noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT(const RUNTIME_ENVIRONMENT &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT &operator =(const RUNTIME_ENVIRONMENT &other) noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT &operator =(RUNTIME_ENVIRONMENT &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RUNTIME_ENVIRONMENT(RUNTIME_ENVIRONMENT &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    mobile SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmF"),
    cloud SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_mobile {  // impl struct for case mobile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mobile;
    }
    SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT operator()() const;
  } mobile SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmF");
  SWIFT_INLINE_THUNK bool isMobile() const;

  inline const static struct _impl_cloud {  // impl struct for case cloud
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cloud;
    }
    SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT operator()() const;
  } cloud SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmF");
  SWIFT_INLINE_THUNK bool isCloud() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmFWC) return cases::mobile;
    if (tag == _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmFWC) return cases::cloud;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13CloneableCore19RUNTIME_ENVIRONMENTO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT _make() noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RUNTIME_ENVIRONMENT(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RUNTIME_ENVIRONMENT;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore19RUNTIME_ENVIRONMENTOD;
  static inline constexpr $s13CloneableCore19RUNTIME_ENVIRONMENTOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RUNTIME_ENVIRONMENT {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RUNTIME_ENVIRONMENT &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RUNTIME_ENVIRONMENT &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RUNTIME_ENVIRONMENT returnNewValue(T callable) {
    auto result = RUNTIME_ENVIRONMENT::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::RUNTIME_ENVIRONMENT> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore19RUNTIME_ENVIRONMENTOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::RUNTIME_ENVIRONMENT> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::RUNTIME_ENVIRONMENT> = true;
template<>
struct implClassFor<CloneableCore::RUNTIME_ENVIRONMENT> { using type = CloneableCore::_impl::_impl_RUNTIME_ENVIRONMENT; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {








/// This class is used to wrap the observer in a weak reference so it doesn’t cause strong reference cycles.
class SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC") SyncStatusToken;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncStatusToken> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_SyncStatusToken;
// Type metadata accessor for SyncStatusToken
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore15SyncStatusTokenCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC") SyncStatusToken : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK void unsubscribe() SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC11unsubscribeyyF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() SWIFT_SYMBOL("s:13CloneableCore15SyncStatusTokenC9hashValueSivp");
protected:
  SWIFT_INLINE_THUNK SyncStatusToken(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_SyncStatusToken;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore15SyncStatusTokenCD;
  static inline constexpr $s13CloneableCore15SyncStatusTokenCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncStatusToken {
public:
static SWIFT_INLINE_THUNK SyncStatusToken makeRetained(void * _Nonnull ptr) noexcept { return SyncStatusToken(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncStatusToken> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore15SyncStatusTokenCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::SyncStatusToken> { using type = CloneableCore::_impl::_impl_SyncStatusToken; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

class SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC0E6ChangeO") DatabaseChange;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::DatabaseChange> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// Represents a database for synchronized files.
class SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC") SyncedFileDatabase;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncedFileDatabase> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_SyncedFileDatabase;
// Type metadata accessor for SyncedFileDatabase
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore18SyncedFileDatabaseCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC") SyncedFileDatabase : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Retrieves the number of un-synced files.
///
/// returns:
/// The number of un-synced files or nil if there is a database error.
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getUnsyncedFileCount() SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyF");
/// Retrieves the number of total files
///
/// returns:
/// The number of total files or nil if there is a database error.
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getTotalFileCount() SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyF");
/// Retrieves the number of synced files
///
/// returns:
/// The number of synced files or nil if there is a database error.
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getSyncedFileCount() SWIFT_SYMBOL("s:13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyF");
protected:
  SWIFT_INLINE_THUNK SyncedFileDatabase(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_SyncedFileDatabase;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore18SyncedFileDatabaseCD;
  static inline constexpr $s13CloneableCore18SyncedFileDatabaseCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncedFileDatabase {
public:
static SWIFT_INLINE_THUNK SyncedFileDatabase makeRetained(void * _Nonnull ptr) noexcept { return SyncedFileDatabase(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncedFileDatabase> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore18SyncedFileDatabaseCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::SyncedFileDatabase> { using type = CloneableCore::_impl::_impl_SyncedFileDatabase; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



class SWIFT_SYMBOL("s:13CloneableCore34SyncedFileInformationObserverTokenC") SyncedFileInformationObserverToken;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::SyncedFileInformationObserverToken> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_SyncedFileInformationObserverToken;
// Type metadata accessor for SyncedFileInformationObserverToken
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore34SyncedFileInformationObserverTokenCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore34SyncedFileInformationObserverTokenC") SyncedFileInformationObserverToken : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK void cancel() SWIFT_SYMBOL("s:13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyF");
protected:
  SWIFT_INLINE_THUNK SyncedFileInformationObserverToken(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_SyncedFileInformationObserverToken;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore34SyncedFileInformationObserverTokenCD;
  static inline constexpr $s13CloneableCore34SyncedFileInformationObserverTokenCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncedFileInformationObserverToken {
public:
static SWIFT_INLINE_THUNK SyncedFileInformationObserverToken makeRetained(void * _Nonnull ptr) noexcept { return SyncedFileInformationObserverToken(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncedFileInformationObserverToken> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore34SyncedFileInformationObserverTokenCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::SyncedFileInformationObserverToken> { using type = CloneableCore::_impl::_impl_SyncedFileInformationObserverToken; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_SyncedFileInformationV2;

// Type metadata accessor for SyncedFileInformationV2
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore23SyncedFileInformationV2VMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V") SyncedFileInformationV2 final {
public:
  SWIFT_INLINE_THUNK ~SyncedFileInformationV2() noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SyncedFileInformationV2(const SyncedFileInformationV2 &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SyncedFileInformationV2 &operator =(const SyncedFileInformationV2 &other) noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SyncedFileInformationV2 &operator =(SyncedFileInformationV2 &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SyncedFileInformationV2(SyncedFileInformationV2 &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Array<swift::String> getRelatedCloneableDeployedWorkflows() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvp");
  SWIFT_INLINE_THUNK void setRelatedCloneableDeployedWorkflows(const swift::Array<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getDownload() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8downloadSbSgvp");
  SWIFT_INLINE_THUNK void setDownload(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8downloadSbSgvp");
  SWIFT_INLINE_THUNK bool getSyncComplete() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvp");
  SWIFT_INLINE_THUNK void setSyncComplete(bool value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getLocalFilePath() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvp");
  SWIFT_INLINE_THUNK void setLocalFilePath(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvp");
  SWIFT_INLINE_THUNK swift::String getFileName() const SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8fileNameSSvp");
  SWIFT_INLINE_THUNK void setFileName(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore23SyncedFileInformationV2V8fileNameSSvp");
private:
  SWIFT_INLINE_THUNK SyncedFileInformationV2(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SyncedFileInformationV2 _make() noexcept {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SyncedFileInformationV2(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SyncedFileInformationV2;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore23SyncedFileInformationV2VD;
  static inline constexpr $s13CloneableCore23SyncedFileInformationV2VD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SyncedFileInformationV2 {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SyncedFileInformationV2 &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SyncedFileInformationV2 &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SyncedFileInformationV2 returnNewValue(T callable) {
    auto result = SyncedFileInformationV2::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore23SyncedFileInformationV2VMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::SyncedFileInformationV2> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore23SyncedFileInformationV2VMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::SyncedFileInformationV2> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::SyncedFileInformationV2> = true;
template<>
struct implClassFor<CloneableCore::SyncedFileInformationV2> { using type = CloneableCore::_impl::_impl_SyncedFileInformationV2; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

namespace _impl {

class _impl_TargetInput;

// Type metadata accessor for TargetInput
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11TargetInputVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11TargetInputV") TargetInput final {
public:
  SWIFT_INLINE_THUNK ~TargetInput() noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK TargetInput(const TargetInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK TargetInput &operator =(const TargetInput &other) noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK TargetInput &operator =(TargetInput &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER TargetInput(TargetInput &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ComponentType getComponentType() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovp");
  SWIFT_INLINE_THUNK void setComponentType(const ComponentType& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovp");
  SWIFT_INLINE_THUNK swift::String getTargetInputStaticID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD8StaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetInputStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD8StaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetInputDynamicID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD9DynamicIDSSvp");
  SWIFT_INLINE_THUNK void setTargetInputDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV06targetD9DynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetComponentStaticID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV23targetComponentStaticIDSSvp");
  SWIFT_INLINE_THUNK void setTargetComponentStaticID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV23targetComponentStaticIDSSvp");
  SWIFT_INLINE_THUNK swift::String getTargetComponentDynamicID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV24targetComponentDynamicIDSSvp");
  SWIFT_INLINE_THUNK void setTargetComponentDynamicID(const swift::String& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV24targetComponentDynamicIDSSvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getObjectFieldOutputDynamicID() const SWIFT_SYMBOL("s:13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvp");
  SWIFT_INLINE_THUNK void setObjectFieldOutputDynamicID(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvp");
private:
  SWIFT_INLINE_THUNK TargetInput(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK TargetInput _make() noexcept {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return TargetInput(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_TargetInput;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11TargetInputVD;
  static inline constexpr $s13CloneableCore11TargetInputVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_TargetInput {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(TargetInput &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const TargetInput &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER TargetInput returnNewValue(T callable) {
    auto result = TargetInput::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore11TargetInputVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::TargetInput> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11TargetInputVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::TargetInput> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::TargetInput> = true;
template<>
struct implClassFor<CloneableCore::TargetInput> { using type = CloneableCore::_impl::_impl_TargetInput; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


/// Models a text element
class SWIFT_SYMBOL("s:13CloneableCore11TextElementC") TextElement;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::TextElement> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_TextElement;
// Type metadata accessor for TextElement
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore11TextElementCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore11TextElementC") TextElement : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::String getText() SWIFT_SYMBOL("s:13CloneableCore11TextElementC4textSSvp");
protected:
  SWIFT_INLINE_THUNK TextElement(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_TextElement;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore11TextElementCD;
  static inline constexpr $s13CloneableCore11TextElementCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_TextElement {
public:
static SWIFT_INLINE_THUNK TextElement makeRetained(void * _Nonnull ptr) noexcept { return TextElement(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::TextElement> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore11TextElementCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::TextElement> { using type = CloneableCore::_impl::_impl_TextElement; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {


class SWIFT_SYMBOL("s:13CloneableCore10TrackStateO") TrackState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::TrackState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_TrackState;

// Type metadata accessor for TrackState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10TrackStateOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum TrackState
extern "C" {
extern unsigned $s13CloneableCore10TrackStateO3newyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO7trackedyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO4lostyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO7removedyA2CmFWC;
extern unsigned $s13CloneableCore10TrackStateO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10TrackStateO") TrackState final {
public:
  SWIFT_INLINE_THUNK ~TrackState() noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK TrackState(const TrackState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK TrackState &operator =(const TrackState &other) noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK TrackState &operator =(TrackState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER TrackState(TrackState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    new_ SWIFT_SYMBOL("s:13CloneableCore10TrackStateO3newyA2CmF"),
    tracked SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7trackedyA2CmF"),
    lost SWIFT_SYMBOL("s:13CloneableCore10TrackStateO4lostyA2CmF"),
    removed SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7removedyA2CmF"),
    unknown SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_new {  // impl struct for case new
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::new_;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } new_ SWIFT_SYMBOL("s:13CloneableCore10TrackStateO3newyA2CmF");
  SWIFT_INLINE_THUNK bool isNew_() const;

  inline const static struct _impl_tracked {  // impl struct for case tracked
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tracked;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } tracked SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7trackedyA2CmF");
  SWIFT_INLINE_THUNK bool isTracked() const;

  inline const static struct _impl_lost {  // impl struct for case lost
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lost;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } lost SWIFT_SYMBOL("s:13CloneableCore10TrackStateO4lostyA2CmF");
  SWIFT_INLINE_THUNK bool isLost() const;

  inline const static struct _impl_removed {  // impl struct for case removed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::removed;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } removed SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7removedyA2CmF");
  SWIFT_INLINE_THUNK bool isRemoved() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK TrackState operator()() const;
  } unknown SWIFT_SYMBOL("s:13CloneableCore10TrackStateO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13CloneableCore10TrackStateO3newyA2CmFWC) return cases::new_;
    if (tag == _impl::$s13CloneableCore10TrackStateO7trackedyA2CmFWC) return cases::tracked;
    if (tag == _impl::$s13CloneableCore10TrackStateO4lostyA2CmFWC) return cases::lost;
    if (tag == _impl::$s13CloneableCore10TrackStateO7removedyA2CmFWC) return cases::removed;
    if (tag == _impl::$s13CloneableCore10TrackStateO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<TrackState> init(swift::Int rawValue) SWIFT_SYMBOL("s:13CloneableCore10TrackStateO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:13CloneableCore10TrackStateO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK TrackState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK TrackState _make() noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return TrackState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_TrackState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10TrackStateOD;
  static inline constexpr $s13CloneableCore10TrackStateOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_TrackState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(TrackState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const TrackState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER TrackState returnNewValue(T callable) {
    auto result = TrackState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore10TrackStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::TrackState> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10TrackStateOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::TrackState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::TrackState> = true;
template<>
struct implClassFor<CloneableCore::TrackState> { using type = CloneableCore::_impl::_impl_TrackState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {




/// The singleton class that acts as a bridge to communicate to the components
class SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC") WorkflowFramework;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::WorkflowFramework> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_WorkflowFramework;
// Type metadata accessor for WorkflowFramework
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore17WorkflowFrameworkCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC") WorkflowFramework : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getActiveUIComponent() SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvp");
  SWIFT_INLINE_THUNK void setActiveUIComponent(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvp");
protected:
  SWIFT_INLINE_THUNK WorkflowFramework(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_WorkflowFramework;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore17WorkflowFrameworkCD;
  static inline constexpr $s13CloneableCore17WorkflowFrameworkCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_WorkflowFramework {
public:
static SWIFT_INLINE_THUNK WorkflowFramework makeRetained(void * _Nonnull ptr) noexcept { return WorkflowFramework(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::WorkflowFramework> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore17WorkflowFrameworkCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::WorkflowFramework> { using type = CloneableCore::_impl::_impl_WorkflowFramework; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {











class SWIFT_SYMBOL("s:13CloneableCore3XMLC8AccessorO") Accessor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::Accessor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// Director class to parse and access XML document.
/// You can parse XML docuemnts with parse() method and get the accessor.
/// <h3>Example</h3>
/// \code
///    let string = "<ResultSet><Result><Hit index="1"><Name>ほげ</Name></Hit><Hit index="2"><Name>ふが</Name></Hit></Result></ResultSet>"
///    xml = XML.parse(string)
///    let text = xml["ResultSet"]["Result"]["Hit"][0]["Name"].text {
///        println("exsists path & text")
///    }
///
///    let text = xml["ResultSet", "Result", "Hit", 0, "Name"].text {
///        println("exsists path & text")
///    }
///
///    let attributes = xml["ResultSet", "Result", "Hit", 0, "Name"].attributes {
///        println("exsists path & attributes")
///    }
///
///    for hit in xml["ResultSet", "Result", "Hit"] {
///        println("enumarate existing element")
///    }
///
///    switch xml["ResultSet", "Result", "TypoKey"] {
///    case .Failure(let error):
///        println(error)
///    case .SingleElement(_), .Sequence(_):
///        println("success parse")
///    }
///
/// \endcode
class SWIFT_SYMBOL("s:13CloneableCore3XMLC") XML;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XML> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XML;
// Type metadata accessor for XML
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore3XMLCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore3XMLC") XML : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK XML(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XML;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore3XMLCD;
  static inline constexpr $s13CloneableCore3XMLCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XML {
public:
static SWIFT_INLINE_THUNK XML makeRetained(void * _Nonnull ptr) noexcept { return XML(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XML> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore3XMLCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XML> { using type = CloneableCore::_impl::_impl_XML; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {





class SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV") XMLAttribute;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLAttribute> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLAttribute;

// Type metadata accessor for XMLAttribute
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore12XMLAttributeVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV") XMLAttribute final {
public:
  SWIFT_INLINE_THUNK ~XMLAttribute() noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK XMLAttribute(const XMLAttribute &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK XMLAttribute &operator =(const XMLAttribute &other) noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK XMLAttribute &operator =(XMLAttribute &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER XMLAttribute(XMLAttribute &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getName() const SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV4nameSSvp");
  SWIFT_INLINE_THUNK swift::String getText() const SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV4textSSvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13CloneableCore12XMLAttributeV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK XMLAttribute(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK XMLAttribute _make() noexcept {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return XMLAttribute(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_XMLAttribute;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore12XMLAttributeVD;
  static inline constexpr $s13CloneableCore12XMLAttributeVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLAttribute {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(XMLAttribute &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const XMLAttribute &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER XMLAttribute returnNewValue(T callable) {
    auto result = XMLAttribute::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13CloneableCore12XMLAttributeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLAttribute> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore12XMLAttributeVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<CloneableCore::XMLAttribute> = true;
template<>
static inline const constexpr bool isOpaqueLayout<CloneableCore::XMLAttribute> = true;
template<>
struct implClassFor<CloneableCore::XMLAttribute> { using type = CloneableCore::_impl::_impl_XMLAttribute; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






/// Models an XML element, including name, text and attributes
class SWIFT_SYMBOL("s:13CloneableCore10XMLElementC") XMLElement;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLElement> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLElement;
// Type metadata accessor for XMLElement
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore10XMLElementCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore10XMLElementC") XMLElement : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK swift::String getName() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC4nameSSvp");
  SWIFT_INLINE_THUNK bool getCaseInsensitive() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC15caseInsensitiveSbvp");
/// Find an attribute by name
  SWIFT_INLINE_THUNK swift::Optional<XMLAttribute> attribute(const swift::String& name) SWIFT_SYMBOL("s:13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tF");
  SWIFT_INLINE_THUNK swift::String getText() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC4textSSvp");
  SWIFT_INLINE_THUNK swift::String getRecursiveText() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC13recursiveTextSSvp");
  SWIFT_INLINE_THUNK swift::String getInnerXML() SWIFT_SYMBOL("s:13CloneableCore10XMLElementC8innerXMLSSvp");
protected:
  SWIFT_INLINE_THUNK XMLElement(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XMLElement;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore10XMLElementCD;
  static inline constexpr $s13CloneableCore10XMLElementCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLElement {
public:
static SWIFT_INLINE_THUNK XMLElement makeRetained(void * _Nonnull ptr) noexcept { return XMLElement(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLElement> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore10XMLElementCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XMLElement> { using type = CloneableCore::_impl::_impl_XMLElement; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {






class SWIFT_SYMBOL("s:13CloneableCore10XMLIndexerO") XMLIndexer;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLIndexer> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {

/// Simple XML parser
class SWIFT_SYMBOL("s:13CloneableCore7XMLHashC") XMLHash;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLHash> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLHash;
// Type metadata accessor for XMLHash
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore7XMLHashCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore7XMLHashC") XMLHash : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK XMLHash(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XMLHash;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore7XMLHashCD;
  static inline constexpr $s13CloneableCore7XMLHashCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLHash {
public:
static SWIFT_INLINE_THUNK XMLHash makeRetained(void * _Nonnull ptr) noexcept { return XMLHash(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLHash> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore7XMLHashCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XMLHash> { using type = CloneableCore::_impl::_impl_XMLHash; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {



/// Parser options
class SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC") XMLHashOptions;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<CloneableCore::XMLHashOptions> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {
namespace _impl {

class _impl_XMLHashOptions;
// Type metadata accessor for XMLHashOptions
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13CloneableCore14XMLHashOptionsCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC") XMLHashOptions : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
  SWIFT_INLINE_THUNK bool getShouldProcessLazily() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvp");
  SWIFT_INLINE_THUNK void setShouldProcessLazily(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvp");
  SWIFT_INLINE_THUNK bool getShouldProcessNamespaces() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvp");
  SWIFT_INLINE_THUNK void setShouldProcessNamespaces(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvp");
  SWIFT_INLINE_THUNK bool getCaseInsensitive() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvp");
  SWIFT_INLINE_THUNK void setCaseInsensitive(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvp");
  SWIFT_INLINE_THUNK bool getDetectParsingErrors() SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvp");
  SWIFT_INLINE_THUNK void setDetectParsingErrors(bool value) SWIFT_SYMBOL("s:13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvp");
protected:
  SWIFT_INLINE_THUNK XMLHashOptions(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_XMLHashOptions;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13CloneableCore14XMLHashOptionsCD;
  static inline constexpr $s13CloneableCore14XMLHashOptionsCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_XMLHashOptions {
public:
static SWIFT_INLINE_THUNK XMLHashOptions makeRetained(void * _Nonnull ptr) noexcept { return XMLHashOptions(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<CloneableCore::XMLHashOptions> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return CloneableCore::_impl::$s13CloneableCore14XMLHashOptionsCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<CloneableCore::XMLHashOptions> { using type = CloneableCore::_impl::_impl_XMLHashOptions; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace CloneableCore SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("CloneableCore") {










  SWIFT_INLINE_THUNK swift::String APICall::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore7APICallV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String APICall::getRelatedID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore7APICallV9relatedIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelToSync APICall::getModelToSync() const {
  return _impl::_impl_ModelToSync::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore7APICallV11modelToSyncAA05ModeleF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK APICallStatus APICall::getStatus() const {
  return _impl::_impl_APICallStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore7APICallV6statusAA0C6StatusOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void APICall::setStatus(const APICallStatus& value) {
  return _impl::$s13CloneableCore7APICallV6statusAA0C6StatusOvs(_impl::_impl_APICallStatus::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Pending::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO7PendingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isPending() const {
    return *this == APICallStatus::Pending;
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Syncing::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO7SyncingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isSyncing() const {
    return *this == APICallStatus::Syncing;
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Synced::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO6SyncedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isSynced() const {
    return *this == APICallStatus::Synced;
  }
  SWIFT_INLINE_THUNK APICallStatus APICallStatus::_impl_Error::operator()() const {
    auto result = APICallStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13APICallStatusO5ErroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isError() const {
    return *this == APICallStatus::Error;
  }
  SWIFT_INLINE_THUNK  bool APICallStatus::isUnknownDefault() const {
    return *this == APICallStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<APICallStatus> APICallStatus::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<APICallStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore13APICallStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String APICallStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore13APICallStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_invalidReturnType::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO17invalidReturnTypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isInvalidReturnType() const {
    return *this == APIError::invalidReturnType;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_couldntAuthenticateRequest::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO26couldntAuthenticateRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isCouldntAuthenticateRequest() const {
    return *this == APIError::couldntAuthenticateRequest;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_apiManagerNotSet::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO16apiManagerNotSetyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isApiManagerNotSet() const {
    return *this == APIError::apiManagerNotSet;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_serverUnreachable::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO17serverUnreachableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isServerUnreachable() const {
    return *this == APIError::serverUnreachable;
  }
  SWIFT_INLINE_THUNK APIError APIError::_impl_invalidResponse::operator()() const {
    auto result = APIError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8APIErrorO15invalidResponseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool APIError::isInvalidResponse() const {
    return *this == APIError::invalidResponse;
  }
  SWIFT_INLINE_THUNK  bool APIError::isUnknownDefault() const {
    return *this == APIError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int APIError::getHashValue() const {
  return _impl::$s13CloneableCore8APIErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::isComplex() const {
  return _impl::$s13CloneableCore03AnyA4DataV9isComplexSbyF(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> AnyCloneableData::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore03AnyA4DataV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::isEqual(const AnyCloneableData& to) const {
  return _impl::$s13CloneableCore03AnyA4DataV7isEqual2toSbAC_tF(_impl::_impl_AnyCloneableData::getOpaquePointer(to), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> AnyCloneableData::init(const JXValue& jxValue) {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV4fromACSg5JXKit7JXValueC_tcfC(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(jxValue));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AnyCloneableData::getStringValue() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore03AnyA4DataV14getStringValueSSSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> AnyCloneableData::getBoolValue() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint8_t_0_1(result, _impl::$s13CloneableCore03AnyA4DataV12getBoolValueSbSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<AnyCloneableData>> AnyCloneableData::getArrayValue() const {
  return swift::_impl::_impl_Optional<swift::Array<AnyCloneableData>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore03AnyA4DataV13getArrayValueSayACGSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableBoundingBox> AnyCloneableData::getBoundingBoxValue() const {
  return swift::_impl::_impl_Optional<CloneableBoundingBox>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore03AnyA4DataV19getBoundingBoxValueAA0afG0CSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> AnyCloneableData::getDepthMap() const {
  return swift::_impl::_impl_Optional<CloneableDepthMap>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV11getDepthMapAA0afG0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<double> AnyCloneableData::getNumberValue() const {
  return swift::_impl::_impl_Optional<double>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore03AnyA4DataV14getNumberValueSdSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableDepthMap> AnyCloneableData::getDepthMapValue() const {
  return swift::_impl::_impl_Optional<CloneableDepthMap>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV16getDepthMapValueAA0afG0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AnyCloneableData::getFileExtension() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore03AnyA4DataV16getFileExtensionSSSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> AnyCloneableData::getObjectFieldValue(const swift::String& fieldName) const {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV19getObjectFieldValue9fieldNameACSgSS_tF(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fieldName)), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::number(double value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6numberyACSdFZ(result, value);
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::array(const swift::Array<AnyCloneableData>& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV5arrayyACSayACGFZ(result, _impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<AnyCloneableData>::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::status(const swift::String& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6statusyACSSFZ(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::string(const swift::String& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6stringyACSSFZ(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::boolean(bool value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV7booleanyACSbFZ(result, value);
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::boundingbox(const CloneableBoundingBox& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV11boundingboxyAcA0A11BoundingBoxCFZ(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(value));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableData AnyCloneableData::object(const swift::String& value) {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore03AnyA4DataV6objectyACSSFZ(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getBindingStringValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV18bindingStringValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingStringValue(const swift::String& newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingStringValueSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double AnyCloneableData::getBindingNumberValue() const {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingNumberValueSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingNumberValue(double newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingNumberValueSdvs(newValue, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::getBindingBooleanValue() const {
  return _impl::$s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingBooleanValue(bool newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV19bindingBooleanValueSbvs(newValue, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableData::getBindingStatusValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore03AnyA4DataV18bindingStatusValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void AnyCloneableData::setBindingStatusValue(const swift::String& newValue) {
  return _impl::$s13CloneableCore03AnyA4DataV18bindingStatusValueSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool AnyCloneableData::isArray() const {
  return _impl::$s13CloneableCore03AnyA4DataV7isArraySbyF(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AnyCloneableData::getArrayTypeAsString() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore03AnyA4DataV20getArrayTypeAsStringSSSgyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError AnyCloneableDataError::_impl_typeNotRegistered::operator()(const swift::String& val) const {
    auto result = AnyCloneableDataError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore03AnyA9DataErrorO17typeNotRegisteredyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnyCloneableDataError::isTypeNotRegistered() const {
    return *this == AnyCloneableDataError::typeNotRegistered;
  }
  SWIFT_INLINE_THUNK swift::String AnyCloneableDataError::getTypeNotRegistered() const {
    if (!isTypeNotRegistered()) abort();
    alignas(AnyCloneableDataError) unsigned char buffer[sizeof(AnyCloneableDataError)];
    auto *thisCopy = new(buffer) AnyCloneableDataError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK AnyCloneableDataError AnyCloneableDataError::_impl_failedInit::operator()() const {
    auto result = AnyCloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore03AnyA9DataErrorO10failedInityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnyCloneableDataError::isFailedInit() const {
    return *this == AnyCloneableDataError::failedInit;
  }
  SWIFT_INLINE_THUNK  bool AnyCloneableDataError::isUnknownDefault() const {
    return *this == AnyCloneableDataError::unknownDefault;
  }
  SWIFT_INLINE_THUNK AuthenticationError AuthenticationError::_impl_loginError::operator()() const {
    auto result = AuthenticationError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19AuthenticationErrorO05loginD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isLoginError() const {
    return *this == AuthenticationError::loginError;
  }
  SWIFT_INLINE_THUNK AuthenticationError AuthenticationError::_impl_notLoggedIn::operator()() const {
    auto result = AuthenticationError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19AuthenticationErrorO11notLoggedInyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isNotLoggedIn() const {
    return *this == AuthenticationError::notLoggedIn;
  }
  SWIFT_INLINE_THUNK AuthenticationError AuthenticationError::_impl_cannotRefreshUserData::operator()() const {
    auto result = AuthenticationError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19AuthenticationErrorO21cannotRefreshUserDatayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isCannotRefreshUserData() const {
    return *this == AuthenticationError::cannotRefreshUserData;
  }
  SWIFT_INLINE_THUNK  bool AuthenticationError::isUnknownDefault() const {
    return *this == AuthenticationError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int AuthenticationError::getHashValue() const {
  return _impl::$s13CloneableCore19AuthenticationErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableArray::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ArrayV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableArray CloneableArray::init(const swift::Array<AnyCloneableData>& data) {
  return _impl::_impl_CloneableArray::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A5ArrayV4dataACSayAA03AnyA4DataVG_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<AnyCloneableData>::getOpaquePointer(data)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableArray::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ArrayV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableArray::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ArrayV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableArray::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A5ArrayV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_offline::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO7offlineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isOffline() const {
    return *this == CloneableAuthStatus::offline;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_not_authenticated::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO17not_authenticatedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isNot_authenticated() const {
    return *this == CloneableAuthStatus::not_authenticated;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_auth_error::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO10auth_erroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isAuth_error() const {
    return *this == CloneableAuthStatus::auth_error;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_authenticating::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO14authenticatingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isAuthenticating() const {
    return *this == CloneableAuthStatus::authenticating;
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableAuthStatus::_impl_authenticated::operator()() const {
    auto result = CloneableAuthStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10AuthStatusO13authenticatedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isAuthenticated() const {
    return *this == CloneableAuthStatus::authenticated;
  }
  SWIFT_INLINE_THUNK  bool CloneableAuthStatus::isUnknownDefault() const {
    return *this == CloneableAuthStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableAuthStatus::getHashValue() const {
  return _impl::$s13CloneableCore0A10AuthStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableBoolean::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A7BooleanV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableBoolean::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A7BooleanV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableBoolean CloneableBoolean::init(bool value) {
  return _impl::_impl_CloneableBoolean::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A7BooleanVyACSbcfC(result, value);
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableBoolean::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A7BooleanV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableBoolean::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A7BooleanV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableColor::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ColorV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK float CloneableColor::getR() const {
  return _impl::$s13CloneableCore0A5ColorV1rSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setR(float value) {
  return _impl::$s13CloneableCore0A5ColorV1rSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CloneableColor::getG() const {
  return _impl::$s13CloneableCore0A5ColorV1gSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setG(float value) {
  return _impl::$s13CloneableCore0A5ColorV1gSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CloneableColor::getB() const {
  return _impl::$s13CloneableCore0A5ColorV1bSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setB(float value) {
  return _impl::$s13CloneableCore0A5ColorV1bSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CloneableColor::getA() const {
  return _impl::$s13CloneableCore0A5ColorV1aSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableColor::setA(float value) {
  return _impl::$s13CloneableCore0A5ColorV1aSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableColor::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ColorV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableColor::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A5ColorV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableColor::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A5ColorV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableConnectionState::_impl_connecting::operator()() const {
    auto result = CloneableConnectionState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A15ConnectionStateO10connectingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isConnecting() const {
    return *this == CloneableConnectionState::connecting;
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableConnectionState::_impl_connected::operator()() const {
    auto result = CloneableConnectionState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A15ConnectionStateO9connectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isConnected() const {
    return *this == CloneableConnectionState::connected;
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableConnectionState::_impl_disconnected::operator()() const {
    auto result = CloneableConnectionState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A15ConnectionStateO12disconnectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isDisconnected() const {
    return *this == CloneableConnectionState::disconnected;
  }
  SWIFT_INLINE_THUNK  bool CloneableConnectionState::isUnknownDefault() const {
    return *this == CloneableConnectionState::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableConnectionState::getHashValue() const {
  return _impl::$s13CloneableCore0A15ConnectionStateO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableCore::getAppID() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCoreAAC5appIDSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setAppID(const swift::String& value) {
  return _impl::$s13CloneableCoreAAC5appIDSSvsTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableCore::getConnection_state() {
  return _impl::_impl_CloneableConnectionState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvgTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setConnection_state(const CloneableConnectionState& value) {
  return _impl::$s13CloneableCoreAAC16connection_stateAA0A15ConnectionStateOvsTj(_impl::_impl_CloneableConnectionState::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableAuthStatus CloneableCore::getAuth_status() {
  return _impl::_impl_CloneableAuthStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvgTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setAuth_status(const CloneableAuthStatus& value) {
  return _impl::$s13CloneableCoreAAC11auth_statusAA0A10AuthStatusOvsTj(_impl::_impl_CloneableAuthStatus::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableCore::getSync_status() {
  return _impl::_impl_CloneableSyncStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvgTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::setSync_status(const CloneableSyncStatus& value) {
  return _impl::$s13CloneableCoreAAC11sync_statusAA0A10SyncStatusOvsTj(_impl::_impl_CloneableSyncStatus::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableCore::signOut() {
  return _impl::$s13CloneableCoreAAC7signOutyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK DataManager CloneableCore::getDataCache() {
  return _impl::_impl_DataManager::makeRetained(_impl::$s13CloneableCoreAAC12getDataCacheAA0D7ManagerCyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  }
  SWIFT_INLINE_THUNK CloneableConnectionState CloneableCore::getConnectionStatus() {
  return _impl::_impl_CloneableConnectionState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC19getConnectionStatusAA0aD5StateOyFTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK LocalCacheManager CloneableCore::cache() {
  return _impl::_impl_LocalCacheManager::makeRetained(_impl::$s13CloneableCoreAAC5cacheAA17LocalCacheManagerCyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT CloneableCore::getRuntimeEnvironment() {
  return _impl::_impl_RUNTIME_ENVIRONMENT::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCoreAAC21getRuntimeEnvironmentAA19RUNTIME_ENVIRONMENTOyFTj(result, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK void CloneableCore::startWorkflow(const swift::String& workflowId) {
  return _impl::$s13CloneableCoreAAC13startWorkflow10workflowIdySS_tFTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(workflowId)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableCredentials CloneableCredentials::_impl_auth0::operator()(const swift::String& val) const {
    auto result = CloneableCredentials::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A11CredentialsO5auth0yACSS_tcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableCredentials::isAuth0() const {
    return *this == CloneableCredentials::auth0;
  }
  SWIFT_INLINE_THUNK swift::String CloneableCredentials::getAuth0() const {
    if (!isAuth0()) abort();
    alignas(CloneableCredentials) unsigned char buffer[sizeof(CloneableCredentials)];
    auto *thisCopy = new(buffer) CloneableCredentials(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK CloneableCredentials CloneableCredentials::_impl_apiKey::operator()(const swift::String& val) const {
    auto result = CloneableCredentials::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A11CredentialsO6apiKeyyACSS_tcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableCredentials::isApiKey() const {
    return *this == CloneableCredentials::apiKey;
  }
  SWIFT_INLINE_THUNK swift::String CloneableCredentials::getApiKey() const {
    if (!isApiKey()) abort();
    alignas(CloneableCredentials) unsigned char buffer[sizeof(CloneableCredentials)];
    auto *thisCopy = new(buffer) CloneableCredentials(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool CloneableCredentials::isUnknownDefault() const {
    return *this == CloneableCredentials::unknownDefault;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_invalidValue::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO12invalidValueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isInvalidValue() const {
    return *this == CloneableDataError::invalidValue;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_implementationMissing::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO21implementationMissingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isImplementationMissing() const {
    return *this == CloneableDataError::implementationMissing;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_errorLoadingFromFile::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO20errorLoadingFromFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isErrorLoadingFromFile() const {
    return *this == CloneableDataError::errorLoadingFromFile;
  }
  SWIFT_INLINE_THUNK CloneableDataError CloneableDataError::_impl_errorSavingToFile::operator()() const {
    auto result = CloneableDataError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9DataErrorO17errorSavingToFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isErrorSavingToFile() const {
    return *this == CloneableDataError::errorSavingToFile;
  }
  SWIFT_INLINE_THUNK  bool CloneableDataError::isUnknownDefault() const {
    return *this == CloneableDataError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableDataError::getHashValue() const {
  return _impl::$s13CloneableCore0A9DataErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableDataObject::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A10DataObjectV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableDataObject CloneableDataObject::init(const swift::String& data) {
  return _impl::_impl_CloneableDataObject::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A10DataObjectV4dataACSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(data)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDataObject::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A10DataObjectV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDataObject::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A10DataObjectV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableDataObject::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A10DataObjectV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDate::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4DateV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDate::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4DateV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDate::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4DateV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableDate::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A4DateV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDepthMap::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8DepthMapV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool CloneableDepthMap::getComplexType() const {
  return _impl::$s13CloneableCore0A8DepthMapV11complexTypeSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setComplexType(bool value) {
  return _impl::$s13CloneableCore0A8DepthMapV11complexTypeSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<swift::Array<float>> CloneableDepthMap::getDepthMap() const {
  return swift::_impl::_impl_Array<swift::Array<float>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setDepthMap(const swift::Array<swift::Array<float>>& value) {
  return _impl::$s13CloneableCore0A8DepthMapV05depthD0SaySaySfGGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<swift::Array<float>>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<swift::Array<swift::Array<float>>> CloneableDepthMap::getUnprojectedDepth() const {
  return swift::_impl::_impl_Array<swift::Array<swift::Array<float>>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setUnprojectedDepth(const swift::Array<swift::Array<swift::Array<float>>>& value) {
  return _impl::$s13CloneableCore0A8DepthMapV011unprojectedC0SaySaySaySfGGGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<swift::Array<swift::Array<float>>>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::Array<swift::Int>>> CloneableDepthMap::getConfidenceMap() const {
  return swift::_impl::_impl_Optional<swift::Array<swift::Array<swift::Int>>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableDepthMap::setConfidenceMap(const swift::Optional<swift::Array<swift::Array<swift::Int>>>& value) {
  return _impl::$s13CloneableCore0A8DepthMapV010confidenceD0SaySaySiGGSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<swift::Array<swift::Int>>>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableDepthMap::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8DepthMapV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableDepthMap::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8DepthMapV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableDepthMap::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A8DepthMapV10getJXValue7context5JXKit0F0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK OS_dispatch_queue *_Nonnull CloneableFileSyncEngine::getSyncedFileQueue() {
return (__bridge_transfer OS_dispatch_queue *)(__bridge void *)_impl::$s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::setSyncedFileQueue(OS_dispatch_queue *_Nonnull value) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC06syncedC5QueueSo17OS_dispatch_queueCvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int CloneableFileSyncEngine::getTotalFiles() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC10totalFilesSivgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::setTotalFiles(swift::Int value) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC10totalFilesSivsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int CloneableFileSyncEngine::getFilesSynced() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC11filesSyncedSivgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::setFilesSynced(swift::Int value) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC11filesSyncedSivsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CloneableFileSyncEngine::processAndSyncObjectsNonCompleteRequests() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC010processAndD26ObjectsNonCompleteRequestsyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> CloneableFileSyncEngine::getCloneableDataFromFile(const swift::String& fileName, const swift::String& fileType, const swift::String& displayName) {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A14FileSyncEngineC03geta8DataFromC08fileName0I4Type07displayJ0AA03AnyaG0VSgSS_S2StFTj(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fileName)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fileType)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(displayName)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK bool CloneableFileSyncEngine::fileExistsLocally(const swift::String& fileName) {
  return _impl::$s13CloneableCore0A14FileSyncEngineC17fileExistsLocally0F4NameSbSS_tFTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(fileName)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int CloneableFileSyncEngine::getNumberOfDownloadedFiles() {
  return _impl::$s13CloneableCore0A14FileSyncEngineC26getNumberOfDownloadedFilesSiyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_all::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3allyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isAll() const {
    return *this == CloneableFileType::all;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_image::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO5imageyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isImage() const {
    return *this == CloneableFileType::image;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_pdf::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3pdfyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isPdf() const {
    return *this == CloneableFileType::pdf;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_iosAIModel::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO10iosAIModelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isIosAIModel() const {
    return *this == CloneableFileType::iosAIModel;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_shapefile::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO9shapefileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isShapefile() const {
    return *this == CloneableFileType::shapefile;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_kml::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3kmlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isKml() const {
    return *this == CloneableFileType::kml;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_kmz::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO3kmzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isKmz() const {
    return *this == CloneableFileType::kmz;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_geotiff::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO7geotiffyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isGeotiff() const {
    return *this == CloneableFileType::geotiff;
  }
  SWIFT_INLINE_THUNK CloneableFileType CloneableFileType::_impl_raster::operator()() const {
    auto result = CloneableFileType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A8FileTypeO6rasteryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isRaster() const {
    return *this == CloneableFileType::raster;
  }
  SWIFT_INLINE_THUNK  bool CloneableFileType::isUnknownDefault() const {
    return *this == CloneableFileType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String CloneableFileType::getContentType(const swift::Optional<swift::String>& fileExtension) const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8FileTypeO010getContentD013fileExtensionS2SSg_tF(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileExtension)), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableFileType::getFileExtension(const swift::Optional<swift::String>& contentType) const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8FileTypeO03getC9Extension07contentD0S2SSg_tF(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(contentType)), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CloneableFileType> CloneableFileType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<CloneableFileType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A8FileTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableFileType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8FileTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableKML::convertKMLToString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3KMLV18convertKMLToStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableKML::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A3KMLV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setId(const swift::String& value) {
  return _impl::$s13CloneableCore0A8LocationV2idSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double CloneableLocation::getLatitude() const {
  return _impl::$s13CloneableCore0A8LocationV8latitudeSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setLatitude(double value) {
  return _impl::$s13CloneableCore0A8LocationV8latitudeSdvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double CloneableLocation::getLongitude() const {
  return _impl::$s13CloneableCore0A8LocationV9longitudeSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setLongitude(double value) {
  return _impl::$s13CloneableCore0A8LocationV9longitudeSdvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<double> CloneableLocation::getAltitude() const {
  return swift::_impl::_impl_Optional<double>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore0A8LocationV8altitudeSdSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setAltitude(const swift::Optional<double>& value) {
  return _impl::$s13CloneableCore0A8LocationV8altitudeSdSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<double>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CloneableLocation::getComplexType() const {
  return _impl::$s13CloneableCore0A8LocationV11complexTypeSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CloneableLocation::setComplexType(bool value) {
  return _impl::$s13CloneableCore0A8LocationV11complexTypeSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLocation::simpleDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A8LocationV17simpleDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableLocation::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A8LocationV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableLog::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3LogV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setId(const swift::String& value) {
  return _impl::$s13CloneableCore0A3LogV2idSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK LogLevel CloneableLog::getLogLevel() const {
  return _impl::_impl_LogLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV8logLevelAA0cE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setLogLevel(const LogLevel& value) {
  return _impl::$s13CloneableCore0A3LogV8logLevelAA0cE0Ovs(_impl::_impl_LogLevel::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableLog::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A3LogV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setMessage(const swift::String& value) {
  return _impl::$s13CloneableCore0A3LogV7messageSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<LoggerWorkflowInformation> CloneableLog::getWorkflow() const {
  return swift::_impl::_impl_Optional<LoggerWorkflowInformation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setWorkflow(const swift::Optional<LoggerWorkflowInformation>& value) {
  return _impl::$s13CloneableCore0A3LogV8workflowAA25LoggerWorkflowInformationVSgvs(swift::_impl::_impl_Optional<LoggerWorkflowInformation>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<LoggerComponentInformation> CloneableLog::getComponent() const {
  return swift::_impl::_impl_Optional<LoggerComponentInformation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setComponent(const swift::Optional<LoggerComponentInformation>& value) {
  return _impl::$s13CloneableCore0A3LogV9componentAA26LoggerComponentInformationVSgvs(swift::_impl::_impl_Optional<LoggerComponentInformation>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DisplayMode> CloneableLog::getDisplayMode() const {
  return swift::_impl::_impl_Optional<DisplayMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CloneableLog::setDisplayMode(const swift::Optional<DisplayMode>& value) {
  return _impl::$s13CloneableCore0A3LogV11displayModeAA07DisplayE0OSgvs(swift::_impl::_impl_Optional<DisplayMode>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<CloneableLog> CloneableLogger::getLogs() {
  return swift::_impl::_impl_Array<CloneableLog>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore0A6LoggerC7getLogsSayAA0A3LogVGyFZ(swift::TypeMetadataTrait<CloneableLogger>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK void CloneableLogger::clearLogs() {
  return _impl::$s13CloneableCore0A6LoggerC9clearLogsyyFZ(swift::TypeMetadataTrait<CloneableLogger>::getTypeMetadata());
  }
  SWIFT_INLINE_THUNK void CloneableLogger::notifyObservers(const CloneableLog& log) {
  return _impl::$s13CloneableCore0A6LoggerC15notifyObservers3logyAA0A3LogV_tFZ(_impl::_impl_CloneableLog::getOpaquePointer(log), swift::TypeMetadataTrait<CloneableLogger>::getTypeMetadata());
  }
  SWIFT_INLINE_THUNK swift::String CloneableNumber::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6NumberV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableNumber::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A6NumberV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableNumber CloneableNumber::init(double value) {
  return _impl::_impl_CloneableNumber::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A6NumberVyACSdcfC(result, value);
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableNumber::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6NumberV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableNumber::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6NumberV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableStatus::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StatusV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableStatus::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A6StatusV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableStatus CloneableStatus::init(const swift::String& json) {
  return _impl::_impl_CloneableStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A6StatusV4jsonACSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(json)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableStatus::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StatusV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableStatus::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StatusV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableString::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StringV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableString::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A6StringV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableString CloneableString::init(const swift::String& json) {
  return _impl::_impl_CloneableString::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore0A6StringV4jsonACSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(json)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableString::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StringV09getTypeAsC0SSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableString::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A6StringV03getC11DescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_notAuthenticated::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO16notAuthenticatedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isNotAuthenticated() const {
    return *this == CloneableSyncError::notAuthenticated;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_fileSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO04filecD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isFileSyncError() const {
    return *this == CloneableSyncError::fileSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_objectSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO06objectcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isObjectSyncError() const {
    return *this == CloneableSyncError::objectSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_workflowSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO08workflowcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isWorkflowSyncError() const {
    return *this == CloneableSyncError::workflowSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_completedWorkflowSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO017completedWorkflowcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isCompletedWorkflowSyncError() const {
    return *this == CloneableSyncError::completedWorkflowSyncError;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_notificationSyncSerror::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO012notificationC6SerroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isNotificationSyncSerror() const {
    return *this == CloneableSyncError::notificationSyncSerror;
  }
  SWIFT_INLINE_THUNK CloneableSyncError CloneableSyncError::_impl_dataObjectSyncError::operator()() const {
    auto result = CloneableSyncError::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A9SyncErrorO010dataObjectcD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isDataObjectSyncError() const {
    return *this == CloneableSyncError::dataObjectSyncError;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncError::isUnknownDefault() const {
    return *this == CloneableSyncError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableSyncError::getHashValue() const {
  return _impl::$s13CloneableCore0A9SyncErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_not_synced::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO10not_syncedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isNot_synced() const {
    return *this == CloneableSyncStatus::not_synced;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_syncing::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO7syncingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isSyncing() const {
    return *this == CloneableSyncStatus::syncing;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_synced::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO6syncedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isSynced() const {
    return *this == CloneableSyncStatus::synced;
  }
  SWIFT_INLINE_THUNK CloneableSyncStatus CloneableSyncStatus::_impl_sync_error::operator()() const {
    auto result = CloneableSyncStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore0A10SyncStatusO10sync_erroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isSync_error() const {
    return *this == CloneableSyncStatus::sync_error;
  }
  SWIFT_INLINE_THUNK  bool CloneableSyncStatus::isUnknownDefault() const {
    return *this == CloneableSyncStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CloneableSyncStatus::getHashValue() const {
  return _impl::$s13CloneableCore0A10SyncStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String CloneableUUID::getJSONValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4UUIDV12getJSONValueSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableUUID::getTypeAsString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4UUIDV15getTypeAsStringSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CloneableUUID::getStringDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore0A4UUIDV20getStringDescriptionSSyF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<JXValue> CloneableUUID::getJXValue(const JXContext& context) const {
  return swift::_impl::_impl_Optional<JXValue>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore0A4UUIDV10getJXValue7context5JXKit0E0CSgAF9JXContextC_tF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(context), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType CompletedWorkflowCallType::_impl_startWorkflow::operator()() const {
    auto result = CompletedWorkflowCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore25CompletedWorkflowCallTypeO05startD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CompletedWorkflowCallType::isStartWorkflow() const {
    return *this == CompletedWorkflowCallType::startWorkflow;
  }
  SWIFT_INLINE_THUNK CompletedWorkflowCallType CompletedWorkflowCallType::_impl_updateWorkflow::operator()() const {
    auto result = CompletedWorkflowCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore25CompletedWorkflowCallTypeO06updateD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CompletedWorkflowCallType::isUpdateWorkflow() const {
    return *this == CompletedWorkflowCallType::updateWorkflow;
  }
  SWIFT_INLINE_THUNK  bool CompletedWorkflowCallType::isUnknownDefault() const {
    return *this == CompletedWorkflowCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<CompletedWorkflowCallType> CompletedWorkflowCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<CompletedWorkflowCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore25CompletedWorkflowCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CompletedWorkflowCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore25CompletedWorkflowCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String Component::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9ComponentV2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void Component::setId(const swift::String& value) {
  return _impl::$s13CloneableCore9ComponentV2idSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentType Component::getType() const {
  return _impl::_impl_ComponentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore9ComponentV4typeAA0C4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void Component::setType(const ComponentType& value) {
  return _impl::$s13CloneableCore9ComponentV4typeAA0C4TypeOvs(_impl::_impl_ComponentType::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<ComponentRuntime> Component::getRuntimes() const {
  return swift::_impl::_impl_Array<ComponentRuntime>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void Component::setRuntimes(const swift::Array<ComponentRuntime>& value) {
  return _impl::$s13CloneableCore9ComponentV8runtimesSayAA0C7RuntimeOGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<ComponentRuntime>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_ios::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO3iosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isIos() const {
    return *this == ComponentRuntime::ios;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_cloud::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO5cloudyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isCloud() const {
    return *this == ComponentRuntime::cloud;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_web::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO3webyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isWeb() const {
    return *this == ComponentRuntime::web;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_android::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO7androidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isAndroid() const {
    return *this == ComponentRuntime::android;
  }
  SWIFT_INLINE_THUNK ComponentRuntime ComponentRuntime::_impl_edge_linux::operator()() const {
    auto result = ComponentRuntime::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16ComponentRuntimeO10edge_linuxyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isEdge_linux() const {
    return *this == ComponentRuntime::edge_linux;
  }
  SWIFT_INLINE_THUNK  bool ComponentRuntime::isUnknownDefault() const {
    return *this == ComponentRuntime::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ComponentRuntime> ComponentRuntime::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<ComponentRuntime>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore16ComponentRuntimeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ComponentRuntime::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16ComponentRuntimeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_ios_workflow_start::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO18ios_workflow_startyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isIos_workflow_start() const {
    return *this == ComponentType::ios_workflow_start;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_ios_workflow_end::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO16ios_workflow_endyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isIos_workflow_end() const {
    return *this == ComponentType::ios_workflow_end;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_cloud_workflow_start::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO20cloud_workflow_startyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isCloud_workflow_start() const {
    return *this == ComponentType::cloud_workflow_start;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_cloud_workflow_end::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO18cloud_workflow_endyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isCloud_workflow_end() const {
    return *this == ComponentType::cloud_workflow_end;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_ui::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO2uiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isUi() const {
    return *this == ComponentType::ui;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_processing::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO10processingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isProcessing() const {
    return *this == ComponentType::processing;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_object::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO6objectyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isObject() const {
    return *this == ComponentType::object;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_logical::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO7logicalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isLogical() const {
    return *this == ComponentType::logical;
  }
  SWIFT_INLINE_THUNK ComponentType ComponentType::_impl_file_data::operator()() const {
    auto result = ComponentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore13ComponentTypeO9file_datayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isFile_data() const {
    return *this == ComponentType::file_data;
  }
  SWIFT_INLINE_THUNK  bool ComponentType::isUnknownDefault() const {
    return *this == ComponentType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ComponentType> ComponentType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<ComponentType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore13ComponentTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ComponentType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore13ComponentTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void Components::addComponent(const Component& component) {
  return _impl::$s13CloneableCore10ComponentsC12addComponent9componentyAA0E0V_tFZ(_impl::_impl_Component::getOpaquePointer(component), swift::TypeMetadataTrait<Components>::getTypeMetadata());
  }
  SWIFT_INLINE_THUNK swift::String DataInput::getComponentDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9DataInputV18componentDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setComponentDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore9DataInputV18componentDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataInput::getInputDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9DataInputV14inputDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setInputDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore9DataInputV14inputDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataInput::getInputStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore9DataInputV13inputStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setInputStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore9DataInputV13inputStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AnyCloneableData DataInput::getData() const {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore9DataInputV4dataAA03AnyaC0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setData(const AnyCloneableData& value) {
  return _impl::$s13CloneableCore9DataInputV4dataAA03AnyaC0Vvs(_impl::_impl_AnyCloneableData::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> DataInput::getBatch() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore9DataInputV5batchSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataInput::setBatch(const swift::Optional<swift::Int>& value) {
  return _impl::$s13CloneableCore9DataInputV5batchSiSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool DataInput::getCurrentBatch() const {
  return _impl::$s13CloneableCore9DataInputV12currentBatchSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DataInput::setCurrentBatch(bool value) {
  return _impl::$s13CloneableCore9DataInputV12currentBatchSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CloneableFileSyncEngine DataManager::getFile_sync_engine() {
  return _impl::_impl_CloneableFileSyncEngine::makeRetained(_impl::$s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  }
  SWIFT_INLINE_THUNK void DataManager::setFile_sync_engine(const CloneableFileSyncEngine& value) {
  return _impl::$s13CloneableCore11DataManagerC16file_sync_engineAA0A14FileSyncEngineCvsTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(value), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void DataManager::clearFileCache() {
  return _impl::$s13CloneableCore11DataManagerC14clearFileCacheyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DataManager::getUserId() {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore11DataManagerC9getUserIdSSSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DataManager::canProceed(const swift::String& auth0_jwt) {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore11DataManagerC10canProceed9auth0_jwtSSSgSS_tFTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(auth0_jwt)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK DataObjectCallType DataObjectCallType::_impl_createRequest::operator()() const {
    auto result = DataObjectCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore18DataObjectCallTypeO13createRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataObjectCallType::isCreateRequest() const {
    return *this == DataObjectCallType::createRequest;
  }
  SWIFT_INLINE_THUNK DataObjectCallType DataObjectCallType::_impl_updateRequest::operator()() const {
    auto result = DataObjectCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore18DataObjectCallTypeO13updateRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataObjectCallType::isUpdateRequest() const {
    return *this == DataObjectCallType::updateRequest;
  }
  SWIFT_INLINE_THUNK  bool DataObjectCallType::isUnknownDefault() const {
    return *this == DataObjectCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DataObjectCallType> DataObjectCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<DataObjectCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore18DataObjectCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DataObjectCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore18DataObjectCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int DataOutput::getOutputCount() const {
  return _impl::$s13CloneableCore10DataOutputV11outputCountSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DataOutput::setOutputCount(swift::Int value) {
  return _impl::$s13CloneableCore10DataOutputV11outputCountSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getDynamicOutputID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV07dynamicD2IDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setDynamicOutputID(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV07dynamicD2IDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AnyCloneableData DataOutput::getData() const {
  return _impl::_impl_AnyCloneableData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setData(const AnyCloneableData& value) {
  return _impl::$s13CloneableCore10DataOutputV4dataAA03AnyaC0Vvs(_impl::_impl_AnyCloneableData::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getStaticComponentID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV17staticComponentIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setStaticComponentID(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV17staticComponentIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getDynamicComponentID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV18dynamicComponentIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setDynamicComponentID(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV18dynamicComponentIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DataOutput::getTypeDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10DataOutputV15typeDescriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setTypeDescription(const swift::String& value) {
  return _impl::$s13CloneableCore10DataOutputV15typeDescriptionSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentType DataOutput::getOutputComponentType() const {
  return _impl::_impl_ComponentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setOutputComponentType(const ComponentType& value) {
  return _impl::$s13CloneableCore10DataOutputV19outputComponentTypeAA0fG0Ovs(_impl::_impl_ComponentType::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<TargetInput> DataOutput::getTargetInput() const {
  return swift::_impl::_impl_Optional<TargetInput>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setTargetInput(const swift::Optional<TargetInput>& value) {
  return _impl::$s13CloneableCore10DataOutputV11targetInputAA06TargetF0VSgvs(swift::_impl::_impl_Optional<TargetInput>::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> DataOutput::getBatch() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore10DataOutputV5batchSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DataOutput::setBatch(const swift::Optional<swift::Int>& value) {
  return _impl::$s13CloneableCore10DataOutputV5batchSiSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DataOutput DataOutput::init(const AnyCloneableData& data, const swift::String& staticComponentID, const swift::String& dynamicComponentID, const swift::String& dynamicOutputID, const ComponentType& outputComponentType, const swift::Optional<TargetInput>& targetInput) {
  return _impl::_impl_DataOutput::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV4data17staticComponentID07dynamicgH00idH006outputG4Type11targetInputAcA03AnyaC0V_S3SAA0gK0OAA06TargetM0VSgtcfC(result, _impl::_impl_AnyCloneableData::getOpaquePointer(data), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(staticComponentID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(dynamicComponentID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(dynamicOutputID)), _impl::_impl_ComponentType::getOpaquePointer(outputComponentType), swift::_impl::_impl_Optional<TargetInput>::getOpaquePointer(targetInput));
  });
  }
  SWIFT_INLINE_THUNK DataInput DataOutput::convertToDataInput(bool firstCall) const {
  return _impl::_impl_DataInput::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10DataOutputV09convertToC5Input9firstCallAA0cG0VSb_tF(result, firstCall, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Connection> DatabaseManager::getConnection() {
  return swift::_impl::_impl_Optional<Connection>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void DatabaseManager::setConnection(const swift::Optional<Connection>& value) {
  return _impl::$s13CloneableCore15DatabaseManagerC10connection6SQLite10ConnectionCSgvsTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8(swift::_impl::_impl_Optional<Connection>::getOpaquePointer(value)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_top::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO3topyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isTop() const {
    return *this == DisplayMode::top;
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_middle::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO6middleyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isMiddle() const {
    return *this == DisplayMode::middle;
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_drawer::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO6draweryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isDrawer() const {
    return *this == DisplayMode::drawer;
  }
  SWIFT_INLINE_THUNK DisplayMode DisplayMode::_impl_sheet::operator()() const {
    auto result = DisplayMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11DisplayModeO5sheetyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isSheet() const {
    return *this == DisplayMode::sheet;
  }
  SWIFT_INLINE_THUNK  bool DisplayMode::isUnknownDefault() const {
    return *this == DisplayMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DisplayMode::getHashValue() const {
  return _impl::$s13CloneableCore11DisplayModeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileExtension() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileExtension(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV13fileExtensionSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV8fileNameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileName(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV8fileNameSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> FieldFileInformation::getFileSize() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore20FieldFileInformationV8fileSizeSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileSize(const swift::Optional<swift::Int>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV8fileSizeSiSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileType() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV8fileTypeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileType(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV8fileTypeSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getFileUrl() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV7fileUrlSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setFileUrl(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV7fileUrlSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getStorageAuthProviderName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setStorageAuthProviderName(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV23storageAuthProviderNameSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getStorageAuthProviderRefID() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setStorageAuthProviderRefID(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV24storageAuthProviderRefIDSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldFileInformation::getStorageProvider() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore20FieldFileInformationV15storageProviderSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setStorageProvider(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV15storageProviderSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> FieldFileInformation::getOne_way_sync() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint8_t_0_1(result, _impl::$s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FieldFileInformation::setOne_way_sync(const swift::Optional<bool>& value) {
  return _impl::$s13CloneableCore20FieldFileInformationV12one_way_syncSbSgvs(_impl::swift_interop_passDirect_CloneableCore_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK FieldFileInformation FieldFileInformation::init(const swift::Optional<swift::String>& fileExtension, const swift::Optional<swift::String>& fileName, const swift::Optional<swift::Int>& fileSize, const swift::Optional<swift::String>& fileType, const swift::Optional<swift::String>& fileUrl, const swift::Optional<swift::String>& storageAuthProviderName, const swift::Optional<swift::String>& storageAuthProviderRefID, const swift::Optional<swift::String>& storageProvider, const swift::Optional<bool>& one_way_sync) {
  return _impl::_impl_FieldFileInformation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore20FieldFileInformationV13fileExtension0F4Name0F4Size0F4Type0F3Url019storageAuthProviderH00lmN5RefID0lN012one_way_syncACSSSg_AMSiSgA5MSbSgtcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileExtension)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileName)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(swift::_impl::_impl_Optional<swift::Int>::getOpaquePointer(fileSize)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileType)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(fileUrl)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(storageAuthProviderName)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(storageAuthProviderRefID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(storageProvider)), _impl::swift_interop_passDirect_CloneableCore_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(one_way_sync)));
  });
  }
  SWIFT_INLINE_THUNK FileInformationCallType FileInformationCallType::_impl_createFile::operator()() const {
    auto result = FileInformationCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore23FileInformationCallTypeO06createC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileInformationCallType::isCreateFile() const {
    return *this == FileInformationCallType::createFile;
  }
  SWIFT_INLINE_THUNK FileInformationCallType FileInformationCallType::_impl_updateUploadStatus::operator()() const {
    auto result = FileInformationCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore23FileInformationCallTypeO18updateUploadStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileInformationCallType::isUpdateUploadStatus() const {
    return *this == FileInformationCallType::updateUploadStatus;
  }
  SWIFT_INLINE_THUNK  bool FileInformationCallType::isUnknownDefault() const {
    return *this == FileInformationCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<FileInformationCallType> FileInformationCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<FileInformationCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore23FileInformationCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileInformationCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore23FileInformationCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void FileObserverToken::cancel() {
  return _impl::$s13CloneableCore17FileObserverTokenC6cancelyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRelation::_impl_object::operator()() const {
    auto result = FileSyncRelation::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16FileSyncRelationO6objectyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isObject() const {
    return *this == FileSyncRelation::object;
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRelation::_impl_workflow::operator()() const {
    auto result = FileSyncRelation::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16FileSyncRelationO8workflowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isWorkflow() const {
    return *this == FileSyncRelation::workflow;
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRelation::_impl_component::operator()() const {
    auto result = FileSyncRelation::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore16FileSyncRelationO9componentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isComponent() const {
    return *this == FileSyncRelation::component;
  }
  SWIFT_INLINE_THUNK  bool FileSyncRelation::isUnknownDefault() const {
    return *this == FileSyncRelation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<FileSyncRelation> FileSyncRelation::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<FileSyncRelation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore16FileSyncRelationO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRelation::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16FileSyncRelationO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRequest::getFileName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV8fileNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AnyCloneableData> FileSyncRequest::getData() const {
  return swift::_impl::_impl_Optional<AnyCloneableData>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV4dataAA03AnyA4DataVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK FileSyncRelation FileSyncRequest::getFileRelation() const {
  return _impl::_impl_FileSyncRelation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV12fileRelationAA0cdG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CloneableFileType FileSyncRequest::getFileType() const {
  return _impl::_impl_CloneableFileType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV8fileTypeAA0acG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK bool FileSyncRequest::getOne_way_sync() const {
  return _impl::$s13CloneableCore15FileSyncRequestV12one_way_syncSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRequest::getUser() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV4userSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String FileSyncRequest::getCompany() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV7companySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FileSyncRequest::getTypeRefID() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore15FileSyncRequestV9typeRefIDSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<swift::String>> FileSyncRequest::getRelatedDeployedWorkflowIDs() const {
  return swift::_impl::_impl_Optional<swift::Array<swift::String>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8(result, _impl::$s13CloneableCore15FileSyncRequestV26relatedDeployedWorkflowIDsSaySSGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool FileSyncRequest::getDownload() const {
  return _impl::$s13CloneableCore15FileSyncRequestV8downloadSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldFileInformation> FileSyncRequest::getFieldFileInformation() const {
  return swift::_impl::_impl_Optional<FieldFileInformation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore15FileSyncRequestV05fieldC11InformationAA05FieldcG0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_fatal::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO5fatalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isFatal() const {
    return *this == LogLevel::fatal;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_success::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isSuccess() const {
    return *this == LogLevel::success;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_debug::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO5debugyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isDebug() const {
    return *this == LogLevel::debug;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_info::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO4infoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isInfo() const {
    return *this == LogLevel::info;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_warning::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO7warningyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isWarning() const {
    return *this == LogLevel::warning;
  }
  SWIFT_INLINE_THUNK LogLevel LogLevel::_impl_error::operator()() const {
    auto result = LogLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore8LogLevelO5erroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isError() const {
    return *this == LogLevel::error;
  }
  SWIFT_INLINE_THUNK  bool LogLevel::isUnknownDefault() const {
    return *this == LogLevel::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String LogLevel::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore8LogLevelO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<LogLevel> LogLevel::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<LogLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore8LogLevelO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_FileInformation::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO15FileInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isFileInformation() const {
    return *this == ModelToSync::FileInformation;
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_CompletedWorkflow::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO17CompletedWorkflowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isCompletedWorkflow() const {
    return *this == ModelToSync::CompletedWorkflow;
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_NotificationRequest::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO19NotificationRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isNotificationRequest() const {
    return *this == ModelToSync::NotificationRequest;
  }
  SWIFT_INLINE_THUNK ModelToSync ModelToSync::_impl_DataObject::operator()() const {
    auto result = ModelToSync::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore11ModelToSyncO10DataObjectyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isDataObject() const {
    return *this == ModelToSync::DataObject;
  }
  SWIFT_INLINE_THUNK  bool ModelToSync::isUnknownDefault() const {
    return *this == ModelToSync::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ModelToSync> ModelToSync::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<ModelToSync>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore11ModelToSyncO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ModelToSync::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11ModelToSyncO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK NotificationRequestCallType NotificationRequestCallType::_impl_uploadRequest::operator()() const {
    auto result = NotificationRequestCallType::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore27NotificationRequestCallTypeO06uploadD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool NotificationRequestCallType::isUploadRequest() const {
    return *this == NotificationRequestCallType::uploadRequest;
  }
  SWIFT_INLINE_THUNK  bool NotificationRequestCallType::isUnknownDefault() const {
    return *this == NotificationRequestCallType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<NotificationRequestCallType> NotificationRequestCallType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<NotificationRequestCallType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore27NotificationRequestCallTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String NotificationRequestCallType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore27NotificationRequestCallTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ObjectIdGenerator::generate() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore17ObjectIdGeneratorV8generateSSyFZ());
  });
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetInputStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetInputStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV19targetInputStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV15targetDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV15targetDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetInput() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV11targetInputSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetInput(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV11targetInputSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV14targetStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV14targetStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String OutputConnection::getTargetType() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore16OutputConnectionV10targetTypeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void OutputConnection::setTargetType(const swift::String& value) {
  return _impl::$s13CloneableCore16OutputConnectionV10targetTypeSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK OutputConnection OutputConnection::init(const swift::String& targetInputStaticID, const swift::String& targetDynamicID, const swift::String& targetInput, const swift::String& targetStaticID, const swift::String& targetType) {
  return _impl::_impl_OutputConnection::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore16OutputConnectionV19targetInputStaticID0e7DynamicH00eF00egH00E4TypeACSS_S4StcfC(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetInputStaticID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetDynamicID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetInput)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetStaticID)), _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(targetType)));
  });
  }
  SWIFT_INLINE_THUNK swift::Int ParsingError::getLine() const {
  return _impl::$s13CloneableCore12ParsingErrorV4lineSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int ParsingError::getColumn() const {
  return _impl::$s13CloneableCore12ParsingErrorV6columnSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ParsingError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore12ParsingErrorV16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ParsingError::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12ParsingErrorV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT RUNTIME_ENVIRONMENT::_impl_mobile::operator()() const {
    auto result = RUNTIME_ENVIRONMENT::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO6mobileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RUNTIME_ENVIRONMENT::isMobile() const {
    return *this == RUNTIME_ENVIRONMENT::mobile;
  }
  SWIFT_INLINE_THUNK RUNTIME_ENVIRONMENT RUNTIME_ENVIRONMENT::_impl_cloud::operator()() const {
    auto result = RUNTIME_ENVIRONMENT::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO5cloudyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RUNTIME_ENVIRONMENT::isCloud() const {
    return *this == RUNTIME_ENVIRONMENT::cloud;
  }
  SWIFT_INLINE_THUNK  bool RUNTIME_ENVIRONMENT::isUnknownDefault() const {
    return *this == RUNTIME_ENVIRONMENT::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int RUNTIME_ENVIRONMENT::getHashValue() const {
  return _impl::$s13CloneableCore19RUNTIME_ENVIRONMENTO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void SyncStatusToken::unsubscribe() {
  return _impl::$s13CloneableCore15SyncStatusTokenC11unsubscribeyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Int SyncStatusToken::getHashValue() {
  return _impl::$s13CloneableCore15SyncStatusTokenC9hashValueSivgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> SyncedFileDatabase::getUnsyncedFileCount() {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore18SyncedFileDatabaseC011getUnsyncedD5CountSiSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> SyncedFileDatabase::getTotalFileCount() {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore18SyncedFileDatabaseC08getTotalD5CountSiSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> SyncedFileDatabase::getSyncedFileCount() {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13CloneableCore18SyncedFileDatabaseC03getcD5CountSiSgyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationObserverToken::cancel() {
  return _impl::$s13CloneableCore34SyncedFileInformationObserverTokenC6cancelyyFTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Array<swift::String> SyncedFileInformationV2::getRelatedCloneableDeployedWorkflows() const {
  return swift::_impl::_impl_Array<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_void_ptr_0_8(result, _impl::$s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setRelatedCloneableDeployedWorkflows(const swift::Array<swift::String>& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V07relatedA17DeployedWorkflowsSaySSGvs(_impl::swift_interop_passDirect_CloneableCore_void_ptr_0_8(swift::_impl::_impl_Array<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> SyncedFileInformationV2::getDownload() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint8_t_0_1(result, _impl::$s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setDownload(const swift::Optional<bool>& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V8downloadSbSgvs(_impl::swift_interop_passDirect_CloneableCore_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool SyncedFileInformationV2::getSyncComplete() const {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setSyncComplete(bool value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V12syncCompleteSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> SyncedFileInformationV2::getLocalFilePath() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setLocalFilePath(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V05localD4PathSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String SyncedFileInformationV2::getFileName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore23SyncedFileInformationV2V8fileNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void SyncedFileInformationV2::setFileName(const swift::String& value) {
  return _impl::$s13CloneableCore23SyncedFileInformationV2V8fileNameSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ComponentType TargetInput::getComponentType() const {
  return _impl::_impl_ComponentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setComponentType(const ComponentType& value) {
  return _impl::$s13CloneableCore11TargetInputV13componentTypeAA09ComponentF0Ovs(_impl::_impl_ComponentType::getOpaquePointer(value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetInputStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV06targetD8StaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetInputStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV06targetD8StaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetInputDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV06targetD9DynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetInputDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV06targetD9DynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetComponentStaticID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV23targetComponentStaticIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetComponentStaticID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV23targetComponentStaticIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TargetInput::getTargetComponentDynamicID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setTargetComponentDynamicID(const swift::String& value) {
  return _impl::$s13CloneableCore11TargetInputV24targetComponentDynamicIDSSvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> TargetInput::getObjectFieldOutputDynamicID() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void TargetInput::setObjectFieldOutputDynamicID(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore11TargetInputV26objectFieldOutputDynamicIDSSSgvs(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String TextElement::getText() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore11TextElementC4textSSvg(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_new::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO3newyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isNew_() const {
    return *this == TrackState::new_;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_tracked::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO7trackedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isTracked() const {
    return *this == TrackState::tracked;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_lost::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO4lostyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isLost() const {
    return *this == TrackState::lost;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_removed::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO7removedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isRemoved() const {
    return *this == TrackState::removed;
  }
  SWIFT_INLINE_THUNK TrackState TrackState::_impl_unknown::operator()() const {
    auto result = TrackState::_make();
    result._destructiveInjectEnumTag(_impl::$s13CloneableCore10TrackStateO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isUnknown() const {
    return *this == TrackState::unknown;
  }
  SWIFT_INLINE_THUNK  bool TrackState::isUnknownDefault() const {
    return *this == TrackState::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<TrackState> TrackState::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<TrackState>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10TrackStateO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int TrackState::getRawValue() const {
  return _impl::$s13CloneableCore10TrackStateO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> WorkflowFramework::getActiveUIComponent() {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK void WorkflowFramework::setActiveUIComponent(const swift::Optional<swift::String>& value) {
  return _impl::$s13CloneableCore17WorkflowFrameworkC17activeUIComponentSSSgvsTj(_impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(value)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::String XMLAttribute::getName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12XMLAttributeV4nameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLAttribute::getText() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12XMLAttributeV4textSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLAttribute::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore12XMLAttributeV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getName() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC4nameSSvg(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK bool XMLElement::getCaseInsensitive() {
  return _impl::$s13CloneableCore10XMLElementC15caseInsensitiveSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK swift::Optional<XMLAttribute> XMLElement::attribute(const swift::String& name) {
  return swift::_impl::_impl_Optional<XMLAttribute>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13CloneableCore10XMLElementC9attribute2byAA12XMLAttributeVSgSS_tFTj(result, _impl::swift_interop_passDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(name)), ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getText() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC4textSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getRecursiveText() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC13recursiveTextSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK swift::String XMLElement::getInnerXML() {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_CloneableCore_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13CloneableCore10XMLElementC8innerXMLSSvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this)));
  });
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getShouldProcessLazily() {
  return _impl::$s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setShouldProcessLazily(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC19shouldProcessLazilySbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getShouldProcessNamespaces() {
  return _impl::$s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setShouldProcessNamespaces(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC23shouldProcessNamespacesSbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getCaseInsensitive() {
  return _impl::$s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setCaseInsensitive(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC15caseInsensitiveSbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK bool XMLHashOptions::getDetectParsingErrors() {
  return _impl::$s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvgTj(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void XMLHashOptions::setDetectParsingErrors(bool value) {
  return _impl::$s13CloneableCore14XMLHashOptionsC19detectParsingErrorsSbvsTj(value, ::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }

class APICallType { } SWIFT_UNAVAILABLE_MSG("protocol 'APICallType' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CloneableData'.

class CloneableDataInput { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableDataInput' can not yet be represented in C++");

class CloneableDataOutput { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableDataOutput' can not yet be represented in C++");

class CloneableDataType { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableDataType' can not yet be represented in C++");

class CloneableLocationManager { } SWIFT_UNAVAILABLE_MSG("protocol 'CloneableLocationManager' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CloneableObject'.

// Unavailable in C++: Swift type alias 'CloneableObserverToken'.

// Unavailable in C++: Swift type alias 'CloneableWorkflow'.

// Unavailable in C++: Swift type alias 'CloneableWorkflow_auditTimeline'.

// Unavailable in C++: Swift type alias 'CloneableWorkflow_relatedObjectTypes'.

class ComponentSubscriber { } SWIFT_UNAVAILABLE_MSG("protocol 'ComponentSubscriber' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'DataObjectObserverToken'.

// Unavailable in C++: Swift type alias 'DeployedWorkflow_components'.

// Unavailable in C++: Swift type alias 'DeployedWorkflow_object_field'.

// Unavailable in C++: Swift type alias 'DeployedWorkflow_objects'.

class FileSyncChangeType { } SWIFT_UNAVAILABLE_MSG("enum 'FileSyncChangeType' can not yet be represented in C++ as one of its cases has multiple associated values");

// Unavailable in C++: Swift type alias 'FileSyncStatusToken'.

class IndexingError { } SWIFT_UNAVAILABLE_MSG("enum 'IndexingError' can not yet be represented in C++ as one of its cases has multiple associated values");

// Unavailable in C++: Swift type alias 'LogObserverToken'.

class NavigationCoordinator { } SWIFT_UNAVAILABLE_MSG("protocol 'NavigationCoordinator' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'NotificationRequest'.

// Unavailable in C++: Swift type alias 'NotificationRequest_roles_channels'.

// Unavailable in C++: Swift type alias 'NotificationRequest_targetSMSNumbers'.

// Unavailable in C++: Swift type alias 'ObjectField'.

class SQLiteTable { } SWIFT_UNAVAILABLE_MSG("protocol 'SQLiteTable' can not yet be represented in C++");

class SyncManagerDataObjectChangeType { } SWIFT_UNAVAILABLE_MSG("Swift enum 'SyncManagerDataObjectChangeType' cannot be represented in C++");

class SyncManagerDeployedWorkflowChangeType { } SWIFT_UNAVAILABLE_MSG("Swift enum 'SyncManagerDeployedWorkflowChangeType' cannot be represented in C++");

class WorkflowService { } SWIFT_UNAVAILABLE_MSG("protocol 'WorkflowService' can not yet be represented in C++");

class XMLAttributeDeserializable { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLAttributeDeserializable' can not yet be represented in C++");

class XMLContent { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLContent' can not yet be represented in C++");

class XMLDeserializationError { } SWIFT_UNAVAILABLE_MSG("enum 'XMLDeserializationError' can not yet be represented in C++ as one of its cases has multiple associated values");

class XMLElementDeserializable { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLElementDeserializable' can not yet be represented in C++");

class XMLError { } SWIFT_UNAVAILABLE_MSG("enum 'XMLError' can not be represented in C++ as one of its cases has an associated value with type that can't be represented in C++");

// Unavailable in C++: Swift type alias 'XMLHashXMLElement'.

class XMLIndexer { } SWIFT_UNAVAILABLE_MSG("Swift enum 'XMLIndexer' cannot be represented in C++");

class XMLObjectDeserialization { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLObjectDeserialization' can not yet be represented in C++");

class XMLSubscriptType { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLSubscriptType' can not yet be represented in C++");

class XMLValueDeserialization { } SWIFT_UNAVAILABLE_MSG("protocol 'XMLValueDeserialization' can not yet be represented in C++");

// Unavailable in C++: Swift var 'workflowFramework'.

} // namespace CloneableCore

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
